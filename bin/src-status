#!/bin/bash

main () {
  # find command
  while true; do
    case "$1" in
      -h|--help) usage "$0" && exit 1 ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done

  trap clean SIGHUP SIGINT SIGTERM
  data="$(code-status "$HOME/src" --simple)"

  echo "$data" | get_non_master_branches
  printf '\n'
  echo "$data" | no_repo
}

get_non_master_branches () {
  printf "[ Not on master ]\n"
  curr_dir="$(pwd)"
  table=""
  while read line; do
    branch="$(echo "$line" | awk -F ',' '{ print $1 }')"
    if [ ! "$branch" = 'master' ]; then
      [ "$branch" = "" ] && continue
      repo="$(echo "$line" | awk -F ',' '{ print $6 }')"
      cd "$HOME/src/$repo"
      git checkout master 2> /dev/null
      echo "$table"
      [ $? -ne 0 ] && table="$table$(printf '%s %s\n' "$repo" "$branch")"
    fi
  done
  echo "$table" | column -t
  cd "$curr_dir"
}

prune_branches () {
  printf "[ Not on master ]\n"
  curr_dir="$(pwd)"
  while read line; do
    branch="$(echo "$line" | awk -F ',' '{ print $1 }')"
    if [ ! "$branch" = 'master' ]; then
      repo="$(echo "$line" | awk -F ',' '{ print $6 }')"
      cd "$HOME/src/$repo"
      git checkout master 2> /dev/null
      [ $? -ne 0 ] && printf '  %s\n' "$repo"
    fi
  done
  cd "$curr_dir"
}

dirty_branches () {
  printf "[ Not on master ]\n"
  curr_dir="$(pwd)"
  while read line; do
    branch="$(echo "$line" | awk -F ',' '{ print $1 }')"
    if [ ! "$branch" = 'master' ]; then
      repo="$(echo "$line" | awk -F ',' '{ print $6 }')"
      cd "$HOME/src/$repo"
      git checkout master 2> /dev/null
      [ $? -ne 0 ] && printf '  %s\n' "$repo"
    fi
  done
  cd "$curr_dir"
}

no_repo () {
  printf "[ No repo ]\n"
  curr_dir="$(pwd)"
  while read line; do
    ahead="$(echo "$line" | awk -F ',' '{ print $2 }')"
    if [ "$ahead" = 'NaN' ]; then
      repo="$(echo "$line" | awk -F ',' '{ print $6 }')"
      printf '  %s\n' "$repo"
    fi
  done
  cd "$curr_dir"
}

usage () {
  printf "Usage: %s\n" "$(basename "$1")"
}

clean () {
  printf "cleaning up\n"
}

assert_dep () {
  "$1" --help > /dev/null 2>&1
  [ $? -eq 0 ] && return
  [ $? -ne 0 ] && man "$1" > /dev/null
  [ $? -ne 0 ] && { printf "dependency %s not found\n" "$1"; exit 1; }
}

# reorder args and pass to main()
getopt -T > /dev/null
if [ "$?" -eq 4 ]; then args="$(getopt --long help --options h -- "$*")"
else args="$(getopt h "$*")"; fi
[ ! $? -eq 0 ] && { usage "$0" && exit 2; }
eval set -- "$args"
main "$@"
