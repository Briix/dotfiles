#!/bin/sh

main () {
  # find command
  while true; do
    case "$1" in
      -h|--help) usage "$0" && exit 1 ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done

  printf "What is the name of your script?\n"
  while read line; do
    name="$(pwd)/$line"; break
  done

  printf "What is the the first argument?\n"
  while read line; do
    arg="$line"; break
  done

  write_template \
    | sed "s/ARG/$arg/" \
    > "$name"

  chmod +x "$name"
}

usage () {
  printf "Usage: %s <argument>\n" "$(basename "$1")"
}

assert_dep () {
  "$1" --help > /dev/null 2>&1
  [ $? -eq 0 ] && return
  [ $? -ne 0 ] && man "$1" > /dev/null
  [ $? -ne 0 ] && { printf "dependency %s not found\n" "$1"; exit 1; }
}

write_template () {
cat << 'TEMPLATE'
#!/bin/sh

main () {
  # find command
  while true; do
    case "$1" in
      -h|--help) usage "$0" && exit 1 ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done

  # verify arg count
  if [ $# != 1 ]; then
    printf "Error: ARG required\n"
    usage "$0" && exit 2
  fi

  write_template
}

usage () {
  printf "Usage: %s <ARG>\n" "$(basename "$1")"
}

assert_dep () {
  "$1" --help > /dev/null 2>&1
  [ $? -eq 0 ] && return
  [ $? -ne 0 ] && man "$1" > /dev/null
  [ $? -ne 0 ] && { printf "dependency %s not found\n" "$1"; exit 1; }
}

# reorder args and pass to main()
getopt -T > /dev/null
if [ "$?" -eq 4 ]; then args="$(getopt --long help --options h -- "$*")"
else args="$(getopt h "$*")"; fi
[ ! $? -eq 0 ] && { usage "$0" && exit 2; }
eval set -- "$args"
main "$@"
TEMPLATE
}

# reorder args and pass to main()
getopt -T > /dev/null
if [ "$?" -eq 4 ]; then args="$(getopt --long help --options h -- "$*")"
else args="$(getopt h "$*")"; fi
[ ! $? -eq 0 ] && { usage "$0" && exit 2; }
eval set -- "$args"
main "$@"
