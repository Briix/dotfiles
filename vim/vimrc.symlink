" Vim Basics
" ==========
set nocompatible
filetype off
" set encoding=utf-8

" Enable vim-plug
" ===============
call plug#begin('~/.vim/plugged')

" =======
" Plugins

Plug 'junegunn/goyo.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'Chiel92/vim-autoformat'
Plug 'Raimondi/delimitMate'
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'moll/vim-node'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'pangloss/vim-javascript'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'w0rp/ale'
Plug 'kristijanhusak/vim-carbon-now-sh'
Plug 'rust-lang/rust.vim'
Plug 'autozimu/LanguageClient-neovim', {
\ 'branch': 'next',
\ 'do': 'bash install.sh',
\ }
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" End vim-plug
" ============
call plug#end()

" Configuration Files
" ===================
set exrc   " Enable use of directory-specific .vimrc
set secure " Only run autocommands owned by me

" Display Settings
" ================
syntax on
syntax enable
set t_Co=256

" Disable Background Color Erase (tmux)
" ====================================
if &term =~ '256color'
  set t_ut=
endif

" netrw config
let g:netrw_liststyle=0         " thin (change to 3 for tree)
let g:netrw_banner=0            " no banner
let g:netrw_altv=1              " open files on right
let g:netrw_preview=1           " open previews vertically

" General Config
" ==============
let mapleader=' '
set backspace=indent,eol,start  " Allow backspace in insert mode
set history=1000                " Store lots of :cmdline history
set showcmd                     " Show incomplete cmds down the bottom
set showmode                    " Show current mode down the bottom
set gcr=a:blinkon0              " Disable cursor blink
set autoread                    " Reload files changed outside vim
set laststatus=2                " Always show status line
set nonumber
set clipboard=unnamed           " Use system clipboard
set hidden                      " Buffers can exist in the background
set splitright                  " Opens vertical split right of current window
set splitbelow                  " Opens horizontal split below current window
set autochdir                   " Change directory to the open file
imap <C-c> <CR><Esc>O

" Search Settings
" ===============
set incsearch        " Find the next match as we type the search
set hlsearch         " Hilight searches by default
set viminfo='100,f1  " Save up to 100 marks, enable capital marks

" Turn Off Swap Files
" ===================
set noswapfile
set nobackup
set nowritebackup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Indentation and Display
" =======================
filetype plugin on
filetype indent on
set autoindent
set copyindent
set smartindent
set preserveindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

set list                              " Display tabs and trailing spaces visually
set listchars=tab:»-,trail:·,eol:¬
set colorcolumn=80                    " Show are marker at 80 chars
set nowrap                            " Don't wrap lines
set linebreak                         " Wrap lines at convenient points

" Folds
" =====
set foldmethod=indent   " Fold based on indent
set foldnestmax=3       " Deepest fold is 3 levels
set nofoldenable        " Don't fold by default

" Completion
" ==========
let g:deoplete#enable_at_startup = 1
set wildmode=longest,list,full
set wildmenu                    " Enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~     " Stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=node_modules/*,bower_components/*
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" Scrolling
" =========
" Start scrolling when we're getting close to margins
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Disable Arrow Keys
" ==================
imap <down>  <nop>
imap <left>  <nop>
imap <right> <nop>
imap <up>    <nop>
map  <down>  <nop>
map  <left>  <nop>
map  <right> <nop>
map  <up>    <nop>

" Fix fmux escape characters
" =========================
set timeout
set timeoutlen=750
set ttimeoutlen=250
if has ('nvim')
  set ttimeout
  set ttimeoutlen=0
endif

" Plugin overrides
source ~/.vim/autocmd.vim
source ~/.vim/format.vim
source ~/.vim/common.vim
source ~/.vim/tmux.vim

" Airline
" =======
let g:airline_powerline_fonts = 0
let g:airline_theme='minimalist'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_section_b = ''
let g:airline_section_z = airline#section#create(['%l:%c:%L'])
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#hunks#enabled = 0

" Colorscheme
" ===========
let g:hybrid_use_Xresources = 1
source ~/.vim/colors/moonscape.vim

" Git Gutter
" ==========
set signcolumn=yes
let g:gitgutter_eager = 0

" Ale Plugin
" ==========
let g:ale_lint_on_text_changed = 'never' " Only lint when text is saved.
let g:ale_completion_enabled = 1         " Enable completion where enabled.
let g:ale_set_highlights = 1             " Highlight code in file.
let g:ale_set_quickfix = 1               " Use the quicklist buffer.
let g:ale_set_loclist = 0                " Don't use loclist.
let g:ale_fix_on_save = 1                " Auto fix js.
let g:ale_open_list = 1                  " Auto open quicklist buffer.
nmap <C-]> :ALEGoToDefinitionInTab<CR>

let g:ale_fixers = {
\   'javascript': [],
\   'vue': [],
\}

let g:ale_linters = {
\   'javascript': ['standard'],
\   'vue': [],
\   'scss': [],
\}

" Language Server
" ================
" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
      \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
      \ 'javascript': ['javascript-typescript-stdio'],
      \ 'css': ['css-languageserver --stdio'],
      \ 'scss': ['css-languageserver --stdio'],
      \ }

nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
noremap <silent> R :call LanguageClient_textDocument_rename()<CR>

" JavaScript
set completeopt=longest,menuone

" Vue
let g:vue_disable_pre_processors=1

" Carbon
vnoremap <Leader>c :CarbonNowSh<CR>
