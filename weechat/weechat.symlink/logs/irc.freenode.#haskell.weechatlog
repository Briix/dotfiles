2015-03-09 14:01:13	-->	yoshuawuyts (~yoshuawuy@2001:981:a181:1:a92c:380e:754a:2790) has joined #haskell
2015-03-09 14:01:13	--	Topic for #haskell is "http://www.haskell.org/ | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2015-03-09 14:01:13	--	Topic set by geekosaur on Sun, 21 Dec 2014 22:35:50
2015-03-09 14:01:13	--	Channel #haskell: 1488 nicks (1 op, 0 voices, 1487 normals)
2015-03-09 14:01:13	--	URL for #haskell: http://www.haskell.org/
2015-03-09 14:01:15	--	Channel created on Sun, 26 Nov 2006 07:42:48
2015-03-09 14:01:29	<--	qubitnerd (~neutrino@unaffiliated/electron/x-8286743) has quit (Quit: WeeChat 1.1.1)
2015-03-09 14:01:35	-->	muzzle (~Adium@mnch-4d046503.pool.mediaWays.net) has joined #haskell
2015-03-09 14:01:37	-->	martintrojer (~martintro@cpc5-bmly8-2-0-cust9.2-3.cable.virginm.net) has joined #haskell
2015-03-09 14:01:46	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:01:46	EvanR_	is there a place that uses that as an explanation of IO?
2015-03-09 14:01:49	mniip	newtype IO a = IO (State# RealWorld -> (# State# RealWorld, a #))
2015-03-09 14:01:57	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 14:02:01	<--	huckleberry78 (~huckleber@104-176-154-16.lightspeed.tukrga.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2015-03-09 14:02:05	-->	Stratege__ (~Stratege@unaffiliated/stratege) has joined #haskell
2015-03-09 14:02:09	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:02:12	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 14:02:20	-->	Luke (~Luke@unaffiliated/luke) has joined #haskell
2015-03-09 14:02:45	merijn	mniip: Requires MagicHash and unboxedtuples
2015-03-09 14:02:46	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 14:02:47	<--	phaul (~user@cpc11-watf9-2-0-cust171.15-2.cable.virginm.net) has quit (Ping timeout: 245 seconds)
2015-03-09 14:02:48	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:02:50	mniip	yes
2015-03-09 14:02:58	mniip	where State# is a Proxy that takes up no space and only enforces evaluation order
2015-03-09 14:03:00	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 14:03:01	<--	martintrojer (~martintro@cpc5-bmly8-2-0-cust9.2-3.cable.virginm.net) has quit (Max SendQ exceeded)
2015-03-09 14:03:10	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:03:16	-->	mitochon (~JCI@75-144-75-149-Michigan.hfc.comcastbusiness.net) has joined #haskell
2015-03-09 14:03:17	merijn	This is not really an explanation as much as an implementation detail, though
2015-03-09 14:03:20	mniip	merijn, also import GHC.Exts and GHC.Prim
2015-03-09 14:03:23	merijn	Because it doesn't account for multithreading
2015-03-09 14:03:26	<--	marcus-aurelius (~quassel@p2003005A6F2458077D2F1DBB9E779EE1.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2015-03-09 14:03:34	EvanR_	it sounds like something that should never have left ghc headquarters
2015-03-09 14:03:38	-->	martintrojer (~martintro@cpc5-bmly8-2-0-cust9.2-3.cable.virginm.net) has joined #haskell
2015-03-09 14:03:39	-->	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2015-03-09 14:03:39	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has left #haskell
2015-03-09 14:03:44	merijn	EvanR_: It should, it useful for low level code
2015-03-09 14:03:45	EvanR_	because its not illuminating about haskell 
2015-03-09 14:03:59	EvanR_	and misleadingly labeled
2015-03-09 14:04:00	merijn	EvanR_: It's exported because it allows you to write more efficient primitives
2015-03-09 14:04:01	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:04:06	-->	Xenasis (~Xenasis@cpc4-king10-2-0-cust317.perr.cable.virginm.net) has joined #haskell
2015-03-09 14:04:10	<--	gcganley (~user@c-75-67-180-199.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2015-03-09 14:04:17	merijn	EvanR_: In GHC ST and IO are just specialisations of a lower level primitive monad
2015-03-09 14:04:24	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:04:28	<--	Itkovian (~Itkovian@nata214.ugent.be) has quit (Ping timeout: 255 seconds)
2015-03-09 14:04:33	<--	Stratege (~Stratege@unaffiliated/stratege) has quit (Ping timeout: 246 seconds)
2015-03-09 14:04:38	-->	ZioCrocifisso (~ZioCrocif@151.74.17.161) has joined #haskell
2015-03-09 14:04:58	merijn	nshepperd: It's not so much a hack as it is an implementation detail of GHC, there are other ways to do the same
2015-03-09 14:05:00	<--	martintrojer (~martintro@cpc5-bmly8-2-0-cust9.2-3.cable.virginm.net) has quit (Max SendQ exceeded)
2015-03-09 14:05:08	-->	martintrojer (~martintro@cpc5-bmly8-2-0-cust9.2-3.cable.virginm.net) has joined #haskell
2015-03-09 14:05:18	nshepperd	also the fact that you can't actually save the RealWorld and put it back later to undo your evil deeds when it all goes wrong
2015-03-09 14:05:50	merijn	EvanR_: It's exposed for the same reason that "data Int = I# Int#" is exposed, because it's useful
2015-03-09 14:05:56	-->	kini (~kini@unaffiliated/kini) has joined #haskell
2015-03-09 14:06:00	merijn	nshepperd: Did you see the acme realworld package? :D
2015-03-09 14:06:06	<--	jokester (~mono@104.131.158.14) has quit (Quit: recharge)
2015-03-09 14:06:16	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:06:24	-->	zenith_ (~zenith@142.150.23.90) has joined #haskell
2015-03-09 14:06:38	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:06:43	muzzle	hi can anyone help me with a question about the sodium FRP package ?
2015-03-09 14:07:39	<--	martintrojer (~martintro@cpc5-bmly8-2-0-cust9.2-3.cable.virginm.net) has quit (Max SendQ exceeded)
2015-03-09 14:07:47	-->	martintrojer (~martintro@cpc5-bmly8-2-0-cust9.2-3.cable.virginm.net) has joined #haskell
2015-03-09 14:08:13	<--	Longlius (~longlius@c-69-247-183-18.hsd1.tn.comcast.net) has quit (Ping timeout: 245 seconds)
2015-03-09 14:08:16	<--	fizruk (~anonymous@broadband-5-228-254-30.nationalcablenetworks.ru) has quit (Quit: fizruk)
2015-03-09 14:08:34	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:08:37	nshepperd	hypothetically is my favourite combinator
2015-03-09 14:08:37	<--	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 245 seconds)
2015-03-09 14:08:56	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:09:04	fractalsea	If I want to define a new typclass instance for a library type, where should I put this?
2015-03-09 14:09:07	<--	pouledodue (~textual@modemcable082.140-131-66.mc.videotron.ca) has quit (Quit: My Mac has gone to sleep. ZZZzzz?)
2015-03-09 14:09:12	fractalsea	At the moment it?s warning me that it?s an orphaned instance
2015-03-09 14:09:28	<--	balor (~aidan@194.81.199.106) has quit (Ping timeout: 245 seconds)
2015-03-09 14:09:38	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:09:41	muzzle	I want to build something like (a -> b -> c) -> Behaviour a -> Behaviour b -> Behaviour c, how can i best do this ?
2015-03-09 14:09:52	pacak	fractalsea: Either next to class declaration or next to datatype declaration.
2015-03-09 14:09:57	-->	fizruk (~anonymous@broadband-5-228-254-30.nationalcablenetworks.ru) has joined #haskell
2015-03-09 14:10:00	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:10:04	merijn	fractalsea: An instance is an orphan when it's not in either 1) the same module as the datatype or 2) the same module as the class
2015-03-09 14:10:07	-->	Itkovian (~Itkovian@nata214.ugent.be) has joined #haskell
2015-03-09 14:10:32	-->	gcganley (~user@c-75-67-180-199.hsd1.ma.comcast.net) has joined #haskell
2015-03-09 14:10:36	fractalsea	Is there anything I can do then if both the class, and the type are in library modules?
2015-03-09 14:10:38	merijn	fractalsea: Orphan instances work, but the problem is that orphans may result in multiple instances for a class+type in a single program, which is not allowed
2015-03-09 14:10:41	-->	bam365 (~blake@23-29-39-194.static.kc.surewest.net) has joined #haskell
2015-03-09 14:10:42	fractalsea	Other than modifying the libraries
2015-03-09 14:10:45	<--	zenith_ (~zenith@142.150.23.90) has quit (Ping timeout: 256 seconds)
2015-03-09 14:10:50	fractalsea	OK
2015-03-09 14:11:11	merijn	fractalsea: Hence the warning. They should be avoided *if possible*
2015-03-09 14:11:24	ab9rf	muzzle: isn't that liftM2?
2015-03-09 14:11:26	fractalsea	merjin: I guess I?ll just leave it then. Thanks
2015-03-09 14:11:28	merijn	And you should be aware that if some other library you use defines the same instance your code might break
2015-03-09 14:11:28	ab9rf	:t liftM2
2015-03-09 14:11:29	lambdabot	Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
2015-03-09 14:11:38	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:11:50	-->	Longlius (~longlius@c-69-247-183-18.hsd1.tn.comcast.net) has joined #haskell
2015-03-09 14:11:53	fractalsea	merjin: Got ya. Pretty sure it doesn?t though
2015-03-09 14:12:01	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:12:10	gcganley	:t liftM2 id
2015-03-09 14:12:11	lambdabot	Monad m => m (a2 -> r) -> m a2 -> m r
2015-03-09 14:12:13	<--	daniel-s (~daniel-s@mu00053769.eng.monash.edu.au) has quit (Remote host closed the connection)
2015-03-09 14:12:20	EvanR_	when is it not possible to avoid orphan instances
2015-03-09 14:12:32	merijn	fractalsea: Depends on the type/instance, you're *usually* fine, avoiding orphans just guarantees you're fine
2015-03-09 14:12:35	-->	ianjneu (~ianj@syrah.ccs.neu.edu) has joined #haskell
2015-03-09 14:12:38	-->	daniel-s (~daniel-s@mu00053769.eng.monash.edu.au) has joined #haskell
2015-03-09 14:12:38	-->	nilg` (~user@AAubervilliers-653-1-110-190.w86-212.abo.wanadoo.fr) has joined #haskell
2015-03-09 14:12:44	merijn	EvanR_: If neither the type NOR the class are in your own package
2015-03-09 14:12:45	<--	cleamoon_ (~cleamoon@c213-89-98-137.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2015-03-09 14:12:58	fractalsea	merjin: Makes sense
2015-03-09 14:13:00	merijn	i.e. a class defined in package foo and datatype defined in bar where bar does not depend on foo
2015-03-09 14:13:02	-->	Sebastien-L (~sebastien@AMontsouris-651-1-28-170.w82-123.abo.wanadoo.fr) has joined #haskell
2015-03-09 14:13:07	-->	Javran (~javran@csnat-3.cs.umd.edu) has joined #haskell
2015-03-09 14:13:08	merijn	(nor foo on bar)
2015-03-09 14:13:15	EvanR_	oh that sucks
2015-03-09 14:13:21	merijn	Otherwise you'd have to add a package dependency just to define the instances
2015-03-09 14:13:36	<--	raymondtay (~raymondta@218.212.231.64) has quit (Quit: raymondtay)
2015-03-09 14:13:45	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:13:53	merijn	For classes in base that doesn't matter, but for example something like contravariant can be an issue
2015-03-09 14:13:56	mniip	getContents is interleaved?
2015-03-09 14:14:01	<--	thunderrd (~thunderrd@110.78.148.113) has quit (Quit: If it wasn't written down, it didn't happen...)
2015-03-09 14:14:05	-->	malkomalko (~malkomalk@207.251.103.46) has joined #haskell
2015-03-09 14:14:07	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:14:20	merijn	What if a library has a datatype that can be contravariant, do you add that dependency or not?
2015-03-09 14:14:30	<--	iamjarvo (~textual@c-69-249-187-177.hsd1.nj.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz?)
2015-03-09 14:14:34	merijn	It's an open problem, Rust is having similar issues
2015-03-09 14:14:42	<--	ryu91835 (~ryu91835@141.95.240.49.ap.yournet.ne.jp) has quit (Read error: Connection reset by peer)
2015-03-09 14:14:59	-->	ryu91835 (~ryu91835@141.95.240.49.ap.yournet.ne.jp) has joined #haskell
2015-03-09 14:15:10	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:15:15	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 245 seconds)
2015-03-09 14:15:15	-->	evanjs (~evanjs@69.32.167.5) has joined #haskell
2015-03-09 14:15:17	-->	thunderrd (~thunderrd@110.78.148.113) has joined #haskell
2015-03-09 14:15:29	ab9rf	i think all language ecosystems end up struggling with this issue at some point
2015-03-09 14:15:33	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:15:38	mniip	merijn, I guess a simple take would be only to add dependencies to "common" packages
2015-03-09 14:15:54	merijn	I hope ezyang comes up with a neat way to solve this in his backpack work
2015-03-09 14:15:59	-->	dfeuer_ (~dfeuer@pool-96-255-150-235.washdc.fios.verizon.net) has joined #haskell
2015-03-09 14:15:59	<--	dfeuer_ (~dfeuer@pool-96-255-150-235.washdc.fios.verizon.net) has quit (Changing host)
2015-03-09 14:15:59	-->	dfeuer_ (~dfeuer@wikimedia/Dfeuer) has joined #haskell
2015-03-09 14:16:05	merijn	mniip: OCaml style functors might work
2015-03-09 14:16:09	-->	darkbolt (~darkbolt@23.252.55.57) has joined #haskell
2015-03-09 14:16:17	<--	ecthiender (ecthiender@unaffiliated/ecthiender) has quit (Quit: gotta go)
2015-03-09 14:16:20	merijn	If someone comes up with a sensible way to combine OCaml functors + typeclasses
2015-03-09 14:16:21	mniip	merijn, "if-installed" sort of macros?
2015-03-09 14:16:29	<--	Longlius (~longlius@c-69-247-183-18.hsd1.tn.comcast.net) has quit (Ping timeout: 250 seconds)
2015-03-09 14:16:31	-->	iamjarvo (~textual@c-69-249-187-177.hsd1.nj.comcast.net) has joined #haskell
2015-03-09 14:16:32	-->	slomo_ (~slomo@unaffiliated/slomo) has joined #haskell
2015-03-09 14:16:40	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:16:42	<--	zygentoma (~kvirc@kel30.kel.studentenwerk-goettingen.de) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2015-03-09 14:16:49	merijn	mniip: That's already possible, but breaks in the presence of transitive dependencies
2015-03-09 14:17:02	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:17:19	<--	Sebastien-L (~sebastien@AMontsouris-651-1-28-170.w82-123.abo.wanadoo.fr) has quit (Ping timeout: 245 seconds)
2015-03-09 14:17:31	-->	Argue_ (~Argue___@112.209.29.248) has joined #haskell
2015-03-09 14:17:33	merijn	mniip: foo implements a class for a type from "bar" IFF bar is installed. Now quux uses foo's instance for bar which wasn't yet installed when I compiled foo, now what?
2015-03-09 14:18:02	-->	cleamoon_ (~cleamoon@c213-89-98-137.bredband.comhem.se) has joined #haskell
2015-03-09 14:18:03	muzzle	ab9rf: Behaviour is not a monad
2015-03-09 14:18:17	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 14:18:22	<--	putis (594ab167@gateway/web/freenode/ip.89.74.177.103) has quit (Ping timeout: 246 seconds)
2015-03-09 14:18:41	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:18:45	-->	Sebastien-L (~sebastien@AMontsouris-651-1-28-170.w82-123.abo.wanadoo.fr) has joined #haskell
2015-03-09 14:19:03	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:19:47	merijn	muzzle: It should be an Applicative, no?
2015-03-09 14:19:48	-->	whiteline (~user@unaffiliated/whiteline) has joined #haskell
2015-03-09 14:19:51	merijn	:t liftA2
2015-03-09 14:19:52	lambdabot	Applicative f => (a -> b -> c) -> f a -> f b -> f c
2015-03-09 14:20:14	<--	slomo (~slomo@unaffiliated/slomo) has quit (Ping timeout: 256 seconds)
2015-03-09 14:20:23	merijn	Also known as "f <$> a <*> b"
2015-03-09 14:20:35	merijn	:t \f a b -> f <$> a <*> b
2015-03-09 14:20:36	<--	darkbolt (~darkbolt@23.252.55.57) has quit (Ping timeout: 246 seconds)
2015-03-09 14:20:36	lambdabot	Applicative f => (a1 -> a -> b) -> f a1 -> f a -> f b
2015-03-09 14:20:45	-->	it0a (~it0a@rrcs-24-56-88-130.ma.biz.rr.com) has joined #haskell
2015-03-09 14:20:53	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:20:56	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2015-03-09 14:20:57	<--	Argue__ (~Argue___@112.209.29.248) has quit (Ping timeout: 256 seconds)
2015-03-09 14:21:15	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:21:36	EvanR_	how do you turn the monomorphism restriction on?
2015-03-09 14:22:09	-->	rgrinberg1 (~rgrinberg@66.49.218.159) has joined #haskell
2015-03-09 14:22:19	-->	fabe (~fabe@178.17.121.51) has joined #haskell
2015-03-09 14:22:27	-->	Takle (~takle@62.254.166.26) has joined #haskell
2015-03-09 14:22:31	 *	hackagebot Plot-ho-matic 0.5.0.1 - Real-time line plotter for protobuf-like data  http://hackage.haskell.org/package/Plot-ho-matic-0.5.0.1 (GregHorn)
2015-03-09 14:22:33	nshepperd	-XMonomorphismRestriction seems to exist
2015-03-09 14:22:34	muzzle	:merijin yeah, it is 
2015-03-09 14:22:35	muzzle	thx
2015-03-09 14:22:40	-->	hamishmack (~hamishmac@194.216.131.132) has joined #haskell
2015-03-09 14:22:43	-->	terlar (~terje@h-37-123-145-122.na.cust.bahnhof.se) has joined #haskell
2015-03-09 14:22:56	merijn	EvanR_: It's on by default (except in ghci in recent versions)
2015-03-09 14:22:58	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:23:08	EvanR_	i thought it was recently turn off
2015-03-09 14:23:14	merijn	EvanR_: Only for ghci
2015-03-09 14:23:17	EvanR_	ok
2015-03-09 14:23:20	nshepperd	also, ':set -X<tab>' in ghci is suprisingly useful
2015-03-09 14:23:20	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:23:23	merijn	EvanR_: Because you almost never want that in ghci
2015-03-09 14:23:38	-->	hibou107 (500eba09@gateway/web/freenode/ip.80.14.186.9) has joined #haskell
2015-03-09 14:23:42	hibou107	hi
2015-03-09 14:23:56	hibou107	I don't know how to use the library https://hackage.haskell.org/package/linear-1.17.1/docs/Linear-Matrix.html
2015-03-09 14:24:07	hibou107	i did cabal install linear
2015-03-09 14:24:31	hibou107	from ghci i did: "import Linear.Matrix"
2015-03-09 14:24:44	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:24:45	hibou107	but when I type : "V2 (V3 1 2 3) (V3 4 5 6) !*! V3 (V2 1 2) (V2 3 4) (V2 4 5)"
2015-03-09 14:25:01	-->	debnathshoham (uid67108@gateway/web/irccloud.com/x-qfbnqlijefoamezt) has joined #haskell
2015-03-09 14:25:06	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:25:08	hibou107	I'vve got the error  Not in scope: data constructor `V2'
2015-03-09 14:25:31	mniip	import Linear.V2
2015-03-09 14:25:35	mniip	and V3
2015-03-09 14:25:48	frerich	Or just 'import Linear'
2015-03-09 14:25:49	-->	dramforever (~user@111.196.71.208) has joined #haskell
2015-03-09 14:26:00	<--	fabe (~fabe@178.17.121.51) has quit (Client Quit)
2015-03-09 14:26:07	dramforever	Hi all.
2015-03-09 14:26:14	-->	mmachenry (~Adium@208.78.140.194) has joined #haskell
2015-03-09 14:26:24	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:26:25	hibou107	Thanks
2015-03-09 14:26:31	hibou107	thanks mniip 
2015-03-09 14:26:33	hibou107	and frerich 
2015-03-09 14:26:33	<--	rgrinberg1 (~rgrinberg@66.49.218.159) has quit (Ping timeout: 246 seconds)
2015-03-09 14:26:37	<--	Luke (~Luke@unaffiliated/luke) has quit (Quit: part)
2015-03-09 14:26:39	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:26:39	-->	L8D (~L8D@99-156-81-153.lightspeed.austtx.sbcglobal.net) has joined #haskell
2015-03-09 14:27:10	<--	Bhavya (~Bhavya.Ma@122.248.161.142) has quit (Quit: Quit the channel)
2015-03-09 14:27:13	<--	tzu_chi (~holymac@adsl-98-64-55-122.mia.bellsouth.net) has quit (Read error: Connection timed out)
2015-03-09 14:27:16	-->	Luke (~Luke@unaffiliated/luke) has joined #haskell
2015-03-09 14:27:23	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:27:37	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:27:53	-->	doodlehaus (~doodlehau@h69-128-47-52.mdsnwi.dedicated.static.tds.net) has joined #haskell
2015-03-09 14:28:08	-->	crobbins (~crobbins@67.133.246.18) has joined #haskell
2015-03-09 14:28:09	-->	tzu_chi (~holymac@adsl-98-64-55-122.mia.bellsouth.net) has joined #haskell
2015-03-09 14:28:38	<--	Detlev_ (~Detlev@nata214.ugent.be) has quit (Ping timeout: 250 seconds)
2015-03-09 14:28:44	dramforever	hello?
2015-03-09 14:29:04	<--	tzu_chi (~holymac@adsl-98-64-55-122.mia.bellsouth.net) has quit (Max SendQ exceeded)
2015-03-09 14:29:05	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:29:07	Xenasis	Is there any combination of library functions I could use to get the combinations of two lists (arguments) as pairs/two elment lists?
2015-03-09 14:29:07	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 14:29:10	Xenasis	As an example
2015-03-09 14:29:18	Xenasis	f [1, 2] [3, 4] = [(1, 3), (2, 4), (1, 4), (2, 3)]
2015-03-09 14:29:20	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2015-03-09 14:29:20	dramforever	:t zip
2015-03-09 14:29:21	lambdabot	[a] -> [b] -> [(a, b)]
2015-03-09 14:29:22	<--	Takle (~takle@62.254.166.26) has quit (Remote host closed the connection)
2015-03-09 14:29:23	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 14:29:27	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:29:27	Xenasis	Yeah, that's not what I mean
2015-03-09 14:29:32	<--	louisjb (~user@louisb.gotadsl.co.uk) has quit (Ping timeout: 264 seconds)
2015-03-09 14:29:40	dramforever	> liftM (,) [1,2] [3,4]
2015-03-09 14:29:41	Xenasis	Zip doesn't give combinations
2015-03-09 14:29:41	lambdabot	 Couldn't match expected type ?[t0] -> t?
2015-03-09 14:29:41	lambdabot	             with actual type ?[b0 -> (a10, b0)]?
2015-03-09 14:29:46	dramforever	how about this?
2015-03-09 14:29:48	dramforever	ouch
2015-03-09 14:29:54	Xenasis	doesn't look like it compiles
2015-03-09 14:30:02	dramforever	> liftM2 (,) [1,2] [3,4]
2015-03-09 14:30:02	mniip	> liftA2 (,) [1,2] [3,4]
2015-03-09 14:30:04	lambdabot	 can't find file: L.hs
2015-03-09 14:30:05	lambdabot	 [(1,3),(1,4),(2,3),(2,4)]
2015-03-09 14:30:10	<--	evanjs (~evanjs@69.32.167.5) has quit (Quit: Leaving...)
2015-03-09 14:30:13	-->	fujimura (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has joined #haskell
2015-03-09 14:30:18	-->	yminsky (~yminsky@jane-street-capital-llc.gigabitethernet7-7.asr1.jfk1.gblx.net) has joined #haskell
2015-03-09 14:30:26	dramforever	heh? who's one is that
2015-03-09 14:30:26	-->	banister (~textual@5ED2898E.cm-7-3c.dynamic.ziggo.nl) has joined #haskell
2015-03-09 14:30:27	mniip	alternatively
2015-03-09 14:30:31	<--	cleamoon_ (~cleamoon@c213-89-98-137.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2015-03-09 14:30:33	Xenasis	Sweet
2015-03-09 14:30:33	-->	pacak1 (~pacak@175.156.152.109) has joined #haskell
2015-03-09 14:30:36	mniip	> (,) <$> [1,2] <*> [3,4]
2015-03-09 14:30:37	lambdabot	 [(1,3),(1,4),(2,3),(2,4)]
2015-03-09 14:30:43	Xenasis	that one looks unreadable :P
2015-03-09 14:30:45	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:30:47	Xenasis	thanks anyway!
2015-03-09 14:30:51	Xenasis	I'll use the first one
2015-03-09 14:31:07	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:31:16	-->	Takle_ (~takle@62.254.166.26) has joined #haskell
2015-03-09 14:31:33	<--	telser (~user@72.16.218.22) has quit (Ping timeout: 245 seconds)
2015-03-09 14:31:37	<--	L8D (~L8D@99-156-81-153.lightspeed.austtx.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2015-03-09 14:31:43	clrnd	> (<*>) ((<$>) (,) [1,2]) [3,4]
2015-03-09 14:31:43	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:31:44	lambdabot	 [(1,3),(1,4),(2,3),(2,4)]
2015-03-09 14:31:50	dramforever	Is there any good tutorial on free monads? it seems that it's kinda like Operational
2015-03-09 14:31:52	merijn	How about zipWith?
2015-03-09 14:31:58	merijn	oh, wait nvm
2015-03-09 14:31:58	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:32:00	dramforever	@hackage operational
2015-03-09 14:32:00	lambdabot	http://hackage.haskell.org/package/operational
2015-03-09 14:32:19	clrnd	I read one by kmett pretty nice
2015-03-09 14:32:19	merijn	dramforever: http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html ?
2015-03-09 14:32:20	<--	pacak (~pacak@175.156.152.109) has quit (Ping timeout: 272 seconds)
2015-03-09 14:32:38	<--	hamishmack (~hamishmac@194.216.131.132) has quit (Quit: hamishmack)
2015-03-09 14:32:43	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:32:44	dramforever	merijn: thanks for that I'll check it out
2015-03-09 14:32:57	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:33:29	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:33:34	clrnd	dramforever, http://comonad.com/reader/2011/free-monads-for-less/
2015-03-09 14:33:44	dramforever	also has anyone compared operational with free monads?
2015-03-09 14:33:44	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:33:46	-->	Swizec (~swizec@BSN-77-159-184.static.siol.net) has joined #haskell
2015-03-09 14:33:54	dramforever	clrnd: yeah thanks
2015-03-09 14:34:05	-->	aaron8910 (~aaron8910@172-7-147-62.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2015-03-09 14:34:42	dramforever	hmm...actually I was looking for the "monad evaluator" usage of free monads
2015-03-09 14:34:51	mniip	Xenasis, the mnemonic is simple
2015-03-09 14:34:54	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:35:01	mniip	<$> and <*> are like application
2015-03-09 14:35:09	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:35:12	Xenasis	Is <$> a different way of writing $?
2015-03-09 14:35:14	<--	fujimura (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has quit (Ping timeout: 264 seconds)
2015-03-09 14:35:16	mniip	you have 'function <$> list' and 'list of functions <*> list'
2015-03-09 14:35:20	dramforever	:t (<$>)
2015-03-09 14:35:21	lambdabot	Functor f => (a -> b) -> f a -> f b
2015-03-09 14:35:26	Xenasis	what's a Functor?
2015-03-09 14:35:28	tdammers	Xenasis: it's not the same, but somewhat similar
2015-03-09 14:35:32	mniip	Xenasis, uhh
2015-03-09 14:35:33	<--	ProofTechnique (~ptech@c-24-147-92-185.hsd1.vt.comcast.net) has quit (Ping timeout: 252 seconds)
2015-03-09 14:35:38	dramforever	uhh...
2015-03-09 14:35:40	tdammers	<$> is a synonym for fmap
2015-03-09 14:35:47	Xenasis	ah
2015-03-09 14:36:04	dramforever	mniip: ouch maybe it's too early to tell Xenasis that stuff
2015-03-09 14:36:37	mniip	Xenasis, I guess it's the time you need to read about functors and applicatives
2015-03-09 14:36:40	-->	paradoja (~paradoja@85.Red-213-4-35.staticIP.rima-tde.net) has joined #haskell
2015-03-09 14:36:49	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:36:57	-->	osa1 (~omer@2601:f:400:a8b1:2ab2:bdff:fedf:fa66) has joined #haskell
2015-03-09 14:37:04	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:37:10	-->	yamadapc (~yamadapc@189.38.172.216) has joined #haskell
2015-03-09 14:37:11	dramforever	Xenasis: how much haskell do you have? (I just found a new way to ask!)
2015-03-09 14:37:15	EvanR_	i got by a long time without knowing about Functor, haskell is great that the learning curve is slow shallow ;)
2015-03-09 14:37:18	Xenasis	I do remember reading about fmap if that helps
2015-03-09 14:37:24	-->	lifter (~lifter@2602:306:3499:69f0:99fe:d4a3:ad03:bff3) has joined #haskell
2015-03-09 14:37:42	dramforever	EvanR_: the learning curve is polymorphic
2015-03-09 14:37:48	dramforever	ouch spelling...
2015-03-09 14:37:59	Xenasis	I'm not sure exactly how much, but I can sometimes use the List monad and I've written a Sat solver in Haskell
2015-03-09 14:38:06	<--	pavonia (~user@p54B9E2D8.dip0.t-ipconnect.de) has quit (Quit: Bye!)
2015-03-09 14:38:11	EvanR_	bit by bit you can accumulate tools
2015-03-09 14:38:14	Xenasis	I'm not sure what exactly what metric to use
2015-03-09 14:38:19	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:38:39	dramforever	EvanR_: there's almost nothing you can't do yourself
2015-03-09 14:38:41	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:38:42	tdammers	there's not really a uniform one-dimensional learning curve
2015-03-09 14:38:46	-->	mystor (~mystor@d67-193-97-66.home3.cgocable.net) has joined #haskell
2015-03-09 14:38:48	<--	aaron8910 (~aaron8910@172-7-147-62.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 246 seconds)
2015-03-09 14:38:49	tdammers	just a bunch of concepts and idioms you can learn
2015-03-09 14:38:55	lpsmith	hmm,  out of curiousity,  is there a concurrent bracket combinator,  something along the lines of    bracket (concurrently (connect source) (connect dest)) (\s d -> concurrently (close s) (close d)) (do something)
2015-03-09 14:38:55	-->	meoblast001 (~meoblast@dynamic-acs-24-112-206-77.zoominternet.net) has joined #haskell
2015-03-09 14:38:57	tdammers	and some of them depend on one another, others don't
2015-03-09 14:38:59	dramforever	I mean, you could have re-invented a large part of the standard library
2015-03-09 14:39:04	<--	DanielDiaz (~Thunderbi@219.Red-81-44-5.dynamicIP.rima-tde.net) has left #haskell
2015-03-09 14:39:08	-->	ThatOtherPerson_ (~ThatOther@unaffiliated/thatotherpersony) has joined #haskell
2015-03-09 14:39:14	-->	hesiod (~hesiod@ipbcc2d179.dynamic.kabel-deutschland.de) has joined #haskell
2015-03-09 14:39:30	EvanR_	dramforever: sometimes you wouldnt think to invent it though
2015-03-09 14:39:38	alanz	bgamari: I see in the logs you had an issue installing gio-0.13.0.5. How did you get around it?
2015-03-09 14:39:46	-->	erkin (~erkin@unaffiliated/erkin) has joined #haskell
2015-03-09 14:39:50	<--	folone (~folone@80.82.202.196) has quit (Read error: No route to host)
2015-03-09 14:39:51	<--	ThatOtherPerson (~ThatOther@unaffiliated/thatotherpersony) has quit (Ping timeout: 246 seconds)
2015-03-09 14:39:56	<--	manuel__ (~manuel@c-24-61-40-209.hsd1.ma.comcast.net) has quit (Quit: manuel__)
2015-03-09 14:39:57	<--	sivteck (~sivteck@unaffiliated/sivteck) has quit (Ping timeout: 252 seconds)
2015-03-09 14:40:04	-->	amar (~amar@49.248.206.134) has joined #haskell
2015-03-09 14:40:05	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:40:15	lpsmith	One issue with the construct I gave,  is if one connection succeeds,  and then the other fails,  you'll have to rely on GC to close the successful connection.  
2015-03-09 14:40:24	<--	gcganley (~user@c-75-67-180-199.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2015-03-09 14:40:25	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 14:40:27	-->	AleXoundOS (~AleXoundO@ip-95-221-217-71.bb.netbynet.ru) has joined #haskell
2015-03-09 14:40:27	--	amar is now known as Guest37504
2015-03-09 14:40:28	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:40:38	bgamari	alanz, I ended up getting sucked down the rabbit hole looking for the root cause and ultimately gave up
2015-03-09 14:41:00	mniip	[16:36:06] <dramforever> mniip: ouch maybe it's too early to tell Xenasis that stuff
2015-03-09 14:41:01	alanz	ok. This was with 7.10 RC2 ?
2015-03-09 14:41:09	mniip	when a function and a container love each other very much...
2015-03-09 14:41:11	<--	paradoja (~paradoja@85.Red-213-4-35.staticIP.rima-tde.net) has quit (Remote host closed the connection)
2015-03-09 14:41:24	Guest37504	>https://gist.github.com/anonymous/5ad12cd925494285d7b9
2015-03-09 14:41:26	bgamari	alanz, I have heard reports that adding --force somewhere in the cabal command line helps
2015-03-09 14:41:27	exio4	I'd say context
2015-03-09 14:41:32	bgamari	alanz, yep
2015-03-09 14:41:35	Guest37504	what does ! mean in this
2015-03-09 14:41:46	<--	lifter (~lifter@2602:306:3499:69f0:99fe:d4a3:ad03:bff3) has quit (Ping timeout: 256 seconds)
2015-03-09 14:41:50	mniip	Guest37504, strict fields
2015-03-09 14:41:51	alanz	bgamari: ok, thanks. Time to investigate the travis script
2015-03-09 14:42:03	lpsmith	which,  if the second unsuccessful connection fails slowly,  i.e. several minutes or maybe even several hours,  then the first connection is likely been promoted several GC generations,  and will thus take a long time to collect.
2015-03-09 14:42:27	mmachenry	Guest37504: It means that creation of those fields are strict rather than lazy
2015-03-09 14:42:30	<--	crobbins (~crobbins@67.133.246.18) has quit (Remote host closed the connection)
2015-03-09 14:42:33	 *	hackagebot vcache-trie 0.1.1 - patricia tries modeled above VCache  http://hackage.haskell.org/package/vcache-trie-0.1.1 (dmbarbour)
2015-03-09 14:42:35	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:42:46	Guest37504	mniip: Ah, thanku
2015-03-09 14:42:53	<--	Sgeo (~quassel@ool-44c2aebc.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2015-03-09 14:42:54	<--	mystor (~mystor@d67-193-97-66.home3.cgocable.net) has quit (Ping timeout: 244 seconds)
2015-03-09 14:42:57	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:43:24	<--	nilg` (~user@AAubervilliers-653-1-110-190.w86-212.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2015-03-09 14:43:26	alanz	bgamari: it fails with the same problem. Step gently away ...
2015-03-09 14:43:40	bgamari	alanz, heh, I'm trying to find the reference in my logs
2015-03-09 14:44:09	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:44:18	bgamari	It would be nice if gtk2hs's build system were a little more conventional
2015-03-09 14:44:31	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:44:45	<--	osa1 (~omer@2601:f:400:a8b1:2ab2:bdff:fedf:fa66) has quit (Ping timeout: 265 seconds)
2015-03-09 14:44:58	-->	raymondtay (~raymondta@218.212.231.64) has joined #haskell
2015-03-09 14:45:16	alanz	bgamari: http://ircbrowse.net/browse/haskell?q=gio
2015-03-09 14:45:30	bgamari	I'd really like to split cairo out of gtk2hs entirely
2015-03-09 14:45:38	alanz	and yes, it would be. But a complex environment I guess
2015-03-09 14:45:52	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:45:55	bgamari	as it's not even really a gtk package and should be easy to bind
2015-03-09 14:45:59	-->	satori_ (~satori@123.16.114.5) has joined #haskell
2015-03-09 14:46:15	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:46:38	<--	lefant (uid17744@gateway/web/irccloud.com/x-khkqlcpkyzgifjtw) has quit (Quit: Connection closed for inactivity)
2015-03-09 14:46:41	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 14:46:46	-->	Longlius (~longlius@c-69-247-183-18.hsd1.tn.comcast.net) has joined #haskell
2015-03-09 14:46:52	-->	Guest_ (3aa67e0f@gateway/web/freenode/ip.58.166.126.15) has joined #haskell
2015-03-09 14:46:56	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 14:47:08	<--	ludamad (~adomurad@199-7-157-56.eng.wind.ca) has quit (Ping timeout: 252 seconds)
2015-03-09 14:47:19	-->	j201 (~j201@unaffiliated/j201) has joined #haskell
2015-03-09 14:47:21	--	Guest_ is now known as __Guest
2015-03-09 14:47:28	-->	cleamoon_ (~cleamoon@c213-89-98-137.bredband.comhem.se) has joined #haskell
2015-03-09 14:47:59	-->	mjboa (~mike@p4FF43036.dip0.t-ipconnect.de) has joined #haskell
2015-03-09 14:48:27	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:48:48	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:48:53	-->	apricity_ (~apricity@154.122.41.7) has joined #haskell
2015-03-09 14:50:00	-->	matematikaadit (~matematik@unaffiliated/matematikaadit) has joined #haskell
2015-03-09 14:50:08	<--	matematikaadit (~matematik@unaffiliated/matematikaadit) has left #haskell
2015-03-09 14:50:16	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:50:34	<--	sinkensabe (~sinkensab@213.115.244.180) has quit (Remote host closed the connection)
2015-03-09 14:50:39	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:50:46	-->	lifter (~lifter@2602:306:3499:69f0:ada7:f1f7:e25e:c3d2) has joined #haskell
2015-03-09 14:51:11	<--	iamjarvo (~textual@c-69-249-187-177.hsd1.nj.comcast.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2015-03-09 14:51:18	<--	thetallguy (~beshers@c-73-51-188-220.hsd1.il.comcast.net) has quit (Ping timeout: 252 seconds)
2015-03-09 14:51:20	-->	nodnormal (~johan@46.156.122.53.tmi.telenormobil.no) has joined #haskell
2015-03-09 14:51:22	-->	doomlord_1 (~textual@host86-148-72-94.range86-148.btcentralplus.com) has joined #haskell
2015-03-09 14:51:24	--	McManiaC_ is now known as McManiaC
2015-03-09 14:51:27	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:51:34	-->	pyon (~suckmy@unaffiliated/pyon) has joined #haskell
2015-03-09 14:51:39	<--	kp666 (~kp666@58.68.91.114) has quit (Quit: Leaving)
2015-03-09 14:51:49	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:51:55	fractalsea	Is there a way of lifting a function from IO a -> IO b to working with MonadIO instead? 
2015-03-09 14:51:56	<--	muzzle (~Adium@mnch-4d046503.pool.mediaWays.net) has quit (Quit: Leaving.)
2015-03-09 14:52:17	ski	fractalsea : not really, in general
2015-03-09 14:52:27	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:52:38	fractalsea	ski: hmm OK, what about System.Timeout?
2015-03-09 14:52:39	dramforever	the word "contravariant" comes out
2015-03-09 14:52:47	-->	jvilla (~jvilla@186.101.153.165) has joined #haskell
2015-03-09 14:52:49	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:52:50	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-09 14:53:01	-->	kala (73727d42@gateway/web/freenode/ip.115.114.125.66) has joined #haskell
2015-03-09 14:53:04	dramforever	I mean, pops up in my mind
2015-03-09 14:53:08	kala	hello people
2015-03-09 14:53:22	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 14:53:23	-->	peacememories (~peace@e221-114.eduroam.tuwien.ac.at) has joined #haskell
2015-03-09 14:53:25	 *	ski lifts hat to kala
2015-03-09 14:53:40	<--	mkaesz (~mkaesz@tmo-106-116.customers.d1-online.com) has quit (Ping timeout: 256 seconds)
2015-03-09 14:53:46	ski	fractalsea : hm, i'm not sure
2015-03-09 14:53:55	fractalsea	ski: My IO is wrapped in a monad transformer, and I would like to add a timeout while still staying in the transformer
2015-03-09 14:54:09	dramforever	kala: yes, we are "helloed"
2015-03-09 14:54:17	__Guest	given "data A = B | C" and "data AKind :: A -> * where BType :: AKind B" and "CType :: AKind C" and "run :: (forall a. (String -> Maybe (AKind a))) -> (AKind a -> r) -> String -> Maybe r" how can i get a polymorphic "(String -> Maybe (AKind a)" ?
2015-03-09 14:54:21	-->	xnull (~xnil@h133.5.89.75.dynamic.ip.windstream.net) has joined #haskell
2015-03-09 14:54:41	fractalsea	ski: hmm OK, seems like a common requirement, but I can?t seem to find much on it
2015-03-09 14:54:47	-->	muzzle (~Adium@mnch-4d046503.pool.mediaWays.net) has joined #haskell
2015-03-09 14:54:59	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:55:22	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:55:37	-->	zzmiy1 (~zzmiy@86.57.155.45) has joined #haskell
2015-03-09 14:55:40	 *	ski imagines that kala might have a question
2015-03-09 14:55:42	<--	zzmiy (~zzmiy@2a02:6b8:0:3504:cd93:8d11:6ee5:9d12) has quit (Ping timeout: 252 seconds)
2015-03-09 14:56:12	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:56:19	kala	lol
2015-03-09 14:56:35	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:56:44	kala	ski : Can we make a list of all the intermediate calculations of a recursive function
2015-03-09 14:56:45	kala	?
2015-03-09 14:56:48	-->	GGMethos (~methos@2a02:418:6a04:178:209:40:77:1) has joined #haskell
2015-03-09 14:56:55	mniip	hmm, if a `coprime` b then (a `mod` b) `coprime` b, right?
2015-03-09 14:57:05	dramforever	hi, how portable is {-# LANGUAGE MultiParamTypeClasses, FunctionalDependencies #-}
2015-03-09 14:57:13	fractalsea	ski: I guess I could do valueInTransformer >>= (\v -> liftIO $ timeout 1000000 (return v) 
2015-03-09 14:57:16	ski	kala : do you have some example code to paste ?
2015-03-09 14:57:22	-->	cfricke (~cfricke@unaffiliated/cfricke) has joined #haskell
2015-03-09 14:57:24	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:57:33	<--	perrier (~cinch@107.170.175.57) has quit (Remote host closed the connection)
2015-03-09 14:57:34	ski	__Guest : sounds a bit useless
2015-03-09 14:57:42	-->	manuel__ (~manuel@209.6.175.242) has joined #haskell
2015-03-09 14:57:43	dramforever	kala: yes but what's "intermediate calculations"
2015-03-09 14:57:48	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:57:48	indiagreen	fractalsea: http://hackage.haskell.org/package/lifted-base-0.2.3.6/docs/System-Timeout-Lifted.html
2015-03-09 14:57:50	-->	etandel (~etandel@200.201.176.130) has joined #haskell
2015-03-09 14:57:51	--	darkowlzz|afk is now known as darkowlzz
2015-03-09 14:57:57	-->	perrier (~cinch@107.170.175.57) has joined #haskell
2015-03-09 14:58:02	kala	ski :yeah for exponential smoothing : avg (x:xs) = (a*x) + (1-a)*(avg xs)
2015-03-09 14:58:08	__Guest	ski: parsing user input in to GADTs
2015-03-09 14:58:12	fractalsea	indiagreen: Awesome!
2015-03-09 14:58:39	indiagreen	in general, if you're looking for a MonadIO version of a function, it'll be in lifted-base
2015-03-09 14:58:45	ski	fractalsea : do you want to timeout an I/O-computation, or just an evaluation ? if the latter, look into using `evaluate', and possibly `seq' or similar inside `timeout'
2015-03-09 14:58:54	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 14:58:56	<--	fizruk (~anonymous@broadband-5-228-254-30.nationalcablenetworks.ru) has quit (Quit: fizruk)
2015-03-09 14:59:07	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 14:59:16	fractalsea	ski: Timeout an io computation
2015-03-09 14:59:19	ski	kala : and the base case ?
2015-03-09 14:59:20	--	Guest14 is now known as drone|
2015-03-09 14:59:23	<--	merijn (~merijn@wcw-staff-145-18-166-222.wireless.uva.nl) has quit (Ping timeout: 240 seconds)
2015-03-09 14:59:26	-->	FreeFull (~freefull@defocus/sausage-lover) has joined #haskell
2015-03-09 14:59:29	ski	fractalsea : then what you suggested will not work
2015-03-09 14:59:36	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2015-03-09 14:59:38	-->	ProofTechnique (~ptech@65-183-137-193-dhcp.burlingtontelecom.net) has joined #haskell
2015-03-09 14:59:46	Xnuk	I just installed lambdabot on my computer, and when I tried "> 1+1", it says: L.hs:63:8: Could not find module `Lambdabot.Plugin.Eval.Trusted'
2015-03-09 14:59:51	Xnuk	what should I do?
2015-03-09 14:59:58	fractalsea	indiagreen: And I need to do the same for HUnit.Test.TestCase?
2015-03-09 15:00:06	ski	__Guest : yes. but i think `forall a. (String -> Maybe (AKind a))' doesn't mean what you think it means
2015-03-09 15:00:25	-->	mathk (~mathieu@mail1.vantek.eu) has joined #haskell
2015-03-09 15:00:30	fractalsea	ski: Hmm OK, I thought there might be something wrong with it, but I?m never sure when it comes to reasoning about when things are actually evaluated in Haskell
2015-03-09 15:00:57	ski	__Guest : it means that an operation of that type must, given a string, maybe return a value of type `AKind a', for any value `a' (of type `A') the *caller* of this operation wants
2015-03-09 15:01:12	kala	ski : please have a look at the code here ---  http://lpaste.net/124274
2015-03-09 15:01:30	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:01:45	ski	__Guest : so, the code that implements this operation can *not* decide whether to use `B' or `C' for `a' there, depending on which `String' it sees -- since that's not what the type means
2015-03-09 15:01:46	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:01:52	__Guest	ski: my bad, i mean 'forall k. (String -> Maybe (AKind a))'
2015-03-09 15:02:18	ski	__Guest : hm, `k' is unused there, so why quantify over it ? also, where is `a' quantified ?
2015-03-09 15:02:20	-->	crobbins (~crobbins@c-73-201-214-48.hsd1.va.comcast.net) has joined #haskell
2015-03-09 15:02:32	hibou107	what is the best haskell library to inverse a matrix ?
2015-03-09 15:02:43	niluje	I have data Sample = Sample {hello :: String, quiet :: Bool}. How can I write a function that takes a Sample and pattern matching only on "quiet"? func Sample { quiet=True } = <whatever> works, but I can't use "hello" in it
2015-03-09 15:02:55	__Guest	ski: i will upload my test code
2015-03-09 15:03:00	kala	ski : can i save the intermediate values created during every recursion in a list.. Please have a look at the code here : http://lpaste.net/124274
2015-03-09 15:03:01	-->	edon- (~user@gw3.infra.univ-bordeaux.fr) has joined #haskell
2015-03-09 15:03:14	-->	j4cknewt (~j4cknewt@c-68-53-58-107.hsd1.tn.comcast.net) has joined #haskell
2015-03-09 15:03:16	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:03:21	-->	mono (~mono@104.131.158.14) has joined #haskell
2015-03-09 15:03:32	ab9rf	kala: maybe use the writer monad to accomplish that
2015-03-09 15:03:35	<--	peacememories (~peace@e221-114.eduroam.tuwien.ac.at) has quit (Ping timeout: 265 seconds)
2015-03-09 15:03:38	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:03:44	--	mono is now known as Guest32842
2015-03-09 15:03:47	-->	nerium (~linus@dhcp-184036.eduroam.chalmers.se) has joined #haskell
2015-03-09 15:04:05	nerium	How come the Art constructor takes a string in this example? https://gist.github.com/oleander/69b6c7922d3e11e7e2e8
2015-03-09 15:04:05	--	Guest32842 is now known as jokester
2015-03-09 15:04:15	nerium	When I*ve only told "run" to do so
2015-03-09 15:04:28	-->	merijn (~merijn@wcw-staff-145-18-166-222.wireless.uva.nl) has joined #haskell
2015-03-09 15:04:49	__Guest	ski: http://sprunge.us/IPUS i realize the forall was redundant, my bad. i still am troubled with (in this example) converting a Food in to a FoodKind
2015-03-09 15:04:52	-->	sinkensabe (~sinkensab@213.115.244.180) has joined #haskell
2015-03-09 15:04:59	ski	kala : which intermediate values do you want to see ? the partial sums ?
2015-03-09 15:05:00	<--	edon (~user@albalug/edon) has quit (Ping timeout: 256 seconds)
2015-03-09 15:05:21	<--	muzzle (~Adium@mnch-4d046503.pool.mediaWays.net) has quit (Quit: Leaving.)
2015-03-09 15:05:49	lpaste	alanz pasted ?gio.cabal installing 7.10 Rc2? at http://lpaste.net/124276
2015-03-09 15:05:49	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:05:54	-->	gansteed (~gansteed@182.106.212.134) has joined #haskell
2015-03-09 15:05:57	indiagreen	fractalsea: that's impossible without rewriting half of HUnit
2015-03-09 15:06:11	-->	`^_^v (~nycs@gw.hq.meetup.com) has joined #haskell
2015-03-09 15:06:12	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:06:19	alanz	bgamari: Commented out the modules it was complaining about dups, it installed
2015-03-09 15:06:31	fractalsea	indiagreen: OK thanks. That?s good to know so that I don?t waste anymore time
2015-03-09 15:06:44	-->	torpet (~torpet@84-115-42-228.dynamic.surfer.at) has joined #haskell
2015-03-09 15:06:55	-->	muzzle (~Adium@mnch-4d046503.pool.mediaways.net) has joined #haskell
2015-03-09 15:07:20	<--	hyuke (~alan@c-50-134-181-139.hsd1.co.comcast.net) has quit (Ping timeout: 264 seconds)
2015-03-09 15:07:33	<--	perrier (~cinch@107.170.175.57) has quit (Remote host closed the connection)
2015-03-09 15:07:37	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:07:40	-->	thetallguy (~beshers@c-73-51-188-220.hsd1.il.comcast.net) has joined #haskell
2015-03-09 15:07:50	-->	perrier (~cinch@107.170.175.57) has joined #haskell
2015-03-09 15:08:00	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:08:01	<--	daniel-s (~daniel-s@mu00053769.eng.monash.edu.au) has quit (Remote host closed the connection)
2015-03-09 15:08:26	-->	daniel-s (~daniel-s@mu00053769.eng.monash.edu.au) has joined #haskell
2015-03-09 15:08:44	-->	darkbolt (~darkbolt@23.252.55.57) has joined #haskell
2015-03-09 15:08:49	indiagreen	dramforever: are you talking about supported GHC versions, or other compilers too?
2015-03-09 15:08:49	<--	mmachenry (~Adium@208.78.140.194) has quit (Ping timeout: 264 seconds)
2015-03-09 15:09:13	indiagreen	GHC and Hugs support both fundeps and MPTC, but JHC doesn't
2015-03-09 15:09:16	-->	chrisdotcode (~quassel@unaffiliated/chrisdotcode) has joined #haskell
2015-03-09 15:09:18	-->	fizbin (~Adium@pool-96-235-152-174.cmdnnj.east.verizon.net) has joined #haskell
2015-03-09 15:09:30	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:09:30	-->	fujimura (~fujimura@38.105.171.2) has joined #haskell
2015-03-09 15:09:47	indiagreen	on the other hand, JHC has type families, which can often replace those
2015-03-09 15:09:51	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:09:55	<--	cfricke (~cfricke@unaffiliated/cfricke) has quit (Quit: leaving)
2015-03-09 15:10:02	<--	dramforever (~user@111.196.71.208) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2015-03-09 15:10:05	-->	vlatkoB_ (~IRC_clien@unaffiliated/vlatkob) has joined #haskell
2015-03-09 15:10:17	<--	shesek (~shesek@77.127.158.156) has quit (Ping timeout: 244 seconds)
2015-03-09 15:10:45	-->	hamishmack (~hamishmac@194.216.131.132) has joined #haskell
2015-03-09 15:11:04	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:11:27	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:11:35	<--	Xenasis (~Xenasis@cpc4-king10-2-0-cust317.perr.cable.virginm.net) has left #haskell ("WeeChat 1.1.1")
2015-03-09 15:12:12	-->	N2017 (~N2107@c-50-189-37-160.hsd1.ma.comcast.net) has joined #haskell
2015-03-09 15:12:18	<--	RaceCondition (~RaceCondi@82.131.2.26.cable.starman.ee) has quit (Quit: RaceCondition)
2015-03-09 15:12:27	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:12:37	<--	michaelpj (~quassel@62.253.227.100) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2015-03-09 15:12:42	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:12:47	<--	rodlogic (~rodlogic@71.235.61.168) has quit (Remote host closed the connection)
2015-03-09 15:12:50	geekosaur	nerium: you told Art to take a String. the only difference between data Art = Art String; and data Art = Art { run :: String }; is that the latter names the parameter and gives you an accessor function, whereas it must be pattern matched by position in the former
2015-03-09 15:12:53	-->	yqt (~yqt@81.88.230.28) has joined #haskell
2015-03-09 15:13:07	<--	erkin (~erkin@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2015-03-09 15:13:08	geekosaur	what did you think record syntax did?
2015-03-09 15:13:09	<--	lsix (~lsix@i16-lef02-th2-89-83-131-44.ft.lns.abo.bbox.fr) has quit (Ping timeout: 246 seconds)
2015-03-09 15:13:31	-->	michael (~quassel@62.253.227.100) has joined #haskell
2015-03-09 15:13:37	<--	vlatkoB (~IRC_clien@unaffiliated/vlatkob) has quit (Ping timeout: 264 seconds)
2015-03-09 15:13:37	nerium	geekosaur: I trough it was just a struct with a function called "run" which takes a string
2015-03-09 15:13:38	-->	juanpaucar (~juanpauca@186.101.153.165) has joined #haskell
2015-03-09 15:13:49	<--	lifter (~lifter@2602:306:3499:69f0:ada7:f1f7:e25e:c3d2) has quit (Remote host closed the connection)
2015-03-09 15:13:55	--	michael is now known as Guest23520
2015-03-09 15:14:03	<--	Gama11 (~quassel@pD9F9054B.dip0.t-ipconnect.de) has quit (Ping timeout: 252 seconds)
2015-03-09 15:14:20	-->	lsix (~lsix@i16-lef02-th2-89-83-131-44.ft.lns.abo.bbox.fr) has joined #haskell
2015-03-09 15:14:24	geekosaur	"takes a string" and produces what? that is, it can't be what you're thinking of
2015-03-09 15:14:32	-->	nonny_t (~nonny_t@host-89-242-68-93.as13285.net) has joined #haskell
2015-03-09 15:14:32	-->	Gama11 (~quassel@pD9F9054B.dip0.t-ipconnect.de) has joined #haskell
2015-03-09 15:14:38	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:14:54	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:14:57	-->	angrygoats (~tbockman@69.194.135.252) has joined #haskell
2015-03-09 15:14:59	<--	merijn (~merijn@wcw-staff-145-18-166-222.wireless.uva.nl) has quit (Ping timeout: 250 seconds)
2015-03-09 15:15:10	-->	lifter (~lifter@99-73-150-159.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2015-03-09 15:15:16	ski	__Guest : hm .. as you placed the `forall' above, it was not redundant
2015-03-09 15:15:23	geekosaur	(note, it can't be "takes a String and produces an Art"; GADTs give you that but you have to say so explicitly in the constructor type. and in fact what `run` does is the opposite, given an Art give you the String)
2015-03-09 15:15:33	-->	telser (~user@72.16.218.22) has joined #haskell
2015-03-09 15:15:38	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:15:42	-->	mkaesz (~mkaesz@tmo-106-116.customers.d1-online.com) has joined #haskell
2015-03-09 15:16:02	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:16:05	-->	peacememories (~peace@e221-114.eduroam.tuwien.ac.at) has joined #haskell
2015-03-09 15:16:15	ski	__Guest : anyway, i think you rather want existentials here than universals (`forall')
2015-03-09 15:16:36	<--	N2017 (~N2107@c-50-189-37-160.hsd1.ma.comcast.net) has quit (Ping timeout: 246 seconds)
2015-03-09 15:16:41	-->	vpetro (~petrov@modemcable114.5-70-69.static.videotron.ca) has joined #haskell
2015-03-09 15:17:02	-->	sleepomeno (~user@089144223000.atnat0032.highway.bob.at) has joined #haskell
2015-03-09 15:17:11	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2015-03-09 15:17:12	nerium	geekosaur: Aha, thanks!
2015-03-09 15:17:16	__Guest	ski: i've heard of existentials but i haven't found any good material. my specific goal is to 'merge' 'hayToKind' and 'seaweedToKind' in a way, though that may not be possible. could you suggest any good reading? 
2015-03-09 15:17:19	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Ping timeout: 245 seconds)
2015-03-09 15:17:34	-->	Lokathor (~Lokathor@75-167-149-201.bois.qwest.net) has joined #haskell
2015-03-09 15:17:42	-->	ics (uid48031@gateway/web/irccloud.com/x-hamqkvegjygpfoba) has joined #haskell
2015-03-09 15:17:47	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:18:11	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:18:44	ski	fractalsea : evaluation is not execution, when `valueInTransformer >>= (\v -> liftIO $ timeout 1000000 (return v)' is executed, first `valueInTransformer' is executed, and `v' is bound to the monadic value of that (possibly not evaluated (completely) yet, depending). then `liftIO $ timeout 1000000 (return v)' is executed, which executes `timeout 1000000 (return v)' in an underlying I/O-layer, which executes `return v' after setting up a timeout thing, which
2015-03-09 15:18:50	-->	juanpablo_ (~juanpablo@186.101.153.165) has joined #haskell
2015-03-09 15:19:03	ski	(cut off : ".., which executes `timeout 1000000 (return v)' in an underlying I/O-layer, which executes `return v' after setting up a timeout thing, which immediately results in `v'")
2015-03-09 15:19:23	fractalsea	ski: I see, thanks for the explanation
2015-03-09 15:19:26	-->	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2015-03-09 15:19:37	<--	angrygoats (~tbockman@69.194.135.252) has quit (Ping timeout: 264 seconds)
2015-03-09 15:19:48	<--	nonny_t (~nonny_t@host-89-242-68-93.as13285.net) has quit (Remote host closed the connection)
2015-03-09 15:19:59	sleepomeno	how can I update the first element of a list which satisifies a condition using the lens library?
2015-03-09 15:20:02	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:20:18	-->	hellertime (~hellertim@a23-79-238-10.deploy.static.akamaitechnologies.com) has joined #haskell
2015-03-09 15:20:19	ski	fractalsea : one can use `evaluate' to make sure that (the top constructor) of some value is evaluated as an `IO'-action is executed. so the action won't "release" the value until that part of the evaluation has been done
2015-03-09 15:20:24	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:20:47	ski	fractalsea : but in this case you didn't just want to timeout on evaluation of `v', but on the I/O-operations in `valueInTransformer' as well
2015-03-09 15:21:07	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2015-03-09 15:21:10	fractalsea	ski: Yeah that?s right
2015-03-09 15:21:24	__Guest	ski: thanks for the help, ciao
2015-03-09 15:21:29	<--	__Guest (3aa67e0f@gateway/web/freenode/ip.58.166.126.15) has quit (Quit: Page closed)
2015-03-09 15:21:51	ski	(argh, __Guest left before i could answer ..)
2015-03-09 15:22:00	-->	chatsiri_ (~chatsiri_@119-46-191-21.static.asianet.co.th) has joined #haskell
2015-03-09 15:22:15	<--	folone (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-09 15:22:24	mniip	hpc, I found another interesting problem in Quotient
2015-03-09 15:22:30	mniip	0.1 - 0.1 :: Quotient is bottom
2015-03-09 15:22:31	-->	Stalkr_ (~Stalkr@x1-6-74-44-01-e5-78-62.cpe.webspeed.dk) has joined #haskell
2015-03-09 15:22:35	ski	fractalsea : anyway, "Monadic tunnelling: the art of threading one monad through another" by Jules Bean in 2007-07-11 at <https://mail.haskell.org/pipermail/haskell-cafe/2007-July/028501.html> is relevant to your question
2015-03-09 15:22:37	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:22:49	<--	kala (73727d42@gateway/web/freenode/ip.115.114.125.66) has quit (Quit: Page closed)
2015-03-09 15:22:49	-->	x90 (~r0x@78.165.60.239) has joined #haskell
2015-03-09 15:22:53	<--	terlar (~terje@h-37-123-145-122.na.cust.bahnhof.se) has quit (Ping timeout: 240 seconds)
2015-03-09 15:22:59	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:23:10	-->	mtncode (~chris@198.0.178.110) has joined #haskell
2015-03-09 15:23:46	--	suvash is now known as suvash_away
2015-03-09 15:23:59	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:24:21	<--	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 246 seconds)
2015-03-09 15:24:22	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:25:10	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:25:32	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:25:49	-->	Big_G (~Big_G@c-98-225-5-170.hsd1.wa.comcast.net) has joined #haskell
2015-03-09 15:26:26	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Remote host closed the connection)
2015-03-09 15:26:31	<--	apakatt (~apakatt@c-31-209-25-130.cust.bredband2.com) has quit (Quit: guru meditation)
2015-03-09 15:26:35	-->	shesek (~shesek@77.127.158.156) has joined #haskell
2015-03-09 15:26:46	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:27:09	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:27:43	-->	terlar (~terje@h-37-123-145-122.na.cust.bahnhof.se) has joined #haskell
2015-03-09 15:27:52	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 15:28:02	<--	gansteed (~gansteed@182.106.212.134) has quit (Quit: Leaving)
2015-03-09 15:28:09	juanpaucar	In cabal files which is preferred, ==version.*
2015-03-09 15:28:21	-->	Xeironis (~Jake@dslb-088-066-225-213.088.066.pools.vodafone-ip.de) has joined #haskell
2015-03-09 15:28:22	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:28:27	juanpaucar	or >=version.subversion && < version.anothersubverison ?
2015-03-09 15:28:44	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:29:00	-->	jo__ (uid41683@gateway/web/irccloud.com/x-evsdwqceqrpevbdb) has joined #haskell
2015-03-09 15:29:10	--	jespada_ is now known as jespada
2015-03-09 15:29:14	-->	n0n3such (~n0n3such@cpe-66-68-33-69.austin.res.rr.com) has joined #haskell
2015-03-09 15:29:45	<--	Xeironis (~Jake@dslb-088-066-225-213.088.066.pools.vodafone-ip.de) has quit (Client Quit)
2015-03-09 15:29:48	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:30:05	-->	Xeironis (~Jake@dslb-088-066-225-213.088.066.pools.vodafone-ip.de) has joined #haskell
2015-03-09 15:30:10	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:30:20	<--	Guest37504 (~amar@49.248.206.134) has quit (Remote host closed the connection)
2015-03-09 15:30:39	<--	dented42 (~dented42@71-35-210-104.slkc.qwest.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz?)
2015-03-09 15:30:45	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:31:00	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:31:10	<--	Takle_ (~takle@62.254.166.26) has quit (Remote host closed the connection)
2015-03-09 15:31:29	<--	crobbins (~crobbins@c-73-201-214-48.hsd1.va.comcast.net) has quit (Remote host closed the connection)
2015-03-09 15:31:48	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:31:56	--	suvash_away is now known as suvash
2015-03-09 15:32:02	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:32:56	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:33:08	<--	Longlius (~longlius@c-69-247-183-18.hsd1.tn.comcast.net) has quit (Ping timeout: 272 seconds)
2015-03-09 15:33:10	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:33:33	<--	torpet (~torpet@84-115-42-228.dynamic.surfer.at) has quit (Remote host closed the connection)
2015-03-09 15:34:01	-->	amar (~amar@49.248.206.134) has joined #haskell
2015-03-09 15:34:14	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:34:26	--	amar is now known as Guest70069
2015-03-09 15:34:28	<--	FMcC (~finlay@130.209.157.36) has quit (Ping timeout: 256 seconds)
2015-03-09 15:34:29	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:34:35	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 15:34:49	-->	torpet (~torpet@84-115-42-228.dynamic.surfer.at) has joined #haskell
2015-03-09 15:35:02	-->	aaron8910 (~aaron8910@172-7-147-62.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2015-03-09 15:35:06	-->	bennofs (~benno@ip923432f4.dynamic.kabel-deutschland.de) has joined #haskell
2015-03-09 15:35:23	-->	osa1 (~omer@149.160.246.94) has joined #haskell
2015-03-09 15:35:59	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:36:02	indiagreen	sleepomeno: taking 1 (filtered pr) %~ f
2015-03-09 15:36:04	indiagreen	probably
2015-03-09 15:36:20	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:37:05	-->	wulexwhtowxulqj (uid15586@gateway/web/irccloud.com/x-zqdqatfpibuhzkuv) has joined #haskell
2015-03-09 15:37:07	-->	zenith_ (~zenith@142.150.23.90) has joined #haskell
2015-03-09 15:37:17	-->	joobus (~Kira@97.75.125.226) has joined #haskell
2015-03-09 15:37:34	ClaudiusMaximus	juanpaucar: ==a.b.* is what i usually use, unless i know it works with more than one a.b, then i use >= a0.b0 && < a1.b1
2015-03-09 15:37:39	<--	Guest72895 (~phil@adsl-ull-226-222.50-151.net24.it) has quit (Ping timeout: 246 seconds)
2015-03-09 15:37:53	indiagreen	> [1,3,4,8] & taking 1 (filtered even) %~ negate
2015-03-09 15:37:55	lambdabot	 No instance for (GHC.Show.Show t0)
2015-03-09 15:37:55	lambdabot	   arising from a use of ?M695642306958705276727410.show_M6956423069587052767...
2015-03-09 15:37:55	lambdabot	 The type variable ?t0? is ambiguous
2015-03-09 15:37:56	<--	yminsky (~yminsky@jane-street-capital-llc.gigabitethernet7-7.asr1.jfk1.gblx.net) has quit (Quit: yminsky)
2015-03-09 15:38:08	indiagreen	> [1,3,4,8] & taking 1 (filtered even) %~ negate :: [Int]
2015-03-09 15:38:09	lambdabot	 No instance for (GHC.Real.Integral [GHC.Types.Int])
2015-03-09 15:38:09	lambdabot	   arising from a use of ?GHC.Real.even?No instance for (GHC.Num.Num [GHC.Typ...
2015-03-09 15:38:09	lambdabot	   arising from a use of ?GHC.Num.negate?
2015-03-09 15:38:11	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:38:23	-->	erkin (~erkin@unaffiliated/erkin) has joined #haskell
2015-03-09 15:38:35	-->	dedgrant (~dedgrant@209.52.88.205) has joined #haskell
2015-03-09 15:38:35	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:38:42	-->	gcganley (~user@c-75-67-180-199.hsd1.ma.comcast.net) has joined #haskell
2015-03-09 15:38:47	<--	sinkensabe (~sinkensab@213.115.244.180) has quit (Read error: Connection reset by peer)
2015-03-09 15:39:02	-->	alexclark_ (uid46995@gateway/web/irccloud.com/x-gipvwwntdnvuldrc) has joined #haskell
2015-03-09 15:39:27	sleepomeno	indiagreen: thanks!
2015-03-09 15:39:34	<--	aaron8910 (~aaron8910@172-7-147-62.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2015-03-09 15:39:38	-->	BurningCa007 (~BurningCa@92.98.175.176) has joined #haskell
2015-03-09 15:39:39	indiagreen	no, wait
2015-03-09 15:39:43	indiagreen	I found the correct one
2015-03-09 15:39:43	-->	gansteed (~gansteed@182.106.212.134) has joined #haskell
2015-03-09 15:39:44	indiagreen	> [1,3,4,8] & taking 1 (each . filtered even) %~ negate
2015-03-09 15:39:46	lambdabot	 [1,3,-4,8]
2015-03-09 15:40:08	indiagreen	I wonder whether there's a simpler solution...
2015-03-09 15:40:30	-->	FMcC (~finlay@130.209.157.36) has joined #haskell
2015-03-09 15:40:35	BurningCa007	Hi, anyone mind helping me getting haskell setup on windows? I can't seem to figure out how to do hello world with it...
2015-03-09 15:40:47	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:40:48	-->	mada (~mariano@190.191.129.66) has joined #haskell
2015-03-09 15:40:53	bloot	BurningCa007: did you install the haskell plattform?
2015-03-09 15:40:59	bloot	with/without winghci?
2015-03-09 15:41:02	-->	rmarianski (~rmariansk@209.20.72.181) has joined #haskell
2015-03-09 15:41:10	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:41:11	BurningCa007	Uhm I've tried that and minghci
2015-03-09 15:41:13	-->	cfricke (~cfricke@unaffiliated/cfricke) has joined #haskell
2015-03-09 15:41:21	BurningCa007	but I kept getting errors in windows 8.1 64 bit
2015-03-09 15:41:31	indiagreen	show us the error, please
2015-03-09 15:41:33	<--	juanpaucar (~juanpauca@186.101.153.165) has quit (Remote host closed the connection)
2015-03-09 15:41:37	bloot	what kind of error, yes?
2015-03-09 15:41:44	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:41:49	BurningCa007	it had to do with cabal and the roaming config file
2015-03-09 15:41:51	sleepomeno	indiagreen: i just found: [1,3,4,8] & elementOf (Control.Lens.each . filtered even) 0 %~ Prelude.negate
2015-03-09 15:41:58	<--	kaeluka (~stebr742@emp091-199.eduroam.uu.se) has quit (Quit: kaeluka)
2015-03-09 15:41:58	sleepomeno	seems to be doing the same
2015-03-09 15:42:02	-->	folone_ (~folone@80.82.202.196) has joined #haskell
2015-03-09 15:42:07	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:42:26	BurningCa007	so for a newbie do I want haskell platform or that minghc?
2015-03-09 15:42:34	indiagreen	it's the same, but it's not really simpler
2015-03-09 15:42:34	silver	platform
2015-03-09 15:42:50	-->	vijaykiran (~user@213.208.206.28) has joined #haskell
2015-03-09 15:42:51	BurningCa007	64 bit I presume?
2015-03-09 15:42:53	bloot	can you launch WinGHCI?
2015-03-09 15:42:55	silver	works on win7
2015-03-09 15:42:58	-->	crobbins (~crobbins@c-73-201-214-48.hsd1.va.comcast.net) has joined #haskell
2015-03-09 15:43:05	-->	lukaramu (~lukaramu@port-32627.pppoe.wtnet.de) has joined #haskell
2015-03-09 15:43:10	bloot	(winghci is the graphical version)
2015-03-09 15:43:15	-->	sinkensabe (~sinkensab@213.115.244.180) has joined #haskell
2015-03-09 15:43:40	bloot	silver: it works for me on 8.1
2015-03-09 15:43:40	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:43:52	BurningCa007	alright
2015-03-09 15:43:54	BurningCa007	winghci
2015-03-09 15:43:55	BurningCa007	is up
2015-03-09 15:43:55	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:44:16	bloot	dois it show Prelude >?
2015-03-09 15:44:19	-->	quazifarhan (~quazifarh@103.239.252.3) has joined #haskell
2015-03-09 15:44:21	BurningCa007	yes
2015-03-09 15:44:34	bloot	then type putStrLn "hi" and press enter
2015-03-09 15:44:41	BurningCa007	alright that works
2015-03-09 15:44:42	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:44:48	bloot	Prelude> putStrLn "hi"
2015-03-09 15:44:48	bloot	hi
2015-03-09 15:44:56	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:44:58	BurningCa007	thanks, so how the hell do I get this to compile a .hs file?
2015-03-09 15:45:08	<--	folone (~folone@80.82.202.196) has quit (Ping timeout: 264 seconds)
2015-03-09 15:45:11	bloot	With ghc but you have to use the windows command prompt
2015-03-09 15:45:21	BurningCa007	-.-
2015-03-09 15:45:22	-->	obcode_ (~obcode@pD9FCDA35.dip0.t-ipconnect.de) has joined #haskell
2015-03-09 15:45:27	geekosaur	ghci is not an IDE, it's a deskcalculator
2015-03-09 15:45:29	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Remote host closed the connection)
2015-03-09 15:45:31	bloot	yep
2015-03-09 15:45:33	<--	sleepomeno (~user@089144223000.atnat0032.highway.bob.at) has quit (Remote host closed the connection)
2015-03-09 15:45:39	bloot	Windows+R -> cmd.exe
2015-03-09 15:45:40	indiagreen	sleepomeno: you can replace ?taking 1? with ?singular?, turns out it won't error out when there's no matching element when you use it as a traversal and not as a lens
2015-03-09 15:45:56	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:45:56	BurningCa007	ok so I got a hellohaskell project
2015-03-09 15:46:00	bloot	ghc --make foo.hs -o foo.exe
2015-03-09 15:46:02	BurningCa007	it is sandbox init'd on cmd
2015-03-09 15:46:10	<--	zenith_ (~zenith@142.150.23.90) has quit (Ping timeout: 255 seconds)
2015-03-09 15:46:11	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:46:21	geekosaur	if you want an IDE, there's leksah and there's an eclipse plugin (eclipsefp) and I think some other things
2015-03-09 15:46:27	 *	geekosaur doesn't use IDEs much
2015-03-09 15:46:34	BurningCa007	yea intellij plugin gave me errors
2015-03-09 15:46:50	dropp	i didn't have much luck with leksah
2015-03-09 15:46:55	dropp	i just use emacs
2015-03-09 15:46:59	dropp	emacs = king
2015-03-09 15:47:00	bloot	I never got leksah running
2015-03-09 15:47:01	BurningCa007	leksah appears to be broken on windows
2015-03-09 15:47:05	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:47:12	bloot	I use notepad++ :)
2015-03-09 15:47:16	dropp	leksah crashes pretty regularly on mac too
2015-03-09 15:47:20	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:47:31	<--	Itkovian (~Itkovian@nata214.ugent.be) has quit (Ping timeout: 255 seconds)
2015-03-09 15:47:31	dropp	i liked notepad++ when i was using a windows box
2015-03-09 15:47:36	 *	hackagebot StateVar 1.1.0.0 - State variables  http://hackage.haskell.org/package/StateVar-1.1.0.0 (SvenPanne)
2015-03-09 15:47:39	<--	junmin (~junmin@189-210-226-30.static.axtel.net) has quit (Remote host closed the connection)
2015-03-09 15:47:44	dropp	but there is no notepad++ on mac or linux
2015-03-09 15:47:50	dropp	and those are my preference environments
2015-03-09 15:47:57	BurningCa007	oh ty bloot
2015-03-09 15:48:00	BurningCa007	for the command
2015-03-09 15:48:08	<--	netj (~netj@128.12.163.109) has quit (Ping timeout: 264 seconds)
2015-03-09 15:48:12	BurningCa007	now why would I want to cabal sandbox init?
2015-03-09 15:48:12	aawe	dropp: sublime text is great if you liked np++
2015-03-09 15:48:16	-->	netj (~netj@128.12.163.109) has joined #haskell
2015-03-09 15:48:41	-->	Ankhers (~user@unaffiliated/ankhers) has joined #haskell
2015-03-09 15:48:42	indiagreen	aawe: also not free
2015-03-09 15:48:54	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:48:59	<--	ZioCrocifisso (~ZioCrocif@151.74.17.161) has quit (Ping timeout: 245 seconds)
2015-03-09 15:49:04	-->	apakatt (~apakatt@c-31-209-25-130.cust.bredband2.com) has joined #haskell
2015-03-09 15:49:17	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:49:21	aawe	indiagreen: Yeah, it says so on right on their home page
2015-03-09 15:50:00	tdammers	"not free" -> "I am at the vendor's mercy and may have to find a new text editor on a moment's notice"
2015-03-09 15:50:00	dropp	just use emacs like real developers :-)
2015-03-09 15:50:05	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:50:10	joobus	dropp: you mean vim...
2015-03-09 15:50:10	tdammers	dropp: s/emacs/vim/ ftfy
2015-03-09 15:50:25	dropp	joobus: i most certainly do *not*
2015-03-09 15:50:28	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 15:50:29	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:50:29	<--	skeet70 (~skeet70@inet-rmmc11-o.oracle.com) has quit (Ping timeout: 256 seconds)
2015-03-09 15:50:35	joobus	no, you do.  you're just confused.
2015-03-09 15:50:39	dropp	lol
2015-03-09 15:50:44	dropp	i used to use vim
2015-03-09 15:51:00	joobus	sorry to hear about your debilitating injury :P
2015-03-09 15:51:03	dropp	in fact, when i started using emacs, i caufght myself typing :wq into the buffer by accident
2015-03-09 15:51:06	aawe	tdammers: Give me a scenario where you would have to instantly uninstall your proprietary editor
2015-03-09 15:51:25	dropp	also, when i started using emacs, i used to open a file, make a change, close emacs
2015-03-09 15:51:29	carter_cloud	worst case you have to migrate to Atom, which is slower than sublime but not proprietary
2015-03-09 15:51:32	carter_cloud	but slower
2015-03-09 15:51:33	joobus	lol
2015-03-09 15:51:35	dropp	i just recently got inot the habit of keeping it open
2015-03-09 15:51:42	tdammers	aawe: upgrade OS to next release; proprietary editor is now incompatible
2015-03-09 15:51:47	ski	dropp : `emacsclient'
2015-03-09 15:52:01	tdammers	aawe: I wouldn't have to reinstall, but the editor would still be useless
2015-03-09 15:52:05	-->	funfunctor (~edward@CPE-121-211-194-230.hhui7.cht.bigpond.net.au) has joined #haskell
2015-03-09 15:52:05	joobus	carter_cloud: in my experimentation, atom just isn't ready yet.
2015-03-09 15:52:07	aawe	tdammers: yeah, free software is never incompatible *cough*
2015-03-09 15:52:16	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Remote host closed the connection)
2015-03-09 15:52:20	carter_cloud	yeah, its not very mature
2015-03-09 15:52:30	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:52:30	-->	fijimunkii (~fijimunki@host-184-167-24-31.jcs-wy.client.bresnan.net) has joined #haskell
2015-03-09 15:52:37	jtanguy	let's not get into $EDITOR wars please
2015-03-09 15:52:39	dropp	i have a emacs client already :-) what is that supposed to do, ski?
2015-03-09 15:52:45	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:52:45	aawe	Atom recently switched out the rendering code, might be faster now
2015-03-09 15:52:50	-->	Longlius (~longlius@c-69-247-183-18.hsd1.tn.comcast.net) has joined #haskell
2015-03-09 15:52:51	tdammers	aawe: it is, but when that happens, me or someone else can usually fix it
2015-03-09 15:53:15	dropp	ski: nm, google ftw
2015-03-09 15:53:19	tdammers	sometimes even just by recompiling
2015-03-09 15:53:21	<--	apakatt (~apakatt@c-31-209-25-130.cust.bredband2.com) has quit (Ping timeout: 246 seconds)
2015-03-09 15:53:21	dropp	this might be helpful
2015-03-09 15:53:24	exio4	and most of the problems with propietary stuff is just old build
2015-03-09 15:53:25	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:53:26	ski	dropp : you start an emacs server, then `emacsclient' will connect to it every time you start it. you could set `:e' in GHCi' to call it, e.g.
2015-03-09 15:53:30	dropp	but i have kicked the habit as it were
2015-03-09 15:53:34	-->	merijn (~merijn@wcw-staff-145-18-166-222.wireless.uva.nl) has joined #haskell
2015-03-09 15:53:34	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 15:53:40	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:53:40	BurningCa007	ty for help guys
2015-03-09 15:53:48	dropp	hrm.. that is kind of cool
2015-03-09 15:54:21	-->	dedgrant_ (~dedgrant@199-116-243-67.dyn.novuscom.net) has joined #haskell
2015-03-09 15:54:33	-->	doppioslash (~textual@cpc12-live24-2-0-cust192.know.cable.virginm.net) has joined #haskell
2015-03-09 15:54:59	osa1	any ideas about how to solve this: http://lpaste.net/124277 ?
2015-03-09 15:55:02	aawe	I guess I am too pragmatic to base my choice of editor on whether it will break some time in the future rather than how productive I am using it
2015-03-09 15:55:04	<--	chaau (d95b2506@gateway/web/freenode/ip.217.91.37.6) has quit (Quit: Page closed)
2015-03-09 15:55:06	dropp	emacs just makes things easier for me as a whole though, between orgmode for tasks/scheduling, various modes for coding in haskell, c++, ruby, etc., running code directly via interactive ghci, and the like, etc.
2015-03-09 15:55:19	ski	dropp : .. and `C-x C-c' will of course just save the file passed to `emacsclient', and detach and terminate that, not terminate the emacs session
2015-03-09 15:55:23	dropp	i know some vimmers will say that all of these are available in vim too
2015-03-09 15:55:39	aawe	osa1: you could try using a cabal sandbox to avoid clashes with your current packages
2015-03-09 15:55:45	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:55:49	osa1	aawe: this is already in a sandbox
2015-03-09 15:55:52	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Remote host closed the connection)
2015-03-09 15:55:54	dropp	i just understand why anyone would want to learn such a horrible language like VIMscript
2015-03-09 15:55:56	<--	sinelaw (~sinelaw@bzq-158-168-31-2.red.bezeqint.net) has quit (Ping timeout: 272 seconds)
2015-03-09 15:56:02	tdammers	dropp: I won't say that. Rather, I'll say that these things don't belong in a text editor :D
2015-03-09 15:56:08	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:56:14	dropp	lol, touche tdammers
2015-03-09 15:56:16	-->	mmachenry (~Adium@208.78.140.194) has joined #haskell
2015-03-09 15:56:16	tdammers	(and fwiw, I've never written a line of vimscript)
2015-03-09 15:56:16	phadej	osa1: prune the sandbox and install with tests
2015-03-09 15:56:20	-->	DanielDiaz (~Thunderbi@219.Red-81-44-5.dynamicIP.rima-tde.net) has joined #haskell
2015-03-09 15:56:27	osa1	phadej: didn't work
2015-03-09 15:56:34	BurningCa007	uhm what does Int :: y do?
2015-03-09 15:56:54	BurningCa007	declare an int?
2015-03-09 15:56:59	indiagreen	BurningCa007: seems meaningless to me, did you mean ?y :: Int??
2015-03-09 15:56:59	ski	no
2015-03-09 15:57:07	ski	BurningCa007 : where did you see it ?
2015-03-09 15:57:08	dropp	i love that if i need some custom feature, i just pop into a new buffer, write up some lisp code, and voila, the editor sucumbs to my wishes
2015-03-09 15:57:20	BurningCa007	http://www.seas.upenn.edu/~cis194/lectures/01-intro.html
2015-03-09 15:57:23	-->	Takle (~takle@62.254.166.26) has joined #haskell
2015-03-09 15:57:24	aawe	dropp: example?
2015-03-09 15:57:41	tdammers	dropp: I do that by popping into a new buffer, writing a shell script, and voila, I can run it with :! or whatever
2015-03-09 15:57:47	BurningCa007	how do you use y :: Int?
2015-03-09 15:57:52	indiagreen	BurningCa007: ?y :: Int? means that ?y? has type ?Int?
2015-03-09 15:57:52	<--	shesek (~shesek@77.127.158.156) has quit (Ping timeout: 240 seconds)
2015-03-09 15:58:03	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:58:16	<--	dedgrant (~dedgrant@209.52.88.205) has quit (Ping timeout: 256 seconds)
2015-03-09 15:58:21	aawe	BurningCa007: it doesn't "do" anything, it declares that y is an int. it's like an annotation
2015-03-09 15:58:26	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 15:58:42	<--	Liffon (53fc8972@gateway/web/freenode/ip.83.252.137.114) has quit (Quit: Page closed)
2015-03-09 15:58:43	BurningCa007	so how would I declare an int and assign a value to it and print it
2015-03-09 15:58:43	phadej	osa1: the next step would to try with some stackage config
2015-03-09 15:58:49	indiagreen	the whole piece of code, ?y :: Int; y = y + 1? means that you're declaring ?y? to be equal to ?y + 1? (which means that you won't ever be able to compute ?y?, by the way), and that ?y? is a number, i.e. ?Int?
2015-03-09 15:58:59	dropp	aawe: lets say that i have a bunch of code to sort through and i need a function to break it up by a delimiter and then run some additional processing, maybe add underscores or something. i could code up a function to do this and bind it to a key and voila
2015-03-09 15:59:05	ski	it declares your intension that `y' should be an `Int' (a fixed-precision integer, typically roughly what fits into a machine word)
2015-03-09 15:59:07	-->	rodlogic (~rodlogic@c-50-138-158-240.hsd1.ct.comcast.net) has joined #haskell
2015-03-09 15:59:16	phadej	osa1: and tweak it, if you need something newer somewhere. Seems that you don't, as transformers is 0.3
2015-03-09 15:59:21	<--	larion (~larion@194.109.1.196) has quit (Ping timeout: 246 seconds)
2015-03-09 15:59:25	ski	if the remaining code is not consistent with `y' being an `Int', the implementation will complain
2015-03-09 15:59:28	-->	larion (~larion@a194-109-1-73.tpb.xs4all.nl) has joined #haskell
2015-03-09 15:59:28	-->	anRch (~markmilli@50.241.103.187) has joined #haskell
2015-03-09 15:59:40	osa1	phadej: that is probably globally installed version, I use newer versions but I always use sandbox
2015-03-09 15:59:41	dropp	sure this is possible in other languagesand certainly you could do this in the the shell too, but hwy have to jump around? 
2015-03-09 15:59:55	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 15:59:57	-->	coltfred (~coltfred@inet-rmmc10-o.oracle.com) has joined #haskell
2015-03-09 16:00:05	<--	folone_ (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-09 16:00:05	aawe	dropp: I just select the first delimiter and press CTRL+D until all occurences I want are selected, then I can edit all those places simultaneusly. Or I select some lines, press CTRL+SHIFT+L, and edit the beginning or end of those lines simultaneously
2015-03-09 16:00:05	osa1	well, I have transformers-0.4.1.0 installed globally too
2015-03-09 16:00:16	<--	gcganley (~user@c-75-67-180-199.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2015-03-09 16:00:18	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:00:19	ski	BurningCa007 : btw, note that there is no *re*assignment of variables in Haskell. you can set an initial value, but you can't change the value to something else. that's by design
2015-03-09 16:00:24	<--	gansteed (~gansteed@182.106.212.134) has quit (Quit: Leaving)
2015-03-09 16:00:26	aawe	or create a selection and use regex search-and-replace within it
2015-03-09 16:00:31	dropp	aawe: that was a contrived example, that's possible in emacs too
2015-03-09 16:00:35	dropp	by default
2015-03-09 16:00:49	osa1	I've never seen this cabal error before, is this new?
2015-03-09 16:00:52	<--	chrisdotcode (~quassel@unaffiliated/chrisdotcode) has quit (Remote host closed the connection)
2015-03-09 16:00:53	dropp	oh whatever, agree to disagree
2015-03-09 16:00:57	<--	etandel (~etandel@200.201.176.130) has quit (Remote host closed the connection)
2015-03-09 16:01:01	dropp	nerdtree is nice in vim
2015-03-09 16:01:06	ski	BurningCa007 : so, typically we don't talk about "assigning a value to a variable", we talk about "binding a variable to a value" or "defining a variable to be equal to a value"
2015-03-09 16:01:09	aawe	perhaps it's unfair of me to demand an example, examples are hard
2015-03-09 16:01:11	dropp	i've been using neotree, a copy of nerdtree, for emacs
2015-03-09 16:01:13	-->	Milkweed (~Milkweeds@cpc69833-shep12-2-0-cust153.8-3.cable.virginm.net) has joined #haskell
2015-03-09 16:01:16	-->	etandel (~etandel@200.201.176.130) has joined #haskell
2015-03-09 16:01:23	aawe	emacs scares me away with the tonnes after tonnes of keybindings
2015-03-09 16:01:27	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 16:01:40	BurningCa007	eugh I really should read up on this, but just a simple piece of code please, declare integer, set it and print it
2015-03-09 16:01:42	dropp	aawe: that was a little tough at first i admit
2015-03-09 16:01:51	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:01:57	dropp	and sometimes the commands can be several strokes long
2015-03-09 16:02:13	-->	thunderrd_ (~thunderrd@110.78.148.113) has joined #haskell
2015-03-09 16:02:13	-->	Kujanator (4d633e2d@gateway/web/freenode/ip.77.99.62.45) has joined #haskell
2015-03-09 16:02:13	indiagreen	BurningCa007: the whole *point* is that you don't ?set? variables
2015-03-09 16:02:14	<--	jemu (~Thunderbi@port-212-202-107-85.static.qsc.de) has quit (Quit: jemu)
2015-03-09 16:02:14	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:02:18	dropp	i tend to bind the ones i use more commonly to shorter key strokes
2015-03-09 16:02:25	-->	Blahiya- (~blahznc@162.213.195.115) has joined #haskell
2015-03-09 16:02:27	BurningCa007	I mean set it once
2015-03-09 16:02:34	indiagreen	ah, okay
2015-03-09 16:02:37	 *	hackagebot lucid-svg 0.4.0.4 - DSL for SVG using lucid for HTML  http://hackage.haskell.org/package/lucid-svg-0.4.0.4 (jeffreyrosenbluth)
2015-03-09 16:02:45	ski	BurningCa007 : `main = print x where x :: Int; x = 42'
2015-03-09 16:02:46	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:02:53	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 16:02:54	indiagreen	http://lpaste.net/124279
2015-03-09 16:02:58	ski	BurningCa007 : you can omit the `x :: Int;' part
2015-03-09 16:03:05	<--	thunderrd (~thunderrd@110.78.148.113) has quit (Read error: Connection reset by peer)
2015-03-09 16:03:09	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:03:13	osa1	hm, so apparently a version of this package is globally installed because it's a dependency of ghc-7.8.3
2015-03-09 16:03:16	<--	joobus (~Kira@97.75.125.226) has quit (Ping timeout: 255 seconds)
2015-03-09 16:03:32	<--	desktop_dido (~catcat@cpe-66-108-229-234.nyc.res.rr.com) has left #haskell
2015-03-09 16:03:44	BurningCa007	huh haskell is weird, like I think I better run away and go back to C++ atm
2015-03-09 16:03:49	BurningCa007	ty for all your support tho
2015-03-09 16:04:02	aawe	giving up eh?
2015-03-09 16:04:06	BurningCa007	not really
2015-03-09 16:04:10	aawe	;)
2015-03-09 16:04:11	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:04:14	BurningCa007	I just can't take the time atm
2015-03-09 16:04:20	BurningCa007	Got a school project to finish in C++
2015-03-09 16:04:25	ski	ok. feel free to come back later
2015-03-09 16:04:26	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:04:28	dropp	i unfortunately had to write an async job scheduling application in ruby and now i am dealing with the complications having to make numerous patches due to issues with ruby's (lack-of valid) concurrency. :-(
2015-03-09 16:04:31	BurningCa007	and I was told I should learn haskell for this uni I got an offer for
2015-03-09 16:04:33	dropp	bbl lads
2015-03-09 16:04:38	<--	wei2912 (~wei2912@unaffiliated/wei2912) has quit (Quit: Lost terminal)
2015-03-09 16:04:40	-->	skeet70 (~skeet70@inet-rmmc11-o.oracle.com) has joined #haskell
2015-03-09 16:04:46	mmachenry	I'm having a problem with backtracking in Parsec. http://lpaste.net/124280 I tried to throw in some try's so that it would not suck up input when it fails. I'm trying to parse Scheme characters like #\A or #\newline.
2015-03-09 16:04:52	aawe	BurningCa007: "learn you a haskell for great good" is great for grokking the basics
2015-03-09 16:05:06	nilg	I'm looking for a type class constraint that tells that variable type a is a function, does that exist?
2015-03-09 16:05:13	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 252 seconds)
2015-03-09 16:05:32	yoshuawuyts	What do you guys think of rust? Genuinely curious about it.
2015-03-09 16:05:36	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:05:45	EvanR_	nilg: no but you can use (a -> b) instead as the type variable
2015-03-09 16:05:50	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:05:51	aawe	yoshuawuyts: I hope it replaces C++
2015-03-09 16:06:00	<--	raymondtay (~raymondta@218.212.231.64) has quit (Quit: raymondtay)
2015-03-09 16:06:07	aawe	and I like C++
2015-03-09 16:06:51	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:07:04	nilg	EvanR_: it's tricky I what to use that in a GADT, I'm not sure I can
2015-03-09 16:07:04	EvanR_	nilg: (->) is a type constructor like Maybe and [], you can simply use this in your type
2015-03-09 16:07:05	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:07:25	EvanR_	assuming that all you care about is that its a function
2015-03-09 16:07:29	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Ping timeout: 256 seconds)
2015-03-09 16:07:47	nilg	Schema :: (MyFuncTypeClass a) => a -> (Atom a)
2015-03-09 16:08:03	EvanR_	thats not just "a function"
2015-03-09 16:08:03	hexagoxel	osa1: cabal version? .cabal file? (no promises i can help, i am just curious)
2015-03-09 16:08:30	EvanR_	nilg: whats MyFuncTypeClass ?
2015-03-09 16:08:39	nilg	the magic type class I'm after
2015-03-09 16:08:54	nilg	I'm using data Atom a where
2015-03-09 16:08:54	nilg	... GADT construct
2015-03-09 16:09:03	EvanR_	why not type Schema = (a -> b) -> Atom (a -> b)
2015-03-09 16:09:06	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:09:10	-->	mmh (~mmh@ipbcc11248.dynamic.kabel-deutschland.de) has joined #haskell
2015-03-09 16:09:14	EvanR_	oh gadt
2015-03-09 16:09:15	ski	s/=/::/
2015-03-09 16:09:20	-->	renekooi (~renekooi@82.103.128.10) has joined #haskell
2015-03-09 16:09:21	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:09:59	<--	BurningCa007 (~BurningCa@92.98.175.176) has quit (Quit: Leaving)
2015-03-09 16:10:18	-->	paradoja (~paradoja@85.Red-213-4-35.staticIP.rima-tde.net) has joined #haskell
2015-03-09 16:10:29	<--	edon- (~user@gw3.infra.univ-bordeaux.fr) has quit (Ping timeout: 255 seconds)
2015-03-09 16:10:32	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:10:33	EvanR_	nilg: so you probably dont want typeclass constraints on the data constructors themselves
2015-03-09 16:10:34	-->	sinelaw (~sinelaw@bzq-158-168-31-2.red.bezeqint.net) has joined #haskell
2015-03-09 16:10:40	<--	simukis_ (~nagisa@78-60-58-6.static.zebra.lt) has quit (Quit: simukis_)
2015-03-09 16:10:49	EvanR_	instead putting them on the library operations for the type
2015-03-09 16:10:51	-->	rgrinberg1 (~rgrinberg@66.49.218.159) has joined #haskell
2015-03-09 16:10:55	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:10:59	EvanR_	and allow the type to be parameterized by any type a
2015-03-09 16:11:01	-->	BurningCa007 (~BurningCa@92.98.175.176) has joined #haskell
2015-03-09 16:11:07	<--	BurningCa007 (~BurningCa@92.98.175.176) has quit (Client Quit)
2015-03-09 16:11:10	indiagreen	nilg: http://lpaste.net/124286
2015-03-09 16:11:25	indiagreen	wouldn't that work?
2015-03-09 16:11:25	<--	anRch (~markmilli@50.241.103.187) has quit (Read error: Connection reset by peer)
2015-03-09 16:11:37	-->	kala (73727d42@gateway/web/freenode/ip.115.114.125.66) has joined #haskell
2015-03-09 16:11:39	Kujanator	I'm trying to implement short circuit booleans in a mini imperative language but am struggling. I've done the eager booleans though. Here's the code if you could have a quick look. http://pastebin.com/iyqQsSV4
2015-03-09 16:11:59	-->	BurningCa007 (~BurningCa@92.98.175.176) has joined #haskell
2015-03-09 16:12:07	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:12:08	<--	Lokathor (~Lokathor@75-167-149-201.bois.qwest.net) has quit (Ping timeout: 264 seconds)
2015-03-09 16:12:25	<--	vijaykiran (~user@213.208.206.28) has quit (Ping timeout: 264 seconds)
2015-03-09 16:12:29	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:12:38	 *	hackagebot hack2-handler-snap-server 2015.3.9 - Hack2 Snap server handler  http://hackage.haskell.org/package/hack2-handler-snap-server-2015.3.9 (JinjingWang)
2015-03-09 16:12:57	-->	shesek (~shesek@77.127.158.156) has joined #haskell
2015-03-09 16:12:58	nilg	I think that works indiagreen , thank you soooo much!
2015-03-09 16:13:17	<--	saml (~saml@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2015-03-09 16:13:21	-->	cfoch (~cfoch@181.65.63.18) has joined #haskell
2015-03-09 16:13:23	cfoch	hello
2015-03-09 16:13:25	EvanR_	did not know about that
2015-03-09 16:13:26	-->	anRch (~markmilli@50.241.103.187) has joined #haskell
2015-03-09 16:13:33	EvanR_	S :: (x -> y) -> G (x -> y)
2015-03-09 16:13:38	kala	indiagreen : can we save intermediate values while applying recursive functions i a list?
2015-03-09 16:13:43	-->	djbeau (~djbeau@inet-hqmc05-o.oracle.com) has joined #haskell
2015-03-09 16:13:44	cfoch	what is the config-setup and where do I find it? Does it change when I use a sandbox?
2015-03-09 16:14:00	indiagreen	EvanR_: there's also a fairly common piece of olegery available, http://okmij.org/ftp/Haskell/isFunction.lhs
2015-03-09 16:14:01	-->	apolune_ (~apolune@host-213-179-148-82.customer.m-online.net) has joined #haskell
2015-03-09 16:14:21	aawe	s = return/pure?
2015-03-09 16:14:21	<--	Ornedan (aitakang@melkki.cs.helsinki.fi) has quit (Ping timeout: 244 seconds)
2015-03-09 16:14:22	indiagreen	kala: yes, scanl/scanr
2015-03-09 16:14:22	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:14:34	kala	indiagree : thank you
2015-03-09 16:14:39	cfoch	setup-config *
2015-03-09 16:14:44	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:14:44	-->	ixti (~ixti@188.119.233.0) has joined #haskell
2015-03-09 16:14:45	<--	amiri_ (~amiri@cpe-104-174-60-215.socal.res.rr.com) has quit (Ping timeout: 246 seconds)
2015-03-09 16:14:48	<--	BurningCa007 (~BurningCa@92.98.175.176) has quit (Client Quit)
2015-03-09 16:14:58	-->	BurningCa007 (~BurningCa@92.98.175.176) has joined #haskell
2015-03-09 16:14:58	indiagreen	kala: if your recursion can be expressed with foldl/foldr, of course
2015-03-09 16:15:02	ski	Kujanator : your `Neg' case looks wrong
2015-03-09 16:15:09	ski	kala : wb
2015-03-09 16:15:12	<--	x90 (~r0x@78.165.60.239) has quit (Quit: x90 has no reason)
2015-03-09 16:15:20	ski	kala : you didn't answer my question from before
2015-03-09 16:15:24	<--	rgrinberg1 (~rgrinberg@66.49.218.159) has quit (Ping timeout: 246 seconds)
2015-03-09 16:15:47	Kujanator	ski: Oh ok, why is that?
2015-03-09 16:15:49	-->	Hemamorphy (~Andrew@ared-43-201.csusb.edu) has joined #haskell
2015-03-09 16:16:05	kala	ski : Apologies, I missed it
2015-03-09 16:16:05	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:16:19	<--	Takle (~takle@62.254.166.26) has quit (Remote host closed the connection)
2015-03-09 16:16:21	ski	Kujanator : it discards any possible updates to the state made by the subexpression (you use the `snd' part, but not the `fst' part)
2015-03-09 16:16:26	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:16:45	ski	<ski> kala : which intermediate values do you want to see ? the partial sums ?
2015-03-09 16:17:03	kala	ski and indiagreen : Please refer to the link here it is a function to perform exponential smoothing : http://lpaste.net/124274
2015-03-09 16:17:04	-->	Takle (~takle@62.254.166.26) has joined #haskell
2015-03-09 16:17:07	<--	apolune (~apolune@host-213-179-148-82.customer.m-online.net) has quit (Ping timeout: 256 seconds)
2015-03-09 16:17:27	ski	Kujanator : for short-circuiting, look at the answer of the first evaluation, before deciding whether to do the second or not
2015-03-09 16:17:31	kala	ski: the intermediate values are Exponential moving weigted moving averages
2015-03-09 16:18:03	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:18:09	ski	kala : ok. that doesn't answer my question, though
2015-03-09 16:18:19	-->	Welkin (~Welkin@adsl-69-212-240-79.dsl.ipltin.ameritech.net) has joined #haskell
2015-03-09 16:18:25	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:18:28	ski	aawe : no
2015-03-09 16:18:29	kala	ski : sorry, 
2015-03-09 16:18:37	osa1	what does $w prefix in generated stg name mean?
2015-03-09 16:18:44	<--	apolune_ (~apolune@host-213-179-148-82.customer.m-online.net) has quit (Ping timeout: 264 seconds)
2015-03-09 16:19:00	indiagreen	kala: I don't know math, can you say where in your function can I see a ?Exponential moving weigted moving average??
2015-03-09 16:19:09	<--	folone (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-09 16:19:12	-->	x90 (~r0x@78.165.60.239) has joined #haskell
2015-03-09 16:19:13	-->	fujimura_ (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has joined #haskell
2015-03-09 16:19:19	-->	fro_ozen (~fro_ozen@dslb-188-098-207-202.188.098.pools.vodafone-ip.de) has joined #haskell
2015-03-09 16:19:21	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 16:19:25	kala	indiagreen: sure.  avg (x:xs) = (a*x) + (1-a)*(avg xs)
2015-03-09 16:19:36	kala	a is the smoothing constant from 0-1
2015-03-09 16:19:44	indiagreen	okay, then I'm confused about what avg does
2015-03-09 16:19:51	indiagreen	it computes an average of a list?
2015-03-09 16:20:02	indiagreen	then what are intermediate values you want?
2015-03-09 16:20:08	indiagreen	averages of parts of the list?
2015-03-09 16:20:18	<--	Ch0c0late (uid49959@gateway/web/irccloud.com/x-ypyuwruixngwmtgf) has quit (Quit: Connection closed for inactivity)
2015-03-09 16:20:26	-->	nonny_t (~nonny_t@host-89-242-68-93.as13285.net) has joined #haskell
2015-03-09 16:20:28	kala	nope it does compute the average of a list , indiagreen give me a minute i shall lpaste it
2015-03-09 16:20:40	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:20:43	indiagreen	like, if the list is [1,2,3], then you want averages of [1,2,3], [2,3], [3]? confu-usion
2015-03-09 16:20:51	-->	junmin (~junmin@189.205.92.3) has joined #haskell
2015-03-09 16:21:02	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:21:05	-->	amiri (~amiri@cpe-104-174-60-215.socal.res.rr.com) has joined #haskell
2015-03-09 16:21:07	<--	Hemamorphy (~Andrew@ared-43-201.csusb.edu) has left #haskell ("Textual IRC Client: www.textualapp.com")
2015-03-09 16:21:35	<--	mjboa (~mike@p4FF43036.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2015-03-09 16:21:37	ski	kala : a call like `avg [x1,x2,...,xn]' will evaluate to a sum like `a*x1 + (1-a)*(a*x2 + (1-a)*(..(a*xn + (1-a)*0)..))' .. do you want a list of all the intermediate partial sums `a*xi + (1-a)*(..(a*xn + (1-a)*0)..)' ? in order of ascending `i' ? descending `i' ?
2015-03-09 16:21:57	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:22:03	kala	ski : yes
2015-03-09 16:22:10	ski	which ? :)
2015-03-09 16:22:11	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:22:22	<--	folone (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-09 16:22:35	<--	janne (dmon@punainen.org) has quit (Ping timeout: 250 seconds)
2015-03-09 16:22:39	 *	hackagebot handsy 0.0.13 - A DSL to describe common shell operations and interpeters for running them locally and remotely.  http://hackage.haskell.org/package/handsy-0.0.13 (utdemir)
2015-03-09 16:22:54	-->	micmus (~micmus@achi81.neoplus.adsl.tpnet.pl) has joined #haskell
2015-03-09 16:23:04	<--	darkf (~darkf___@unaffiliated/darkf) has quit (Quit: Leaving)
2015-03-09 16:23:05	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 16:23:18	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:23:23	<--	fujimura_ (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has quit (Ping timeout: 240 seconds)
2015-03-09 16:23:32	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:24:30	<--	rossm (~rossm@host-89-242-185-196.as13285.net) has quit (Ping timeout: 246 seconds)
2015-03-09 16:24:33	-->	codesoup (~codesoup@CPE68b6fcf580d3-CM68b6fcf580d0.cpe.net.cable.rogers.com) has joined #haskell
2015-03-09 16:24:40	-->	sivteck (~sivteck@unaffiliated/sivteck) has joined #haskell
2015-03-09 16:25:03	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:25:14	Kujanator	Ski: For the short circuit I think I understand but am struggling to convert it to code. Essentially what I want to say is evalB (a :||: b) s = if a then a else b
2015-03-09 16:25:17	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:25:45	<--	lifter (~lifter@99-73-150-159.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2015-03-09 16:25:55	<--	bloot (~roman2@fmnssun.ibone.ch) has quit (Quit: leaving)
2015-03-09 16:25:59	<--	Guest70069 (~amar@49.248.206.134) has quit (Remote host closed the connection)
2015-03-09 16:26:07	-->	rossm (~rossm@host-89-242-185-196.as13285.net) has joined #haskell
2015-03-09 16:26:18	-->	triliyn (~lioneyes@50.141.85.253) has joined #haskell
2015-03-09 16:26:29	-->	vijaykiran (~user@213.208.206.28) has joined #haskell
2015-03-09 16:27:02	-->	rhllor (~rhllor@190.4.5.30) has joined #haskell
2015-03-09 16:27:13	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:27:20	<--	ansible1 (~kvirc@73.217.98.159) has quit (Ping timeout: 245 seconds)
2015-03-09 16:27:26	ski	Kujanator : first do a `let' (or `where') for the evaluation of the first subexpression
2015-03-09 16:27:31	ski	then an `if'
2015-03-09 16:27:32	-->	mystor (~mystor@d67-193-97-66.home3.cgocable.net) has joined #haskell
2015-03-09 16:27:34	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:28:02	<--	daniel-s (~daniel-s@mu00053769.eng.monash.edu.au) has quit (Remote host closed the connection)
2015-03-09 16:28:18	<--	ashnur (~rak@unaffiliated/ashnur) has quit (Ping timeout: 256 seconds)
2015-03-09 16:28:18	-->	janne (dmon@84.20.131.206) has joined #haskell
2015-03-09 16:28:21	-->	lifter (~lifter@99-73-150-159.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2015-03-09 16:28:29	-->	daniel-s (~daniel-s@mu00053769.eng.monash.edu.au) has joined #haskell
2015-03-09 16:28:43	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:28:58	-->	tantalum (~tantalum@173-22-158-100.client.mchsi.com) has joined #haskell
2015-03-09 16:29:05	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:29:39	<--	erkin (~erkin@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2015-03-09 16:29:41	<--	Swizec (~swizec@BSN-77-159-184.static.siol.net) has quit (Quit: Computer has gone to sleep.)
2015-03-09 16:30:00	-->	edon- (~user@laptop-147-210-129-49.labri.fr) has joined #haskell
2015-03-09 16:30:05	-->	joobus (~Kira@97.75.125.226) has joined #haskell
2015-03-09 16:30:16	--	doctorin1 is now known as doctorinserenity
2015-03-09 16:30:43	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 16:30:53	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:31:00	<--	thunderrd_ (~thunderrd@110.78.148.113) has quit (Read error: Connection reset by peer)
2015-03-09 16:31:07	-->	thunderrd (~thunderrd@110.78.148.113) has joined #haskell
2015-03-09 16:31:16	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:31:36	-->	rgrinberg1 (~rgrinberg@66.49.218.159) has joined #haskell
2015-03-09 16:31:39	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-09 16:31:48	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 16:32:08	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:32:32	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:32:32	<--	mystor (~mystor@d67-193-97-66.home3.cgocable.net) has quit (Ping timeout: 264 seconds)
2015-03-09 16:32:33	<--	solatis (~solatis@49.156.41.254) has quit (Ping timeout: 246 seconds)
2015-03-09 16:32:44	kala	indiagreen and ski : please find the complete explanation here - http://lpaste.net/124288
2015-03-09 16:32:47	kala	Thnaks
2015-03-09 16:32:50	<--	stubborn_d0nkey (~stubborn_@212.39.106.98) has quit (Ping timeout: 256 seconds)
2015-03-09 16:32:53	Kujanator	ski: In my head this makes sense and it does compile but it could be completely wrong. evalB (a :&&: b) s = let a = (s a) if a else let b = (s b) if b
2015-03-09 16:32:54	<--	Big_G (~Big_G@c-98-225-5-170.hsd1.wa.comcast.net) has quit (Ping timeout: 246 seconds)
2015-03-09 16:33:16	-->	frodwith (~pdriver@CPE-72-128-209-23.wi.res.rr.com) has joined #haskell
2015-03-09 16:33:32	-->	juanpaucar (~juanpauca@186.101.153.165) has joined #haskell
2015-03-09 16:33:33	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:33:55	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:34:20	-->	Swizec (~swizec@BSN-77-159-184.static.siol.net) has joined #haskell
2015-03-09 16:34:39	-->	MrScout (~MrScout@unaffiliated/mrscout) has joined #haskell
2015-03-09 16:34:42	-->	solrize (~solrize@unaffiliated/solrize) has joined #haskell
2015-03-09 16:34:53	<--	quchen2 (~quchen@ip-109-43-0-176.web.vodafone.de) has quit (Remote host closed the connection)
2015-03-09 16:34:53	<--	_ashbreeze_ (~mark@99-195-160-197.dyn.centurytel.net) has quit (Remote host closed the connection)
2015-03-09 16:35:07	-->	amar (~amar@49.248.206.134) has joined #haskell
2015-03-09 16:35:23	-->	dented42 (~dented42@128-110-89-83.uconnect.utah.edu) has joined #haskell
2015-03-09 16:35:31	--	amar is now known as Guest10413
2015-03-09 16:35:35	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:35:45	<--	sinelaw (~sinelaw@bzq-158-168-31-2.red.bezeqint.net) has quit (Ping timeout: 246 seconds)
2015-03-09 16:35:57	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:36:11	ski	Kujanator : you need an `in' before the first `if'. also that one needs a `then'. dunno what the idea with the second `if' would be
2015-03-09 16:36:14	-->	ikkebr (uid10360@gateway/web/irccloud.com/x-jtjnjdqpiyabgukh) has joined #haskell
2015-03-09 16:36:17	-->	_ashbreeze_ (~mark@99-195-160-197.dyn.centurytel.net) has joined #haskell
2015-03-09 16:36:42	-->	ldbrandy (~Adium@2620:10d:c082:1055:4e8d:79ff:fef3:e5c0) has joined #haskell
2015-03-09 16:36:59	ski	Kujanator : you need to call an evaluation function on `a' (it's an expression). you can't pass it to a state as an argument (states wants variable names/identifiers, iirc)
2015-03-09 16:37:14	ski	kala : you first have to decide on the order you want
2015-03-09 16:37:15	-->	Cubensys (~Daniel@bl20-93-31.dsl.telepac.pt) has joined #haskell
2015-03-09 16:37:20	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Remote host closed the connection)
2015-03-09 16:37:45	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:38:07	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:38:22	<--	doomlord_1 (~textual@host86-148-72-94.range86-148.btcentralplus.com) has quit (Ping timeout: 255 seconds)
2015-03-09 16:38:25	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 16:38:37	-->	Big_G (~Big_G@c-98-225-5-170.hsd1.wa.comcast.net) has joined #haskell
2015-03-09 16:38:47	hibou107	if I make a executable in Haskell, It will include all the dependencies in it ?
2015-03-09 16:38:50	--	edon- is now known as edon
2015-03-09 16:38:51	<--	peacememories (~peace@e221-114.eduroam.tuwien.ac.at) has quit (Ping timeout: 246 seconds)
2015-03-09 16:38:56	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:39:07	hibou107	so I just have to send the binary file to client ?
2015-03-09 16:39:17	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:39:30	-->	mjboa (~mike@p4FF43036.dip0.t-ipconnect.de) has joined #haskell
2015-03-09 16:39:39	<--	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has quit (Remote host closed the connection)
2015-03-09 16:39:51	tdammers	no
2015-03-09 16:39:59	tdammers	well, it will include all the haskell dependencies by default
2015-03-09 16:40:10	tdammers	but you still need the system dependenceis
2015-03-09 16:40:25	tdammers	libc, libgmp, and anything used via ffi
2015-03-09 16:40:28	-->	simukis_ (~nagisa@78-60-58-6.static.zebra.lt) has joined #haskell
2015-03-09 16:40:31	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:40:44	hibou107	but the client does not need haskell platform ?
2015-03-09 16:40:47	tdammers	no
2015-03-09 16:40:47	-->	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has joined #haskell
2015-03-09 16:40:54	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:40:59	Kujanator	ski: I think I've confused myself here. The code I sent was meant to be the OR not the AND. 
2015-03-09 16:40:59	<--	crobbins (~crobbins@c-73-201-214-48.hsd1.va.comcast.net) has quit (Remote host closed the connection)
2015-03-09 16:41:08	hibou107	ok I see, for example the hmatrix package, the client need to install gsl
2015-03-09 16:41:10	ski	Kujanator : same idea applies in either case
2015-03-09 16:41:20	-->	tavoll (4f33b7ae@gateway/web/freenode/ip.79.51.183.174) has joined #haskell
2015-03-09 16:41:20	tdammers	hibou107: I think so, yes
2015-03-09 16:41:28	tdammers	hibou107: if that's what hmatrix depends on, that is
2015-03-09 16:41:33	-->	kqr (kqr@h30n15-nt-a11.ias.bredband.telia.com) has joined #haskell
2015-03-09 16:41:33	Kujanator	ski: Ok, so since I have an evalA function, that needs to be used?
2015-03-09 16:41:37	<--	kqr (kqr@h30n15-nt-a11.ias.bredband.telia.com) has left #haskell ("WeeChat 1.0.1")
2015-03-09 16:41:41	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:41:44	tavoll	Hello! Just a simple question: does anyone know any website created with haskell?
2015-03-09 16:41:45	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-09 16:42:03	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 16:42:03	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:42:24	<--	lsix (~lsix@i16-lef02-th2-89-83-131-44.ft.lns.abo.bbox.fr) has quit (Ping timeout: 246 seconds)
2015-03-09 16:42:36	merijn	tavoll: lpaste.net and ircbrowse.net
2015-03-09 16:42:39	-->	ghostpl__ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 16:42:43	indiagreen	haskellers.com
2015-03-09 16:42:47	-->	jlewis (~jlewis@unaffiliated/jordanlewis) has joined #haskell
2015-03-09 16:42:54	voidzero	haskellnews.org
2015-03-09 16:42:58	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Read error: Connection reset by peer)
2015-03-09 16:43:01	indiagreen	lots of blogs generated with Hakyll
2015-03-09 16:43:16	tavoll	merijn: Thank you
2015-03-09 16:43:18	-->	Itkovian (~Itkovian@nata214.ugent.be) has joined #haskell
2015-03-09 16:43:29	indiagreen	tavoll: https://github.com/yesodweb/yesod/wiki/Powered-by-Yesod
2015-03-09 16:43:31	exio4	haskell.org too
2015-03-09 16:43:44	<--	jlewis (~jlewis@unaffiliated/jordanlewis) has quit (Client Quit)
2015-03-09 16:43:58	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:44:06	-->	apolune (~apolune@p200300630B1B4401F81EB747DDAE9F49.dip0.t-ipconnect.de) has joined #haskell
2015-03-09 16:44:20	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:44:29	-->	acid123 (~acid@46.115.8.37) has joined #haskell
2015-03-09 16:44:30	-->	hibou107_ (807f1379@gateway/web/freenode/ip.128.127.19.121) has joined #haskell
2015-03-09 16:44:33	tavoll	Thank you to everyone, i think they are enough lol
2015-03-09 16:44:36	<--	bennofs (~benno@ip923432f4.dynamic.kabel-deutschland.de) has quit (Ping timeout: 265 seconds)
2015-03-09 16:44:41	kala	ski : the order is from top to bottom
2015-03-09 16:44:45	merijn	exio4: oh, is the new design running on haskell?
2015-03-09 16:44:53	merijn	tavoll: Oh, and obviously Hackage is haskell too
2015-03-09 16:44:53	<--	folone (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-09 16:44:57	ski	kala : but in the resulting list, i mean
2015-03-09 16:45:06	merijn	exio4: The wiki was just mediawiki
2015-03-09 16:45:09	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 16:45:11	<--	apricity_ (~apricity@154.122.41.7) has quit (Ping timeout: 252 seconds)
2015-03-09 16:45:18	<--	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has quit (Ping timeout: 245 seconds)
2015-03-09 16:45:23	<--	hibou107 (500eba09@gateway/web/freenode/ip.80.14.186.9) has quit (Ping timeout: 246 seconds)
2015-03-09 16:45:38	-->	pata (~quassel@62.49.115.235) has joined #haskell
2015-03-09 16:45:45	<--	torpet (~torpet@84-115-42-228.dynamic.surfer.at) has quit (Remote host closed the connection)
2015-03-09 16:45:47	<--	simg (~chatzilla@89.213.26.67) has quit (Remote host closed the connection)
2015-03-09 16:45:48	exio4	merijn: I checked the link in haskell.org, and saw a .cabal, no idea how haskelly it is :P 
2015-03-09 16:45:52	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:46:14	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:46:20	<--	Welkin (~Welkin@adsl-69-212-240-79.dsl.ipltin.ameritech.net) has quit (Ping timeout: 264 seconds)
2015-03-09 16:46:49	<--	daniel-s (~daniel-s@mu00053769.eng.monash.edu.au) has quit (Remote host closed the connection)
2015-03-09 16:46:52	<--	anRch (~markmilli@50.241.103.187) has quit (Quit: anRch)
2015-03-09 16:46:56	<--	Qfwfq (~WashIrvin@unaffiliated/washirving) has quit (Ping timeout: 264 seconds)
2015-03-09 16:47:12	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:47:13	-->	daniel-s (~daniel-s@mu00053769.eng.monash.edu.au) has joined #haskell
2015-03-09 16:47:34	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:47:45	kala	ski: the resulting list is the last column
2015-03-09 16:47:47	Ferdirand	> (,) <$> [1,2] <*> [3,4]
2015-03-09 16:47:47	kala	forecasts
2015-03-09 16:47:48	lambdabot	 [(1,3),(1,4),(2,3),(2,4)]
2015-03-09 16:48:12	Ferdirand	whoops, wrong window, sorry
2015-03-09 16:48:22	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:48:29	-->	karmatr0n (~karmatr0n@development.fisica.unam.mx) has joined #haskell
2015-03-09 16:48:44	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:48:57	<--	jacquerie (~jnotarst@pcgs2x3160h65.cern.ch) has quit (Remote host closed the connection)
2015-03-09 16:49:05	<--	orion (~orion@unaffiliated/orion) has quit (Quit: "")
2015-03-09 16:49:09	<--	tavoll (4f33b7ae@gateway/web/freenode/ip.79.51.183.174) has quit (Quit: Page closed)
2015-03-09 16:49:11	-->	Qfwfq (~WashIrvin@unaffiliated/washirving) has joined #haskell
2015-03-09 16:49:30	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:49:45	ski	kala : i still don't know whether you want `[f1,f2,f3,f4]' or `[f4,f3,f2,f1]'
2015-03-09 16:49:51	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:49:56	<--	Cubensys (~Daniel@bl20-93-31.dsl.telepac.pt) has left #haskell ("Leaving")
2015-03-09 16:50:51	-->	Hemamorphy (~Andrew@ared-43-201.csusb.edu) has joined #haskell
2015-03-09 16:50:55	-->	josephle (~josephhle@216.239.45.73) has joined #haskell
2015-03-09 16:50:58	-->	litherum (~Adium@153.18.172.28) has joined #haskell
2015-03-09 16:51:16	<--	Hemamorphy (~Andrew@ared-43-201.csusb.edu) has quit (Read error: Connection reset by peer)
2015-03-09 16:51:32	-->	crazydiamond (~crazydiam@178.141.71.128) has joined #haskell
2015-03-09 16:51:42	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:52:04	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:52:40	kala	ski : it is `[f1,f2,f3,f4]' thanks
2015-03-09 16:52:41	 *	hackagebot gulcii 0.2.0.3 - graphical untyped lambda calculus interactive interpreter  http://hackage.haskell.org/package/gulcii-0.2.0.3 (ClaudeHeilandAllen)
2015-03-09 16:52:49	<--	malkomalko (~malkomalk@207.251.103.46) has quit (Ping timeout: 256 seconds)
2015-03-09 16:53:12	<--	sinkensabe (~sinkensab@213.115.244.180) has quit (Remote host closed the connection)
2015-03-09 16:54:07	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:54:29	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:54:31	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 16:54:55	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 16:54:58	-->	saml (~saml@adfb12c6.cst.lightpath.net) has joined #haskell
2015-03-09 16:55:18	<--	pt1 (~pt1@62.209.164.18) has quit (Ping timeout: 245 seconds)
2015-03-09 16:55:18	-->	mitochon_ (~JCI@75-144-75-149-Michigan.hfc.comcastbusiness.net) has joined #haskell
2015-03-09 16:55:47	ski	kala : ok. is the input list `[a1,a2,a3,a4]' with this example ?
2015-03-09 16:56:01	<--	thunderrd (~thunderrd@110.78.148.113) has quit (Remote host closed the connection)
2015-03-09 16:56:24	<--	janne (dmon@84.20.131.206) has quit (Ping timeout: 250 seconds)
2015-03-09 16:56:28	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 16:56:28	kala	yes ski
2015-03-09 16:56:31	-->	qubitnerd (~neutrino@unaffiliated/electron/x-8286743) has joined #haskell
2015-03-09 16:56:34	ski	kala : if so, it looks to me like your `avg' isn't computing the final `f4' correctly
2015-03-09 16:56:40	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:56:53	<--	mathk (~mathieu@mail1.vantek.eu) has quit (Ping timeout: 240 seconds)
2015-03-09 16:56:56	kala	ok, nevermind! but how do i save intermediate values?
2015-03-09 16:57:00	-->	litherum1 (~Adium@153.18.172.28) has joined #haskell
2015-03-09 16:57:02	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:57:10	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 16:57:15	<--	mitochon (~JCI@75-144-75-149-Michigan.hfc.comcastbusiness.net) has quit (Ping timeout: 244 seconds)
2015-03-09 16:57:18	<--	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has quit (Quit: Leaving.)
2015-03-09 16:57:19	<--	DanielDiaz (~Thunderbi@219.Red-81-44-5.dynamicIP.rima-tde.net) has left #haskell
2015-03-09 16:57:23	<--	litherum (~Adium@153.18.172.28) has quit (Ping timeout: 245 seconds)
2015-03-09 16:57:24	kala	ski: at this point I just want to save the intermeduate values in a list
2015-03-09 16:57:33	ski	well, first you'd probably name the result from the recursive call in a `where' (or `let')
2015-03-09 16:57:36	-->	StoneCyp1er (~johnh@70-36-241-147.dedicated.static.sonic.net) has joined #haskell
2015-03-09 16:57:36	-->	mathk (~mathieu@mail1.vantek.eu) has joined #haskell
2015-03-09 16:57:38	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 16:57:45	<--	chatsiri_ (~chatsiri_@119-46-191-21.static.asianet.co.th) has quit (Ping timeout: 245 seconds)
2015-03-09 16:57:46	-->	janne (dmon@84.20.131.206) has joined #haskell
2015-03-09 16:57:52	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 16:57:55	-->	chatsiri_ (~chatsiri_@119-46-191-21.static.asianet.co.th) has joined #haskell
2015-03-09 16:58:11	kala	ski, could you lpaste it? im sorry :/
2015-03-09 16:58:16	-->	thunderrd (~thunderrd@110.78.148.113) has joined #haskell
2015-03-09 16:58:19	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 16:58:21	ski	then you'd decide whether the most recent result (which you want to compute the next recursive result from) is at the front or the back at this list. according to what you said above, it should be at the back, which is slightly awkward ..
2015-03-09 16:58:29	-->	zcourts_ (~zcourts@diag-2-2.rdg.ac.uk) has joined #haskell
2015-03-09 16:58:34	funfunctor	hi
2015-03-09 16:58:35	-->	shlevy (~shlevy@linode.shealevy.com) has joined #haskell
2015-03-09 16:58:41	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 16:59:05	ski	so, you'd change the single result to a list of results, and extract the most recent one to compute the next one, tacking it on to the list of results (at the end, given what you waid above)
2015-03-09 16:59:23	-->	malkomalko (~malkomalk@207.251.103.46) has joined #haskell
2015-03-09 16:59:33	ski	.. you could alternatively store the list reversed, and only reverse it back at the end, if you prefer (or not reverse back at all, if you decide you like this order better)
2015-03-09 16:59:36	<--	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has quit (Read error: Connection reset by peer)
2015-03-09 16:59:36	--	zcourts_ is now known as zcourts
2015-03-09 16:59:43	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 16:59:54	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:00:01	Kujanator	ski: I'm just not getting this. Here's my latest attempt evalB (a :||: b) s = let (s a) in evalA a s if a else let (s b) in evalA if b
2015-03-09 17:00:16	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:00:39	ski	one could also consider rewriting the function to not use explicit recursion, but rather `foldr' or `foldl', and then just replace those by `scanr' or `scanl', as indiagreen suggested
2015-03-09 17:00:42	-->	peacememories (~peace@e221-114.eduroam.tuwien.ac.at) has joined #haskell
2015-03-09 17:00:45	<--	yqt (~yqt@81.88.230.28) has quit (Ping timeout: 264 seconds)
2015-03-09 17:00:47	<--	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-euowmocuxzgfcdcz) has quit (Quit: Connection closed for inactivity)
2015-03-09 17:00:55	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 17:00:57	-->	N2017 (~N2107@c-50-189-37-160.hsd1.ma.comcast.net) has joined #haskell
2015-03-09 17:01:01	-->	pfurla (~textual@static-100-33-141-114.nycmny.fios.verizon.net) has joined #haskell
2015-03-09 17:01:01	ski	kala : i'd rather not just give away the solution
2015-03-09 17:01:04	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:01:18	<--	litherum1 (~Adium@153.18.172.28) has quit (Ping timeout: 246 seconds)
2015-03-09 17:01:26	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:01:32	ski	kala : previously, you used a comma in your pairs, why not now ?
2015-03-09 17:01:39	<--	qubitnerd (~neutrino@unaffiliated/electron/x-8286743) has quit (Ping timeout: 246 seconds)
2015-03-09 17:01:47	kala	ski : I have been trying this for hours ski :/
2015-03-09 17:01:52	ski	kala : sorry, disregard my last comment
2015-03-09 17:01:57	ski	Kujanator : previously, you used a comma in your pairs, why not now ?
2015-03-09 17:02:00	<--	etandel (~etandel@200.201.176.130) has quit (Remote host closed the connection)
2015-03-09 17:02:02	-->	ril (~ril@c-67-180-198-245.hsd1.ca.comcast.net) has joined #haskell
2015-03-09 17:02:03	kala	np
2015-03-09 17:02:23	-->	etandel (~etandel@200.201.176.130) has joined #haskell
2015-03-09 17:02:24	ski	Kujanator : .. and you still need a `then' for that `else'
2015-03-09 17:02:24	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:02:27	-->	jrm2k6 (~jrm2k6@172.56.30.103) has joined #haskell
2015-03-09 17:02:27	-->	stultus (~stultus@wikisource/Hrishikesh.kb) has joined #haskell
2015-03-09 17:02:28	-->	tempname11_ (uid63563@gateway/web/irccloud.com/x-aitqcgabgeksrsnc) has joined #haskell
2015-03-09 17:02:45	-->	angrygoats (~tbockman@69.194.135.252) has joined #haskell
2015-03-09 17:02:46	ski	Kujanator : it is `if ... then ... else ...'. no part is optional
2015-03-09 17:02:46	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:03:09	tempname11_	what is the current preferred monad transformer library?
2015-03-09 17:03:18	ski	kala : let's take a simpler example, ok ?
2015-03-09 17:03:21	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:03:35	kala	sure ski
2015-03-09 17:03:38	<--	hamishmack (~hamishmac@194.216.131.132) has quit (Quit: hamishmack)
2015-03-09 17:03:39	ski	consider
2015-03-09 17:03:43	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:03:44	geekosaur	tempname11_, mtl. if you are asking based on a web page somrewhere that said that mtl was obsolete, please tell us so we can get it fixed
2015-03-09 17:03:46	<--	conal (~textual@64.71.133.70) has quit (Ping timeout: 250 seconds)
2015-03-09 17:03:54	<--	darkbolt (~darkbolt@23.252.55.57) has quit (Remote host closed the connection)
2015-03-09 17:04:03	geekosaur	*please tell us where you found it
2015-03-09 17:04:10	tempname11_	geekosaur: nope, just had no idea
2015-03-09 17:04:21	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:04:23	ski	  sum :: [Double] -> Double
2015-03-09 17:04:28	tempname11_	thanks
2015-03-09 17:04:29	-->	emanuelz (~emanuel@fsf/member/emanuelz) has joined #haskell
2015-03-09 17:04:30	ski	  sum [    ] = 0
2015-03-09 17:04:34	-->	darkbolt (~darkbolt@23.252.55.57) has joined #haskell
2015-03-09 17:04:38	ski	    sum (x:xs) = x + sum xs
2015-03-09 17:04:43	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:04:45	<--	rhllor (~rhllor@190.4.5.30) has quit (Quit: rhllor)
2015-03-09 17:04:49	ski	kala : do you understand this definition ?
2015-03-09 17:04:53	Kujanator	ski: Not sure, just didn't realise I hadn't. Added them in now, when compiling i'm getting an error on the "in", but don't understand why.
2015-03-09 17:04:59	<--	ril (~ril@c-67-180-198-245.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2015-03-09 17:05:12	-->	conal (~textual@64.71.133.70) has joined #haskell
2015-03-09 17:05:24	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:05:25	<--	silver (~silver@178.121.192.135) has quit (Read error: Connection reset by peer)
2015-03-09 17:05:30	<--	N2017 (~N2107@c-50-189-37-160.hsd1.ma.comcast.net) has quit (Ping timeout: 244 seconds)
2015-03-09 17:05:30	ski	Kujanator : oh, the `in' should be just before the `if' (it's `let ... in ...', where in this case the second `...' is just an `if ... then ... else ...')
2015-03-09 17:05:33	<--	osa1 (~omer@149.160.246.94) has quit (Ping timeout: 264 seconds)
2015-03-09 17:05:33	kala	Yes ski, it is to find sum of all element in a list sum[1..n]
2015-03-09 17:05:46	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:06:00	ski	Kujanator : before `evalA', you need `=', as with your other `let's, e.g. the `:&:' case
2015-03-09 17:06:09	lpaste	funfunctor pasted ?No title? at http://lpaste.net/124289
2015-03-09 17:06:19	funfunctor	^ is this "good practice" ?
2015-03-09 17:06:31	<--	ghostpl__ (~ghostpl@85.232.253.2) has quit (Remote host closed the connection)
2015-03-09 17:06:34	-->	chrisdotcode (~quassel@static-71-183-66-10.nycmny.fios.verizon.net) has joined #haskell
2015-03-09 17:06:34	<--	chrisdotcode (~quassel@static-71-183-66-10.nycmny.fios.verizon.net) has quit (Changing host)
2015-03-09 17:06:34	-->	chrisdotcode (~quassel@unaffiliated/chrisdotcode) has joined #haskell
2015-03-09 17:06:39	-->	silver (~silver@93.84.46.169) has joined #haskell
2015-03-09 17:06:43	-->	innertracks (~Thunderbi@c-98-203-134-27.hsd1.wa.comcast.net) has joined #haskell
2015-03-09 17:06:44	<--	nomeata (~jojo@nomeata.de) has quit (Ping timeout: 264 seconds)
2015-03-09 17:06:50	-->	athan (~quassel@209.181.64.217) has joined #haskell
2015-03-09 17:06:52	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:07:05	kala	ski : Yes, it is to find sum of all element in a list sum[1..n]
2015-03-09 17:07:11	<--	triliyn (~lioneyes@50.141.85.253) has quit (Read error: Connection reset by peer)
2015-03-09 17:07:15	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:07:19	ski	kala : now, let's say that we want to return a list of all partial sums, so instead of `sum [a,b,c]' evaluating to `a + (b + (c + 0))', we want `partialSums [a,b,c]' evaluating to a list `[a + (b + (c + 0)),b + (c + 0),c + 0,0]', ok ?
2015-03-09 17:07:20	<--	merijn (~merijn@wcw-staff-145-18-166-222.wireless.uva.nl) has quit (Ping timeout: 264 seconds)
2015-03-09 17:07:39	kala	ski : yes
2015-03-09 17:07:53	<--	Hijiri (~oneechan@2602:306:b85c:4820:587c:eb6e:f277:5313) has quit (Quit: WeeChat 1.0.1)
2015-03-09 17:07:55	-->	jespada_ (~jespada@190.246.179.220) has joined #haskell
2015-03-09 17:08:04	<--	liste (~liste@188.166.59.211) has quit (Quit: leaving)
2015-03-09 17:08:05	ski	funfunctor : sounds fine to me (perhaps a `newtype' instead of a `type', depending ..)
2015-03-09 17:08:06	-->	ashnur (~rak@unaffiliated/ashnur) has joined #haskell
2015-03-09 17:08:15	funfunctor	To give some context the return is from IO actions
2015-03-09 17:08:21	ski	kala : so, we start with
2015-03-09 17:08:24	-->	lritter (~lritter@g224198038.adsl.alicedsl.de) has joined #haskell
2015-03-09 17:08:30	ski	  partialSums :: [Double] -> [Double]
2015-03-09 17:08:31	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 17:08:37	funfunctor	ski: wont newtype winding me up with lots of liftIO's though?
2015-03-09 17:08:38	<--	darkbolt (~darkbolt@23.252.55.57) has quit (Ping timeout: 245 seconds)
2015-03-09 17:08:49	kala	ski : sure.
2015-03-09 17:08:50	<--	jespada (~jespada@190.246.179.220) has quit (Ping timeout: 264 seconds)
2015-03-09 17:08:53	<--	chrisdotcode (~quassel@unaffiliated/chrisdotcode) has quit (Remote host closed the connection)
2015-03-09 17:08:55	-->	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has joined #haskell
2015-03-09 17:09:03	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:09:03	ski	  partialSums [    ] = [0]  -- here we return a *list* containing the single result `0', instead of just returning `0' as the result
2015-03-09 17:09:14	kala	ok
2015-03-09 17:09:18	funfunctor	ski: what did you mean by "depending"?
2015-03-09 17:09:22	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:09:33	<--	conal (~textual@64.71.133.70) has quit (Ping timeout: 252 seconds)
2015-03-09 17:09:37	-->	innertra1 (~Thunderbi@c-98-203-134-27.hsd1.wa.comcast.net) has joined #haskell
2015-03-09 17:09:48	ski	  partialSums (x:xs) = x + partialSum : partialSums
2015-03-09 17:09:49	ski	    where
2015-03-09 17:09:53	-->	rhllor (~rhllor@190.4.5.30) has joined #haskell
2015-03-09 17:10:02	<--	rgrinberg1 (~rgrinberg@66.49.218.159) has quit (Ping timeout: 272 seconds)
2015-03-09 17:10:14	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Ping timeout: 256 seconds)
2015-03-09 17:10:19	ski	er, actually, it's not so good to name the list the same as the function :)
2015-03-09 17:10:21	ski	retake that
2015-03-09 17:10:27	kala	haha
2015-03-09 17:10:38	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:10:53	ski	  partialSums (x:xs) = x + lastSum : allSums
2015-03-09 17:10:54	ski	    where
2015-03-09 17:10:56	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 17:10:58	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:11:05	ski	    allSums@(lastSum:_) = partialSums xs
2015-03-09 17:11:11	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 17:11:21	ski	so, we name the whole list of the partial sums for `xs' `allSums'
2015-03-09 17:11:23	<--	innertracks (~Thunderbi@c-98-203-134-27.hsd1.wa.comcast.net) has quit (Ping timeout: 256 seconds)
2015-03-09 17:11:34	-->	segmond_ (c6fce60f@gateway/web/freenode/ip.198.252.230.15) has joined #haskell
2015-03-09 17:11:38	ski	and we also name the first element of that list (the most recent one) `lastSum'
2015-03-09 17:11:55	-->	gusto (~gusto@2a02:810d:a840:3c20:82fa:5bff:fe0a:dfef) has joined #haskell
2015-03-09 17:12:03	-->	quchen (~quchen@ipb21bf8fb.dynamic.kabel-deutschland.de) has joined #haskell
2015-03-09 17:12:08	<--	Swizec (~swizec@BSN-77-159-184.static.siol.net) has quit (Quit: Computer has gone to sleep.)
2015-03-09 17:12:10	ski	kala : do you know the `@' symbol in patterns ?
2015-03-09 17:12:32	-->	atomiccc (~atomiccc@50.242.106.14) has joined #haskell
2015-03-09 17:12:36	ski	funfunctor : depending on whether you want it as a distinct type or not ;)
2015-03-09 17:12:41	-->	Welkin (~Welkin@adsl-69-212-240-79.dsl.ipltin.ameritech.net) has joined #haskell
2015-03-09 17:12:49	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:13:09	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:13:11	ski	funfunctor : i don't see how `liftIO' would be related to this ..
2015-03-09 17:13:20	Kujanator	ski: Still not working, although hopefully it's a little bit closer to the solution. evalB (a :||: b) s = let (s, a) = evalA s a in (s, a) if a else let (s, b) = evalA s b in (s, b) if b
2015-03-09 17:13:30	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-09 17:13:36	-->	merijn (~merijn@wcw-staff-145-18-166-222.wireless.uva.nl) has joined #haskell
2015-03-09 17:13:38	<--	larion (~larion@a194-109-1-73.tpb.xs4all.nl) has quit (Ping timeout: 264 seconds)
2015-03-09 17:13:38	<--	sivteck (~sivteck@unaffiliated/sivteck) has quit (Ping timeout: 245 seconds)
2015-03-09 17:14:14	kala	ski : f s@(x:xs)             = x:s
2015-03-09 17:14:16	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 17:14:20	-->	raichoo (~raichoo@mue-88-130-33-240.dsl.tropolys.de) has joined #haskell
2015-03-09 17:14:29	-->	litherum (~Adium@2620:149:f01:204:6959:518f:4d5b:4d1a) has joined #haskell
2015-03-09 17:14:29	-->	rgrinberg1 (~rgrinberg@66.49.218.159) has joined #haskell
2015-03-09 17:14:38	<--	pfurla (~textual@static-100-33-141-114.nycmny.fios.verizon.net) has quit (Read error: Connection reset by peer)
2015-03-09 17:14:50	-->	pfurla_ (~textual@static-100-33-141-114.nycmny.fios.verizon.net) has joined #haskell
2015-03-09 17:14:50	<--	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has quit (Ping timeout: 264 seconds)
2015-03-09 17:14:57	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:15:03	ski	kala : yes. to match a value with a pattern `<variable>@<pattern>', we first bind `<variable>' to the value, and then *also* try to match the value with `<pattern>'
2015-03-09 17:15:03	funfunctor	ski: http://hackage.haskell.org/package/hlibBladeRF-0.1.0.4/docs/LibBladeRF-Sync.html see the -> IO (Either BladeRFError ())
2015-03-09 17:15:13	<--	gfixler (~gfixler@cpe-108-185-238-241.socal.res.rr.com) has quit (Quit: WeeChat 1.0.1)
2015-03-09 17:15:20	ski	kala : so we both give a name to the whole list and to the first element of it, in this case
2015-03-09 17:15:20	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:15:37	-->	narendraj9 (~narendraj@106.76.173.60) has joined #haskell
2015-03-09 17:15:43	ski	kala : do you understand the definition of `partialSums' ? and how it corresponds to the definition of `sum' ?
2015-03-09 17:16:06	funfunctor	ski: have I this the right way around? type is distinct and newtype isn't?
2015-03-09 17:16:13	-->	sivteck (~sivteck@unaffiliated/sivteck) has joined #haskell
2015-03-09 17:16:13	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:16:21	<--	jordanl (~jordan@unaffiliated/jordanl) has quit (Ping timeout: 246 seconds)
2015-03-09 17:16:24	<--	narendraj9 (~narendraj@106.76.173.60) has quit (Client Quit)
2015-03-09 17:16:32	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:16:57	<--	rossm (~rossm@host-89-242-185-196.as13285.net) has quit (Ping timeout: 264 seconds)
2015-03-09 17:16:59	Lutin`	ski: Is there a reason we're not going the scanl route?
2015-03-09 17:17:04	ski	Kujanator : ok. the next problem is that your `(s, a) = evalA s a' is recursive. it tries to feed back the same state `s' in for evaluating `a' as it got from that same evaluation as output. this `s' in unrelated to the `s' in `evalB (a :||: b) s = ...'
2015-03-09 17:17:14	-->	chrisdotcode (~quassel@unaffiliated/chrisdotcode) has joined #haskell
2015-03-09 17:17:50	<--	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has quit (Ping timeout: 264 seconds)
2015-03-09 17:17:53	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:17:54	-->	folone_ (~folone@80.82.202.196) has joined #haskell
2015-03-09 17:18:04	Lutin`	ski: Or are you working towards that
2015-03-09 17:18:05	ski	Lutin` : i dunno whether kala knows about `foldl' .. also their recursion was direct, didn't use an accumulator
2015-03-09 17:18:11	-->	Gama11_ (~quassel@pD9F9054B.dip0.t-ipconnect.de) has joined #haskell
2015-03-09 17:18:17	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:18:26	Lutin`	ah alright, I just popped into the convo
2015-03-09 17:18:29	-->	Hugehead (~Hugehead@184.101.53.47) has joined #haskell
2015-03-09 17:18:43	ski	funfunctor : no, `type' just introduces a synonym, a shorthand. `newtype' (and `data') makes new distinct types
2015-03-09 17:18:52	--	paf31_away is now known as paf31
2015-03-09 17:18:53	-->	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has joined #haskell
2015-03-09 17:18:54	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:19:04	-->	RegEchse (~regechse@ipbcc2d1c9.dynamic.kabel-deutschland.de) has joined #haskell
2015-03-09 17:19:14	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:19:18	<--	Gama11 (~quassel@pD9F9054B.dip0.t-ipconnect.de) has quit (Ping timeout: 252 seconds)
2015-03-09 17:19:25	funfunctor	ski: ah oh, thats what you mean by distinct, ok I had a feeling I was reading that wrong
2015-03-09 17:19:32	<--	Itkovian (~Itkovian@nata214.ugent.be) has quit (Quit: Zzzzz ...)
2015-03-09 17:19:36	ski	funfunctor : .. anyway, i still don't see how `type' vs. `newtype' here would interact with `liftIO'ing
2015-03-09 17:19:40	<--	folone_ (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-09 17:19:45	Kujanator	ski: Would copying the way it's been done in the similar examples i.e (a :&: b) work? So something along the lines of evalB (a :||: b) s0 = let (s1, a) = evalA a s0 in (s1, a) if a else let (s2, b) = evalA b s0 in (s2, b) if b
2015-03-09 17:19:49	RegEchse	(buffer notify highlight 
2015-03-09 17:19:51	RegEchse	argh
2015-03-09 17:19:59	-->	rossm (~rossm@host-89-242-185-196.as13285.net) has joined #haskell
2015-03-09 17:20:03	funfunctor	ski: no it wont. So my question is what is best practice here in my use case?
2015-03-09 17:20:09	ski	Kujanator : yes, numbering would do fine
2015-03-09 17:20:12	<--	bb010g (uid21050@gateway/web/irccloud.com/x-ptencoecpbiphybl) has quit (Quit: Connection closed for inactivity)
2015-03-09 17:20:25	<--	pata (~quassel@62.49.115.235) has quit (Quit: No Ping reply in 180 seconds.)
2015-03-09 17:20:43	<--	yamadapc (~yamadapc@189.38.172.216) has quit (Remote host closed the connection)
2015-03-09 17:20:49	-->	JusticeFries (~textual@c-107-2-139-89.hsd1.co.comcast.net) has joined #haskell
2015-03-09 17:20:50	<--	fujimura (~fujimura@38.105.171.2) has quit (Remote host closed the connection)
2015-03-09 17:21:03	-->	folone_ (~folone@80.82.202.196) has joined #haskell
2015-03-09 17:21:04	-->	jiang42 (~jiang42@183.218.71.87) has joined #haskell
2015-03-09 17:21:05	-->	trism (~jconti@unaffiliated/trism) has joined #haskell
2015-03-09 17:21:09	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2015-03-09 17:21:30	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:21:32	<--	folone (~folone@80.82.202.196) has quit (Ping timeout: 250 seconds)
2015-03-09 17:21:37	<--	michael-k (~michael@HSI-KBW-046-005-021-122.hsi8.kabel-badenwuerttemberg.de) has quit (Ping timeout: 246 seconds)
2015-03-09 17:21:49	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:21:49	ski	Kujanator : anyway, `(s, a) if ...' in your `let (s, a) = evalA s a in (s, a) if ...' doesn't look sensible. after you've used `let' to get the result of evaluating the first expression (and the new state), you immediately want to check that boolean you got (so use `if'). it doesn't make sense to write a pair in front of an `if' (a pair is not a function, you can't apply it to anything)
2015-03-09 17:22:04	<--	peacememories (~peace@e221-114.eduroam.tuwien.ac.at) has quit (Remote host closed the connection)
2015-03-09 17:22:10	ski	funfunctor : it depends :)
2015-03-09 17:22:17	<--	debnathshoham (uid67108@gateway/web/irccloud.com/x-qfbnqlijefoamezt) has quit (Quit: Connection closed for inactivity)
2015-03-09 17:22:23	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:22:24	funfunctor	ski: on? :)
2015-03-09 17:22:33	funfunctor	i'm still a little confused
2015-03-09 17:22:42	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:22:42	funfunctor	lack of experience if you will
2015-03-09 17:22:52	-->	pata (~quassel@62.49.115.235) has joined #haskell
2015-03-09 17:22:54	<--	muzzle (~Adium@mnch-4d046503.pool.mediaways.net) has quit (Quit: Leaving.)
2015-03-09 17:23:20	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:23:36	-->	chpatrick (chilton@nat/google/x-ulvensqjcpslyyft) has joined #haskell
2015-03-09 17:23:38	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:23:39	<--	Platyp (~Platyp@nusnet-242-40.dynip.nus.edu.sg) has quit (Remote host closed the connection)
2015-03-09 17:23:55	chpatrick	does anyone know if there's some clever way to flip an applicative around?
2015-03-09 17:24:12	chpatrick	by which I mean: f <$> a <* >b      to (a </> b) f
2015-03-09 17:24:28	chpatrick	where </> is some operator
2015-03-09 17:24:30	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:24:38	-->	flounders (~swilliams@h62.250.186.173.static.ip.windstream.net) has joined #haskell
2015-03-09 17:24:43	chpatrick	I have a feeling you can do it with CPS but I can't wrap my head around it
2015-03-09 17:24:44	<--	Guest10413 (~amar@49.248.206.134) has quit (Remote host closed the connection)
2015-03-09 17:24:49	kala	ski: nope, I do not understand this sorry
2015-03-09 17:24:51	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:24:52	ski	funfunctor : perhaps you don't want to have to think about how `BladeRFReturnTy' is defined (or you don't want clients/users to depend on it). e.g. perhaps later you'd like to be able to change the definition of it, without having to change that many places in the code (specifically, without having to change more code than that which is in the same module as the definition of `BladeRFReturnTy') -- then a `newtype' (or `data') could be reasonable
2015-03-09 17:24:56	<--	prophile (~alynn@oftn/member/prophile) has quit (Quit: The Game)
2015-03-09 17:25:11	EvanR_	:t (<**>) 
2015-03-09 17:25:12	ski	(cut off near ".. in the same module as the definition of `BladeRFReturnTy') -- then a `newtype' (or `data') could be reasonable")
2015-03-09 17:25:12	lambdabot	Applicative f => f a -> f (a -> b) -> f b
2015-03-09 17:25:15	-->	prophile (~alynn@oftn/member/prophile) has joined #haskell
2015-03-09 17:25:16	<--	fijimunkii (~fijimunki@host-184-167-24-31.jcs-wy.client.bresnan.net) has quit (Quit: Lost terminal)
2015-03-09 17:25:19	EvanR_	:t (<&>) 
2015-03-09 17:25:19	lambdabot	Functor f => f a -> (a -> b) -> f b
2015-03-09 17:25:25	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:25:44	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:26:09	ski	funfunctor : but perhaps you just intend this as a "thin shorthand", and expect users to be able to make use of the knowledge than an `BladeRFReturnTy a' is just a `Either BladeRFError a' -- and then you'd go with `type'
2015-03-09 17:26:33	funfunctor	ski: ok that makes more sense, many thanks!
2015-03-09 17:26:37	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:26:53	funfunctor	yes since its exposed as part of the API then I guess type is what I should indeed be using
2015-03-09 17:26:57	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:27:12	-->	lsix (~lsix@i16-lef02-th2-89-83-131-44.ft.lns.abo.bbox.fr) has joined #haskell
2015-03-09 17:27:21	ski	kala : so, perhaps look at an intermediate step
2015-03-09 17:27:25	ski	  sum [    ] = 0
2015-03-09 17:27:27	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:27:35	ski	  sum (x:xs) = x + lastSum
2015-03-09 17:27:37	ski	    where
2015-03-09 17:27:42	ski	    lastSum = sum xs
2015-03-09 17:27:46	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:27:57	ski	compare this with the previous
2015-03-09 17:27:59	ski	  partialSums [    ] = [0]
2015-03-09 17:28:07	ski	  partialSums (x:xs) = x + lastSum : allSums
2015-03-09 17:28:09	ski	    where
2015-03-09 17:28:14	ski	    allSums@(lastSum:_) = partialSums xs
2015-03-09 17:28:45	<--	Stalkr_ (~Stalkr@x1-6-74-44-01-e5-78-62.cpe.webspeed.dk) has quit (Quit: Leaving...)
2015-03-09 17:28:46	<--	zzmiy1 (~zzmiy@86.57.155.45) has quit (Quit: Leaving.)
2015-03-09 17:28:48	ski	so, i changed the base case to return a list (containing the single result), instead of just returning its result
2015-03-09 17:28:57	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:28:58	<--	akegalj_ (~akegalj@93-139-119-235.adsl.net.t-com.hr) has quit (Quit: Lost terminal)
2015-03-09 17:29:14	kala	ok, :)
2015-03-09 17:29:15	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:29:28	ski	and i changed the recursive case to extract the `lastSum' from the front of the list of all the recursive results (also naming the whole recursive result list `allSums')
2015-03-09 17:29:40	chpatrick	EvanR: but then the arguments are still reversed right?
2015-03-09 17:29:55	-->	mkster (~mkster@i577B517E.versanet.de) has joined #haskell
2015-03-09 17:29:57	-->	AwesomeHaircut (~jesus@67-1-247-211.tcso.qwest.net) has joined #haskell
2015-03-09 17:29:58	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:30:01	-->	xiinotulp (~plutoniix@node-4g4.pool-125-25.dynamic.totbb.net) has joined #haskell
2015-03-09 17:30:08	ski	and then i tacked on the new result `x + lastSum' in front of that list `allSums' (whose first element is `lastSum'). instead of returning *only* `x + lastSum'
2015-03-09 17:30:10	<--	dented42 (~dented42@128-110-89-83.uconnect.utah.edu) has quit (Quit: My Mac has gone to sleep. ZZZzzz?)
2015-03-09 17:30:18	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:30:47	-->	yqt (~yqt@81.88.230.28) has joined #haskell
2015-03-09 17:30:47	ski	kala : so i adapted the recursion from returning the "current result" to returning "a list of the current result, and also all intermediate recursive results"
2015-03-09 17:30:48	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:31:07	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:31:13	ski	kala : hopefully you should now get an idea of how to achive something like that with your `avg'
2015-03-09 17:31:14	chpatrick	EvanR: what I would really like is (fa1 / fa2 / fa3) $ \a1 a2 a3 -> ...
2015-03-09 17:31:17	Lutin`	Something to work towards :)
2015-03-09 17:31:24	Lutin`	@let ewma a (x:xs) = scanl (\s y -> a*y + (1-a)*s) x xs
2015-03-09 17:31:26	lambdabot	 Defined.
2015-03-09 17:31:33	-->	mgsloan (~mgsloan@c-76-121-171-89.hsd1.wa.comcast.net) has joined #haskell
2015-03-09 17:31:47	Lutin`	> ewma 0.5 [20.0,27.0,25.0,22.0]
2015-03-09 17:31:49	lambdabot	 [20.0,23.5,24.25,23.125]
2015-03-09 17:31:53	EvanR_	chpatrick: i dont really understand
2015-03-09 17:31:58	kala	Yes I do ski :D thank a ton
2015-03-09 17:32:01	kala	:)
2015-03-09 17:32:05	kala	thnaks
2015-03-09 17:32:18	ski	kala : note that, with the above approach, you'd get a list `[f4,f3,f2,f1]' as output (most recent result in front of the list) .. if you don't like this, then either do a final reverse, or (more tedious) add to the end and extract most recent from the end, instead
2015-03-09 17:32:21	EvanR_	chpatrick: whats the type of the operation you want
2015-03-09 17:32:25	-->	tritone (~tritone@catv-80-99-188-61.catv.broadband.hu) has joined #haskell
2015-03-09 17:32:32	Kujanator	ski: What is supposed to go in front on the if, just 'a'? I can't see what else there is to put infront of it..
2015-03-09 17:32:41	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-09 17:32:53	ski	kala : but anyway, if the table you pasted is anything to trust, the code in your original `avg' is already wrong, for two reasons
2015-03-09 17:32:53	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:32:56	<--	folone_ (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-09 17:32:59	-->	Iskarlar (~Iskarlar@195-240-81-26.ip.open.net) has joined #haskell
2015-03-09 17:33:05	<--	pata (~quassel@62.49.115.235) has quit (Quit: No Ping reply in 180 seconds.)
2015-03-09 17:33:09	-->	MrScout_ (~MrScout@unaffiliated/mrscout) has joined #haskell
2015-03-09 17:33:12	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:33:19	<--	Iskarlar (~Iskarlar@195-240-81-26.ip.open.net) has quit (Read error: Connection reset by peer)
2015-03-09 17:33:25	<--	plutoniix (~plutoniix@node-1d26.pool-101-108.dynamic.totbb.net) has quit (Ping timeout: 265 seconds)
2015-03-09 17:33:36	chpatrick	EvanR: what I want is to produce (
2015-03-09 17:33:44	chpatrick	\f -> f <$> arg1 <*> arg)
2015-03-09 17:33:48	chpatrick	but without using a lambda
2015-03-09 17:33:54	-->	jacquerie (~jnotarst@pcgs2x3160h65.cern.ch) has joined #haskell
2015-03-09 17:33:56	-->	code_pod (~textual@84.241.4.93) has joined #haskell
2015-03-09 17:34:10	EvanR_	@pl \f -> f <$> arg1 <*> arg
2015-03-09 17:34:11	lambdabot	(<$> arg1 <*> arg)
2015-03-09 17:34:18	-->	Iskarlar (~Iskarlar@195-240-81-26.ip.open.net) has joined #haskell
2015-03-09 17:34:24	<--	thunderrd (~thunderrd@110.78.148.113) has quit (Ping timeout: 245 seconds)
2015-03-09 17:34:25	EvanR_	for some reason i didnt think it would be that obvious
2015-03-09 17:34:39	ski	Kujanator : .. nothing ?
2015-03-09 17:34:42	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:34:51	chpatrick	ha, nice one
2015-03-09 17:34:58	-->	darkbolt (~darkbolt@23.252.55.57) has joined #haskell
2015-03-09 17:34:58	ski	Kujanator : why would you put anything in front of it ?
2015-03-09 17:35:02	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:35:32	-->	thunderrd (~thunderrd@110.78.148.113) has joined #haskell
2015-03-09 17:35:37	ski	@type (<$> ?arg0 <*> ?arg1)
2015-03-09 17:35:37	lambdabot	    The operator ?<$>? [infixl 4] of a section
2015-03-09 17:35:37	lambdabot	        must have lower precedence than that of the operand,
2015-03-09 17:35:37	lambdabot	          namely ?<*>? [infixl 4]
2015-03-09 17:35:45	-->	phyrex1an (~phyrex1an@2a02:fe0:c121:7360:edb5:2d98:b70c:ef43) has joined #haskell
2015-03-09 17:35:49	 *	ski thinks this is silly
2015-03-09 17:35:50	<--	MrScout (~MrScout@unaffiliated/mrscout) has quit (Ping timeout: 265 seconds)
2015-03-09 17:36:02	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:36:09	Kujanator	ski: So it's just 'in if a'? Was reluctant to do that since it just didn't seem to make sense in English, though that is a stupid reason.
2015-03-09 17:36:15	ski	(obviously that ought to expand to `\x -> (x <$> ?arg0) <*> ?arg1')
2015-03-09 17:36:22	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:36:49	ski	Kujanator : yes, after `in' you write the expression you want to compute after performing the bindings in between the `let' and the `in'
2015-03-09 17:36:58	-->	conal (~textual@64.71.133.70) has joined #haskell
2015-03-09 17:37:28	<--	thunderrd (~thunderrd@110.78.148.113) has quit (Remote host closed the connection)
2015-03-09 17:37:35	-->	aaron8910 (~aaron8910@172-7-147-62.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2015-03-09 17:38:03	ski	Kujanator : .. you could also use `where' in your case, but then you'd have the `(a,s1) = evalA a s0' part after the `if'-expression .. which you may or may not find an unnatural reading/writing order (Haskell doesn't care)
2015-03-09 17:38:12	-->	jordanl (~jordan@unaffiliated/jordanl) has joined #haskell
2015-03-09 17:38:13	<--	AleXoundOS (~AleXoundO@ip-95-221-217-71.bb.netbynet.ru) has quit (Ping timeout: 255 seconds)
2015-03-09 17:38:34	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:38:55	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:39:08	-->	petersr (~PeterSR@87-58-53-250-static.dk.customer.tdc.net) has joined #haskell
2015-03-09 17:39:17	-->	AleXoundOS (~AleXoundO@ip-95-221-217-71.bb.netbynet.ru) has joined #haskell
2015-03-09 17:39:23	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:39:30	-->	Swizec (~swizec@BSN-77-159-184.static.siol.net) has joined #haskell
2015-03-09 17:39:34	<--	malkomalko (~malkomalk@207.251.103.46) has quit (Ping timeout: 255 seconds)
2015-03-09 17:39:42	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:40:19	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:40:25	<--	merijn (~merijn@wcw-staff-145-18-166-222.wireless.uva.nl) has quit (Ping timeout: 256 seconds)
2015-03-09 17:40:39	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:40:40	<--	vijaykiran (~user@213.208.206.28) has quit (Ping timeout: 265 seconds)
2015-03-09 17:40:44	<--	sivteck (~sivteck@unaffiliated/sivteck) has quit (Quit: You are)
2015-03-09 17:40:49	-->	thunderrd (~thunderrd@110.78.148.113) has joined #haskell
2015-03-09 17:41:08	-->	cognominal (~cognomina@87-231-91-9.rev.numericable.fr) has joined #haskell
2015-03-09 17:41:13	-->	jomg (~johannes@95.90.212.140) has joined #haskell
2015-03-09 17:41:18	Kujanator	ski: It's not compiling as there's a parse error on on "else", which from what I've just googled seems to be down to the structure but I can't see what's wrong with mine 
2015-03-09 17:41:20	Kujanator	evalB (a :||: b) s0 = let (s1, a) = evalA a s0 in if a else let (s2, b) = evalA b s0 in if b
2015-03-09 17:41:32	<--	darkbolt (~darkbolt@23.252.55.57) has quit (Ping timeout: 264 seconds)
2015-03-09 17:41:33	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2015-03-09 17:41:58	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:42:08	geekosaur	Kujanator, weren't you already rold that "if a else" is not legal? and what is "in if b"? if then.. .what?
2015-03-09 17:42:17	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:42:19	<--	aaron8910 (~aaron8910@172-7-147-62.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 250 seconds)
2015-03-09 17:42:22	geekosaur	I have no idea what you think "if" is...
2015-03-09 17:42:37	geekosaur	or why you would think "if a else" makes any sense
2015-03-09 17:42:41	<--	rhllor (~rhllor@190.4.5.30) has quit (Quit: rhllor)
2015-03-09 17:42:55	chpatrick	EvanR: does that actually make any sense though? the f goes to deepest position inside the brackets
2015-03-09 17:43:02	-->	muzzle (~Adium@mnch-4d046503.pool.mediaWays.net) has joined #haskell
2015-03-09 17:43:05	<--	Luke (~Luke@unaffiliated/luke) has quit (Quit: part)
2015-03-09 17:43:08	chpatrick	I thought sections partially applied the outermost operator
2015-03-09 17:43:18	-->	rhllor (~rhllor@190.4.5.30) has joined #haskell
2015-03-09 17:43:22	-->	yamadapc (~yamadapc@189.38.172.216) has joined #haskell
2015-03-09 17:43:22	Zemyla	Hmm, does circular programming work with stream transformers? Because it does work with build/foldr.
2015-03-09 17:43:29	EvanR_	chpatrick: i didnt know you could write it like that, or even if you can despite @pl
2015-03-09 17:43:30	chpatrick	@pl \f -> f <$> arg1 <*> arg2 <*> arg3
2015-03-09 17:43:30	lambdabot	(<$> arg1 <*> arg2 <*> arg3)
2015-03-09 17:43:34	<--	raichoo (~raichoo@mue-88-130-33-240.dsl.tropolys.de) has quit (Ping timeout: 245 seconds)
2015-03-09 17:43:35	ski	Kujanator : as geekosaur is saying, you're still missing a `then ...' branch for your `if'
2015-03-09 17:43:39	chpatrick	I think it's incorrect
2015-03-09 17:43:49	chpatrick	pl just doesn't do operators
2015-03-09 17:43:54	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:44:00	<--	mkaesz (~mkaesz@tmo-106-116.customers.d1-online.com) has quit (Ping timeout: 246 seconds)
2015-03-09 17:44:01	<--	free_beard (~mircea@unaffiliated/free-beard/x-6152516) has quit (Quit: Leaving.)
2015-03-09 17:44:06	-->	jdnavarro (~danny@137.Red-81-35-137.dynamicIP.rima-tde.net) has joined #haskell
2015-03-09 17:44:13	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:44:28	EvanR_	chpatrick: if you want it to work for arbitrary number of <*>'s, then what is the type?
2015-03-09 17:44:33	chpatrick	@pl \f -> ap (ap (fmap f arg1) arg2) arg3
2015-03-09 17:44:33	lambdabot	(`ap` arg3) . (`ap` arg2) . flip fmap arg1
2015-03-09 17:44:53	chpatrick	hey that's progress
2015-03-09 17:44:57	chpatrick	I can flip that around with CPS right?
2015-03-09 17:45:11	ski	Kujanator : if you're confused what to change, you might try : putting everything after the first `in' there in a comment on another line, and then write what you want after the `in' from scratch
2015-03-09 17:45:19	-->	zenith_ (~zenith@142.150.23.90) has joined #haskell
2015-03-09 17:45:26	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2015-03-09 17:45:30	<--	bam365 (~blake@23-29-39-194.static.kc.surewest.net) has quit (Ping timeout: 265 seconds)
2015-03-09 17:45:40	<--	ldbrandy (~Adium@2620:10d:c082:1055:4e8d:79ff:fef3:e5c0) has quit (Quit: Leaving.)
2015-03-09 17:45:40	<--	djbeau (~djbeau@inet-hqmc05-o.oracle.com) has quit (Remote host closed the connection)
2015-03-09 17:45:40	<--	jetho (~jens@191.242.128.209) has quit (Quit: WeeChat 1.0.1)
2015-03-09 17:45:40	ski	chpatrick : "I thought sections partially applied the outermost operator" -- they do. i think it's a silly restriction
2015-03-09 17:45:59	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:46:00	<--	folone (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-09 17:46:06	-->	djbeau (~djbeau@inet-hqmc05-o.oracle.com) has joined #haskell
2015-03-09 17:46:10	-->	ldbrandy (~Adium@2620:10d:c082:1055:4e8d:79ff:fef3:e5c0) has joined #haskell
2015-03-09 17:46:18	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:46:53	<--	caumeslasal (~Thunderbi@78.194.128.236) has quit (Quit: caumeslasal)
2015-03-09 17:47:30	<--	Takle (~takle@62.254.166.26) has quit (Remote host closed the connection)
2015-03-09 17:47:38	-->	ksf (~ksf@d066203.adsl.hansenet.de) has joined #haskell
2015-03-09 17:47:41	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:47:53	<--	mathk (~mathieu@mail1.vantek.eu) has quit (Ping timeout: 240 seconds)
2015-03-09 17:48:00	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Remote host closed the connection)
2015-03-09 17:48:00	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:48:15	-->	mkaesz (~mkaesz@tmo-106-116.customers.d1-online.com) has joined #haskell
2015-03-09 17:48:24	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 265 seconds)
2015-03-09 17:48:30	<--	dedgrant_ (~dedgrant@199-116-243-67.dyn.novuscom.net) has quit (Ping timeout: 246 seconds)
2015-03-09 17:48:38	-->	Kron (~Kron@dhcp-148-67.aauc-students.carleton.ca) has joined #haskell
2015-03-09 17:49:05	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:49:14	<--	lsix (~lsix@i16-lef02-th2-89-83-131-44.ft.lns.abo.bbox.fr) has quit (Quit: Konversation terminated!)
2015-03-09 17:49:20	Kujanator	ski: Ah, I see what you're saying. What does this look like:
2015-03-09 17:49:21	Kujanator	evalB (a :||: b) s0 = let (s1, a) = evalA a s0 in if a then (s1, a)                   else let (s2, b) = evalA b s0 in if b then (s1, b)
2015-03-09 17:49:25	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:49:42	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 17:49:53	-->	Guest45954 (~phil@ppp-113-19.26-151.libero.it) has joined #haskell
2015-03-09 17:49:56	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 17:51:16	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 17:51:23	<--	ddellacosta (~ddellacos@softbank126114212003.bbtec.net) has quit (Remote host closed the connection)
2015-03-09 17:51:39	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:51:41	Zemyla	Why is if' not in Prelude?
2015-03-09 17:51:49	geekosaur	you need an else to go with that final if
2015-03-09 17:51:50	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 17:51:51	-->	ddellacosta (~ddellacos@softbank126114212003.bbtec.net) has joined #haskell
2015-03-09 17:51:56	EvanR_	:t if'
2015-03-09 17:51:57	lambdabot	    Not in scope: ?if'?
2015-03-09 17:51:57	lambdabot	    Perhaps you meant ?f'? (imported from Debug.SimpleReflect)
2015-03-09 17:51:58	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:52:04	geekosaur	what should the value be if b is false?
2015-03-09 17:52:04	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 17:52:07	EvanR_	:t bool
2015-03-09 17:52:08	lambdabot	a -> a -> Bool -> a
2015-03-09 17:52:12	-->	Joker_ (~Detlev@2a02:1812:170c:d700:6174:64b1:44cf:ec75) has joined #haskell
2015-03-09 17:52:14	-->	ZioCrocifisso (~ZioCrocif@151.74.17.161) has joined #haskell
2015-03-09 17:52:22	-->	Takle (~takle@62.254.166.26) has joined #haskell
2015-03-09 17:52:44	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:53:01	-->	OnlyForF1 (~OnlyForF1@14-201-129-55.static.tpgi.com.au) has joined #haskell
2015-03-09 17:53:04	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:53:12	<--	flounders (~swilliams@h62.250.186.173.static.ip.windstream.net) has quit (Quit: Konversation terminated!)
2015-03-09 17:53:14	<--	joaopizani (~weechat@brouwer.cs.uu.nl) has quit (Quit: WeeChat 1.2-dev)
2015-03-09 17:53:27	-->	flounders (~swilliams@h62.250.186.173.static.ip.windstream.net) has joined #haskell
2015-03-09 17:53:48	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:54:09	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:54:12	quchen	Is the term "profunctor" an artificial word, or does it have any roots in math?
2015-03-09 17:54:24	<--	canisMajoris (~canisMajo@78.189.143.72) has quit (Ping timeout: 245 seconds)
2015-03-09 17:54:32	-->	ps-auxw (~arneb@p57B37F0D.dip0.t-ipconnect.de) has joined #haskell
2015-03-09 17:54:34	Zemyla	@let if' b t f = if b then t else f
2015-03-09 17:54:36	lambdabot	 Defined.
2015-03-09 17:54:50	<--	Swizec (~swizec@BSN-77-159-184.static.siol.net) has quit (Quit: Computer has gone to sleep.)
2015-03-09 17:55:01	quchen	Oh, Wikipedia started loading. Nevermind. (Slow servers today, eh?)
2015-03-09 17:55:08	-->	pouledodue (~textual@modemcable082.140-131-66.mc.videotron.ca) has joined #haskell
2015-03-09 17:55:10	jtanguy	Zemyla: because if-then-else is a language construct, not defined in a library
2015-03-09 17:55:32	levi	quchen: I follow your meaning, but your usage of 'artificial word' there makes me chuckle. I dunno the answer, though.
2015-03-09 17:55:39	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Ping timeout: 245 seconds)
2015-03-09 17:55:41	EvanR_	> bool 1 0 False
2015-03-09 17:55:42	lambdabot	 1
2015-03-09 17:55:46	ab9rf	are there natural words?
2015-03-09 17:55:48	EvanR_	Zemyla: this version is easier to partial
2015-03-09 17:55:55	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:56:14	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:56:15	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-09 17:56:23	-->	Hijiri (~oneechan@128.54.7.130) has joined #haskell
2015-03-09 17:56:25	<--	Hijiri (~oneechan@128.54.7.130) has quit (Client Quit)
2015-03-09 17:56:36	-->	Hijiri (~oneechan@128.54.7.130) has joined #haskell
2015-03-09 17:56:37	<--	ddellacosta (~ddellacos@softbank126114212003.bbtec.net) has quit (Ping timeout: 250 seconds)
2015-03-09 17:56:43	Zemyla	jtanguy, EvanR_: Actually, if' b = if b then const else flip const could work better.
2015-03-09 17:56:56	-->	watabou (~watabou@unaffiliated/watabou) has joined #haskell
2015-03-09 17:57:04	EvanR_	eh why
2015-03-09 17:57:10	-->	jamiely_ (8f702004@gateway/web/freenode/ip.143.112.32.4) has joined #haskell
2015-03-09 17:57:29	-->	rj-code (rj-code@2a01:7e00::f03c:91ff:fe33:6781) has joined #haskell
2015-03-09 17:57:29	<--	ldbrandy (~Adium@2620:10d:c082:1055:4e8d:79ff:fef3:e5c0) has quit (Read error: Connection reset by peer)
2015-03-09 17:57:34	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:57:37	<--	cognominal (~cognomina@87-231-91-9.rev.numericable.fr) has quit (Quit: This computer has gone to sleep)
2015-03-09 17:57:39	levi	I assume in this context 'artificial word' means 'made up by Haskell programmers' rather than 'made up by and in somewhat general use by some faction of mathematicians'.
2015-03-09 17:57:41	<--	mkaesz (~mkaesz@tmo-106-116.customers.d1-online.com) has quit (Remote host closed the connection)
2015-03-09 17:57:46	-->	mystor (~mystor@d67-193-97-66.home3.cgocable.net) has joined #haskell
2015-03-09 17:57:53	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 17:57:57	<--	watabou (~watabou@unaffiliated/watabou) has left #haskell
2015-03-09 17:57:58	<--	MrScout_ (~MrScout@unaffiliated/mrscout) has quit (Remote host closed the connection)
2015-03-09 17:58:05	ab9rf	because when mathematicians make something up, that's perfectly natural :)
2015-03-09 17:58:06	EvanR_	artificial = made by man, i.e. nothing as far as we know
2015-03-09 17:58:08	-->	mkaesz (~mkaesz@tmo-106-116.customers.d1-online.com) has joined #haskell
2015-03-09 17:58:21	-->	ldbrandy (~Adium@2620:10d:c082:1055:4e8d:79ff:fef3:e5c0) has joined #haskell
2015-03-09 17:58:34	-->	MrScout (~MrScout@unaffiliated/mrscout) has joined #haskell
2015-03-09 17:58:57	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 17:58:58	<--	jvilla (~jvilla@186.101.153.165) has quit (Quit: Be back later ...)
2015-03-09 17:59:00	<--	ldbrandy (~Adium@2620:10d:c082:1055:4e8d:79ff:fef3:e5c0) has quit (Client Quit)
2015-03-09 17:59:00	<--	MrScout (~MrScout@unaffiliated/mrscout) has quit (Read error: Connection reset by peer)
2015-03-09 17:59:03	EvanR_	god made the integers, so i guess that would make them supernaturals
2015-03-09 17:59:03	-->	tommd (~tommd@2001:4870:e08e:201:6267:20ff:fead:eb30) has joined #haskell
2015-03-09 17:59:08	Kujanator	geekosaur: The value should be false if b is false. This might be a really stupid question but how do I return a state and a false boolean?
2015-03-09 17:59:13	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 17:59:21	<--	flounders (~swilliams@h62.250.186.173.static.ip.windstream.net) has quit (Read error: No route to host)
2015-03-09 17:59:24	-->	MrScout (~MrScout@unaffiliated/mrscout) has joined #haskell
2015-03-09 17:59:26	-->	jvilla (~jvilla@186.101.153.165) has joined #haskell
2015-03-09 17:59:28	-->	ldbrandy (~Adium@2620:10d:c082:1055:4e8d:79ff:fef3:e5c0) has joined #haskell
2015-03-09 17:59:30	--	StoneCyp1er is now known as StoneCypherAW
2015-03-09 17:59:32	ab9rf	EvanR_: god made the natural numbers, not the integers :)
2015-03-09 17:59:34	-->	flounders (~swilliams@h62.250.186.173.static.ip.windstream.net) has joined #haskell
2015-03-09 17:59:39	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 17:59:40	EvanR_	gah
2015-03-09 17:59:49	monochrom	God made the supernatural numbers. There.
2015-03-09 17:59:58	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:00:00	Kujanator	geekousar: Like I understand that it should be false, but not what to return.
2015-03-09 18:00:09	ab9rf	monochrom: which ones?  there are several different things that are known as "supernatural numbers"
2015-03-09 18:00:31	<--	Rryy (~rryy@natvip44.york.ac.uk) has quit (Remote host closed the connection)
2015-03-09 18:00:40	-->	kadoban (~mud@ip68-3-81-129.ph.ph.cox.net) has joined #haskell
2015-03-09 18:00:41	levi	quchen: This might help answer your question? http://ncatlab.org/nlab/show/profunctor
2015-03-09 18:00:46	geekosaur	Kujanator, so you were expecting "if b then (s1,b)" to be the same as "if b then (s1,b) else b"? that does not typecheck
2015-03-09 18:00:48	silver	as well as number of gods
2015-03-09 18:00:50	juanpablo_	Should I use EitherT or ErrorT?
2015-03-09 18:00:52	Zemyla	EvanR_: Because it shows better that True truly is const and False truly is const id.
2015-03-09 18:00:54	<--	MrScout (~MrScout@unaffiliated/mrscout) has quit (Read error: No route to host)
2015-03-09 18:00:56	<--	martintrojer (~martintro@cpc5-bmly8-2-0-cust9.2-3.cable.virginm.net) has quit (Max SendQ exceeded)
2015-03-09 18:00:57	-->	besenwesen (~bw@f049235145.adsl.alicedsl.de) has joined #haskell
2015-03-09 18:01:07	ab9rf	you can't have something that returns a variable type
2015-03-09 18:01:09	-->	amar (~amar@49.248.206.134) has joined #haskell
2015-03-09 18:01:28	<--	litherum (~Adium@2620:149:f01:204:6959:518f:4d5b:4d1a) has quit (Quit: Leaving.)
2015-03-09 18:01:28	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:01:29	EvanR_	Zemyla: truly?
2015-03-09 18:01:32	--	amar is now known as Guest456
2015-03-09 18:01:34	-->	MrScout (~MrScout@unaffiliated/mrscout) has joined #haskell
2015-03-09 18:01:38	-->	N2017 (~N2107@c-50-189-37-160.hsd1.ma.comcast.net) has joined #haskell
2015-03-09 18:01:44	monochrom	it was a joke, ab9rf
2015-03-09 18:01:47	quchen	levi: I just had connectivity problems, now I've found multiple sources. But thanks!
2015-03-09 18:01:47	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:02:01	-->	kaidelong (~kaidelong@c-73-11-13-223.hsd1.or.comcast.net) has joined #haskell
2015-03-09 18:02:02	<--	ldbrandy (~Adium@2620:10d:c082:1055:4e8d:79ff:fef3:e5c0) has quit (Client Quit)
2015-03-09 18:02:04	-->	martintrojer (~martintro@cpc5-bmly8-2-0-cust9.2-3.cable.virginm.net) has joined #haskell
2015-03-09 18:02:19	levi	nLab is my go-to source for determining if some word has connection to category theory, even though I can't understand most of what I read there.
2015-03-09 18:02:21	<--	mmh (~mmh@ipbcc11248.dynamic.kabel-deutschland.de) has quit (Quit: WeeChat 1.1.1)
2015-03-09 18:02:22	<--	mkaesz (~mkaesz@tmo-106-116.customers.d1-online.com) has quit (Ping timeout: 256 seconds)
2015-03-09 18:02:28	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:02:47	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:02:53	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2015-03-09 18:03:18	ab9rf	i jkust assume that every word i encounter is connected in some way to category theory
2015-03-09 18:03:25	ab9rf	so far this assumption has not done me wrong
2015-03-09 18:03:36	<--	jvilla (~jvilla@186.101.153.165) has quit (Ping timeout: 246 seconds)
2015-03-09 18:03:38	-->	Swizec (~swizec@BSN-77-159-184.static.siol.net) has joined #haskell
2015-03-09 18:03:39	<--	oish (~charlie@81.130.206.144) has quit (Remote host closed the connection)
2015-03-09 18:03:54	quchen	levi: Sounds pretty good actually.
2015-03-09 18:03:58	-->	gsingh93 (~gulshan@c-76-112-57-222.hsd1.mi.comcast.net) has joined #haskell
2015-03-09 18:04:03	-->	L8D (~L8D@99-156-81-153.lightspeed.austtx.sbcglobal.net) has joined #haskell
2015-03-09 18:04:08	Kujanator	geekosaur, sorry I don't understand what you're saying. Is there stuff wrong with evalB (a :||: b) s0 = let (s1, a) = evalA a s0 in if a then (s0, a)                        else let (s2, b) = evalA b s0 in if b then (s0, b) else                    besides the fact I haven't finished the final else statement?
2015-03-09 18:04:31	<--	kala (73727d42@gateway/web/freenode/ip.115.114.125.66) has quit (Quit: Page closed)
2015-03-09 18:04:33	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:04:52	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:05:04	<--	MrScout (~MrScout@unaffiliated/mrscout) has quit (Client Quit)
2015-03-09 18:05:13	-->	ldbrandy (~Adium@199.201.64.132) has joined #haskell
2015-03-09 18:05:26	geekosaur	well, you need to finish it somehow. your original one ended with "... in if b then (s0, b)". and I ddi not understand your followon question
2015-03-09 18:05:37	-->	senoj (~senoj@pdx.galois.com) has joined #haskell
2015-03-09 18:06:08	levi	ab9rf: Actually, there are a bunch of terms in common use in Haskell that *sound* category-theoryish but aren't.  Like the fancy recursion scheme names, e.g. catamorphism, anamorphisms, zygohistomorphic prepromorphisms.
2015-03-09 18:06:18	<--	N2017 (~N2107@c-50-189-37-160.hsd1.ma.comcast.net) has quit (Ping timeout: 265 seconds)
2015-03-09 18:06:19	-->	jlewis (~jlewis@unaffiliated/jordanlewis) has joined #haskell
2015-03-09 18:06:34	ab9rf	"zygohistomorphic" sounds anatomical
2015-03-09 18:06:37	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:06:41	-->	ndrei (~avo@vol75-10-82-244-224-107.fbx.proxad.net) has joined #haskell
2015-03-09 18:06:46	<--	chpatrick (chilton@nat/google/x-ulvensqjcpslyyft) has quit (Ping timeout: 265 seconds)
2015-03-09 18:06:49	-->	MrScout (~MrScout@unaffiliated/mrscout) has joined #haskell
2015-03-09 18:06:56	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:07:00	<--	jo__ (uid41683@gateway/web/irccloud.com/x-evsdwqceqrpevbdb) has quit (Quit: Connection closed for inactivity)
2015-03-09 18:07:26	Zemyla	EvanR_: Truly
2015-03-09 18:07:39	Zemyla	There is an isomorphism between them.
2015-03-09 18:07:44	 *	hackagebot hlibBladeRF 0.1.0.5 - Haskell binding to libBladeRF SDR library  http://hackage.haskell.org/package/hlibBladeRF-0.1.0.5 (eocallaghan)
2015-03-09 18:07:57	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:07:57	-->	fujimura (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has joined #haskell
2015-03-09 18:08:10	-->	nomeata (~jojo@nomeata.de) has joined #haskell
2015-03-09 18:08:10	EvanR_	there is an isomorphism doesnt mean one of the things is the true form, thats the point of the isomorphism to reveal that either is good enough
2015-03-09 18:08:16	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:08:20	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 18:08:35	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 18:08:45	<--	L8D (~L8D@99-156-81-153.lightspeed.austtx.sbcglobal.net) has quit (Ping timeout: 250 seconds)
2015-03-09 18:09:11	-->	Ryanar (Ryan@acd413024303542.wireless.rit.edu) has joined #haskell
2015-03-09 18:09:30	<--	TheLemonMan (~lemonboy@unaffiliated/thelemonman) has quit (Quit: leaving)
2015-03-09 18:09:32	<--	Takle (~takle@62.254.166.26) has quit (Remote host closed the connection)
2015-03-09 18:09:34	<--	nerium (~linus@dhcp-184036.eduroam.chalmers.se) has quit (Quit: nerium)
2015-03-09 18:09:59	Zemyla	Well, in the pure lambda calculus, const and const id are the true forms of the booleans.
2015-03-09 18:09:59	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:10:04	EvanR_	i.e. why would Either () () not be the true form
2015-03-09 18:10:12	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 18:10:18	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:10:23	EvanR_	true form != implementation detail
2015-03-09 18:10:26	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 18:10:34	<--	yamadapc (~yamadapc@189.38.172.216) has quit (Read error: Connection reset by peer)
2015-03-09 18:10:37	<--	Hijiri (~oneechan@128.54.7.130) has quit (Ping timeout: 252 seconds)
2015-03-09 18:10:54	Kujanator	geekosaur: Problem is i'm not sure how to finish it. Am I correct in saying it will only get to the final else statement if a and b are both false. In which case I need to return false? But I don't know how to do that.
2015-03-09 18:11:01	<--	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has quit (Remote host closed the connection)
2015-03-09 18:11:05	<--	thevishy (~thevishy@111.93.187.34) has quit (Ping timeout: 255 seconds)
2015-03-09 18:11:07	<--	athan (~quassel@209.181.64.217) has quit (Ping timeout: 244 seconds)
2015-03-09 18:11:12	-->	yamadapc (~yamadapc@189.38.172.216) has joined #haskell
2015-03-09 18:11:12	-->	sritchie (~sritchie@c-76-120-77-248.hsd1.co.comcast.net) has joined #haskell
2015-03-09 18:11:18	geekosaur	you need to return something that looks like (s,False)
2015-03-09 18:11:22	juanpablo_	Is first and second from Data.Bifunctor the same as first and second from Control.Arrow?
2015-03-09 18:11:32	<--	edon (~user@laptop-147-210-129-49.labri.fr) has quit (Ping timeout: 255 seconds)
2015-03-09 18:11:38	quchen	juanpablo_: No, they're different things.
2015-03-09 18:11:47	geekosaur	because the others are going to be (s,True)
2015-03-09 18:11:57	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:12:04	<--	ghostpl_ (~ghostpl@85.232.253.2) has quit (Remote host closed the connection)
2015-03-09 18:12:08	<--	arj (~arj@makaala.informatik.uni-freiburg.de) has quit (Quit: Leaving.)
2015-03-09 18:12:16	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:12:35	<--	fujimura (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has quit (Ping timeout: 265 seconds)
2015-03-09 18:12:44	juanpablo_	Can we define bimap in terms of second and firt from Control.Arrow?
2015-03-09 18:12:45	 *	hackagebot propellor 2.2.0 - property-based host configuration management in haskell  http://hackage.haskell.org/package/propellor-2.2.0 (JoeyHess)
2015-03-09 18:12:49	Kujanator	geekosaur, Can I return (s, b) since if it gets to the else bit then it means b will have to have been false so (s,b) is false?
2015-03-09 18:13:22	<--	flounders (~swilliams@h62.250.186.173.static.ip.windstream.net) has quit (Ping timeout: 272 seconds)
2015-03-09 18:13:22	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:13:30	<--	JusticeFries (~textual@c-107-2-139-89.hsd1.co.comcast.net) has left #haskell ("Textual IRC Client: www.textualapp.com")
2015-03-09 18:13:31	-->	aaron8910 (~aaron8910@70-35-57-149.static.wiline.com) has joined #haskell
2015-03-09 18:13:37	geekosaur	sure
2015-03-09 18:13:41	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:13:51	geekosaur	what you can't do is leave off the state part
2015-03-09 18:14:13	geekosaur	in that case, though, you have `if b then (s,b) else (s,b)` which is the same as just `(s,b)`
2015-03-09 18:14:13	<--	joelwilliamson (~joel@198-91-200-111.cpe.distributel.net) has quit (Ping timeout: 264 seconds)
2015-03-09 18:14:17	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:14:22	quchen	juanpablo_: No. The "first"s coincide for the (->) arrow and the (,) Bifunctor, but that's about it.
2015-03-09 18:14:35	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:14:38	<--	cdk (~cdk@192-0-128-211.cpe.teksavvy.com) has quit (Ping timeout: 272 seconds)
2015-03-09 18:14:42	<--	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has quit (Remote host closed the connection)
2015-03-09 18:14:58	-->	mankaev (~mankaev@2a02:2168:18c0:3400:257e:d8d3:9c74:b1a6) has joined #haskell
2015-03-09 18:15:02	quchen	juanpablo_: Arrow abstracts over function application, Bifunctor abstracts over the data constructor operated on.
2015-03-09 18:15:06	juanpablo_	quchen: sucks. I wished it was more than a coicindence and I didn't need to bring data.bifunctor into my dependencies
2015-03-09 18:15:32	-->	Zeitgeist_ (~mkn@unaffiliated/damiel) has joined #haskell
2015-03-09 18:15:48	-->	bg46z (~ztb@swarm.biophysics.fsu.edu) has joined #haskell
2015-03-09 18:16:08	phadej	osa1: to answer you question. You can install dependencies by hand (cabal install; cabal install QuickCheck-2.7.6 template-haskell-2.9.0.0; cabal configure --enable-tests) for pretty 1.1.2.1
2015-03-09 18:16:28	phadej	seems that osa1 is not here anymore, but if they come back, some one could pass the info
2015-03-09 18:16:29	<--	j201 (~j201@unaffiliated/j201) has quit (Ping timeout: 245 seconds)
2015-03-09 18:16:35	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:16:51	NemesisD	hey folks. i need a constructor with a constraint on it. the way i see it i can use existential quantification and do data A = forall a. (Constraint a) => A a, or GADTs: data A where A :: (Constraint a) => a -> A, is there any advantages/disadvantages for one over the other?
2015-03-09 18:16:54	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:16:57	quchen	juanpablo_: Yes, the dependency footprint of those libraries is usually quite large, and not worth it if you don't get serious mileage out of them.
2015-03-09 18:16:59	-->	osa1 (~omer@149.160.246.94) has joined #haskell
2015-03-09 18:17:23	NemesisD	and second question, am i correct that there's no way to be able to use a newtype here without exposing a type parameter?
2015-03-09 18:17:35	<--	Joker_ (~Detlev@2a02:1812:170c:d700:6174:64b1:44cf:ec75) has quit (Quit: Leaving)
2015-03-09 18:17:36	Kujanator	geekosaur, I've changed it to (s, False)
2015-03-09 18:17:43	-->	Ranis (~srd@31.13.128.158) has joined #haskell
2015-03-09 18:17:56	-->	Joker_ (~Detlev@2a02:1812:170c:d700:6174:64b1:44cf:ec75) has joined #haskell
2015-03-09 18:18:03	<--	Ranis (~srd@31.13.128.158) has quit (Max SendQ exceeded)
2015-03-09 18:18:25	geekosaur	that doesn't answer my point...
2015-03-09 18:18:36	geekosaur	since b is known to be False at that point, there's no difference.
2015-03-09 18:18:38	-->	desophos (~desophos@2602:306:ccd9:8d80:45c6:79b4:a1fe:5cd) has joined #haskell
2015-03-09 18:18:58	geekosaur	my point is, what is the point of testing b if you're returning what amounts to (s,b) in both cases?
2015-03-09 18:19:02	<--	kstt (~paulfrome@mal35-2-82-228-176-228.fbx.proxad.net) has quit (Ping timeout: 264 seconds)
2015-03-09 18:19:02	geekosaur	and doing nothing else?
2015-03-09 21:19:55	--	irc: disconnected from server
2015-03-10 09:56:23	-->	yoshuawuyts (~yoshuawuy@2001:981:a181:1:1513:cfe8:56c5:6cd5) has joined #haskell
2015-03-10 09:56:23	--	Topic for #haskell is "http://www.haskell.org/ | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2015-03-10 09:56:23	--	Topic set by geekosaur on Sun, 21 Dec 2014 22:35:50
2015-03-10 09:56:23	--	Channel #haskell: 1452 nicks (1 op, 0 voices, 1451 normals)
2015-03-10 09:56:23	--	URL for #haskell: http://www.haskell.org/
2015-03-10 09:56:31	Guest58471	data List a = Cons a (List a) | Nil
2015-03-10 09:56:41	--	Channel created on Sun, 26 Nov 2006 07:42:48
2015-03-10 09:56:43	Guest58471	Nil == Nil gives type error
2015-03-10 09:56:52	geekosaur	Kujanator, IRC has a fairly short line length limit, enforced by the server. what you just said chopped off at "evalB (a :&&"
2015-03-10 09:56:58	geekosaur	use shorter lines instead
2015-03-10 09:56:59	-->	twanvl (~twanvl@dhcp-077-250-086-217.chello.nl) has joined #haskell
2015-03-10 09:57:09	greeny	Guest58471: what function do want to write?
2015-03-10 09:57:11	<--	wedens (~wedens@gate.eldis.ru) has quit (Quit: WeeChat 1.1.1)
2015-03-10 09:57:13	Kujanator	geekosaur, oh ok. the code is evalB (a :&&: b) s0 = let (s1, na) = evalB a s0                        in if na then let (s2, nb) = evalB b s1 in (s2, nb)                         else 
2015-03-10 09:57:23	Kujanator	sorry about the weird spacing
2015-03-10 09:57:26	<--	hamishmack (~hamishmac@194.216.131.132) has quit (Client Quit)
2015-03-10 09:57:31	geekosaur	(that said I hope I'm not staying up much longer; only awake because my sinuses decided to explode an hour ago)
2015-03-10 09:57:36	tdammers	Guest58471: it doesn't if you implement Eq
2015-03-10 09:57:40	-->	Wizek (~Wizek_@static-5-103-135-68.seas-nve.net) has joined #haskell
2015-03-10 09:57:53	<--	acetoline (~alireza@122-57-128-164.jetstream.xtra.co.nz) has quit (Ping timeout: 255 seconds)
2015-03-10 09:58:05	-->	juanpaucar (~juanpauca@186.101.153.165) has joined #haskell
2015-03-10 09:58:10	tdammers	Guest58471: you can probably even *derive* Eq there
2015-03-10 09:58:15	-->	hamishmack (~hamishmac@194.216.131.132) has joined #haskell
2015-03-10 09:58:17	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-10 09:58:27	-->	Lethalman (~luca@89.118.249.114) has joined #haskell
2015-03-10 09:59:00	<--	orvqol (~orvqol@5ED147CA.cm-7-2b.dynamic.ziggo.nl) has left #haskell ("WeeChat 1.1.1")
2015-03-10 09:59:03	tdammers	> data List a = Cons a (List a) | Nil deriving (Eq); Nil == Nil
2015-03-10 09:59:04	lambdabot	 <hint>:1:1: parse error on input ?data?
2015-03-10 09:59:13	Guest58471	tdammers: Ah, I see
2015-03-10 09:59:14	<--	malkomalko (~malkomalk@ool-457a23b1.dyn.optonline.net) has quit (Ping timeout: 264 seconds)
2015-03-10 09:59:28	-->	acetoline (~alireza@122.58.138.222) has joined #haskell
2015-03-10 09:59:42	nilg	zyla: http://lpaste.net/124366 basically I'd like to have just one And constructor, not 3 (TVAnd, ConceptAnd and PerdicateAnd)
2015-03-10 10:00:00	<--	sinkensabe (~sinkensab@213.115.244.180) has quit (Read error: Connection reset by peer)
2015-03-10 10:00:08	-->	fumieval (~fumieval@202.214.86.172) has joined #haskell
2015-03-10 10:00:11	<--	zzmiy (~zzmiy@2a02:6b8:0:3504:e1:d6c:840d:c11e) has quit (Read error: Connection timed out)
2015-03-10 10:00:19	<--	dimday (~amcvega@gateway/vpn/privateinternetaccess/dimday) has quit (Remote host closed the connection)
2015-03-10 10:00:26	Guest58471	I just wanted to know if built in List do implement the Eq instance
2015-03-10 10:00:35	-->	zzmiy (~zzmiy@2a02:6b8:0:3504:e1:d6c:840d:c11e) has joined #haskell
2015-03-10 10:00:40	Kujanator	geekosaur, oh ok, thanks anyway
2015-03-10 10:00:48	tdammers	Guest58471: [a] is Eq iff a is Eq
2015-03-10 10:00:49	-->	balor (~aidan@194.81.199.105) has joined #haskell
2015-03-10 10:01:28	tdammers	instance Eq a => Eq [a]
2015-03-10 10:01:50	merijn	tdammers: Misuse of Eq
2015-03-10 10:01:53	merijn	eh
2015-03-10 10:01:58	merijn	misuse of iff
2015-03-10 10:02:05	merijn	[a] is Eq if a is Eq
2015-03-10 10:02:07	tdammers	merijn: really?
2015-03-10 10:02:19	<--	juanpaucar (~juanpauca@186.101.153.165) has quit (Ping timeout: 244 seconds)
2015-03-10 10:02:32	-->	x90 (~r0x@78.165.43.235) has joined #haskell
2015-03-10 10:02:36	-->	sinkensabe (~sinkensab@213.115.244.180) has joined #haskell
2015-03-10 10:02:46	tdammers	wouldn't that require OverlappingInstances or some such?
2015-03-10 10:02:47	merijn	You could make overlapping instances that don't require Eq on a
2015-03-10 10:02:49	<--	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has quit (Ping timeout: 265 seconds)
2015-03-10 10:02:50	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 10:03:09	merijn	I'm not even sure they'd need that
2015-03-10 10:03:24	<--	greeny (301418@ircbox.informatik.uni-erlangen.de) has quit (Quit: WeeChat 0.3.8)
2015-03-10 10:03:32	tdammers	I sure had ghc complain when trying to declare instances for String / [Char]
2015-03-10 10:03:35	-->	greeny (301418@ircbox.informatik.uni-erlangen.de) has joined #haskell
2015-03-10 10:03:42	nilg	I want a magical or! http://lpaste.net/124366 please help...
2015-03-10 10:03:42	merijn	Oh, it requires FlexibleInstances
2015-03-10 10:03:50	tdammers	possibly
2015-03-10 10:03:57	tdammers	let me check...
2015-03-10 10:04:14	merijn	Because you're declaring an instance without type variables
2015-03-10 10:04:40	tdammers	hmm, I did enable OverlappingInstances in string-convert
2015-03-10 10:04:50	-->	Takle (~takle@62.254.166.26) has joined #haskell
2015-03-10 10:05:09	tdammers	ah no, but that was so I could have:
2015-03-10 10:05:13	-->	acidjnk (acid@37.123.126.210) has joined #haskell
2015-03-10 10:05:13	tdammers	instance (ToString a, FromString b) => StringConvert a b where
2015-03-10 10:05:26	tdammers	as well as more specific instances for special cases
2015-03-10 10:05:42	tdammers	e.g. strict <-> lazy texts
2015-03-10 10:06:23	-->	Laney (~laney@ubuntu/member/laney) has joined #haskell
2015-03-10 10:07:32	-->	torpet (~torpet@84-115-42-228.dynamic.surfer.at) has joined #haskell
2015-03-10 10:07:46	-->	bitrust (~bitrust@37.72.202.12) has joined #haskell
2015-03-10 10:08:27	-->	marr (~ccc@159-205-179-104.adsl.inetia.pl) has joined #haskell
2015-03-10 10:08:33	<--	Guest58471 (~amar@14.140.43.50) has quit (Ping timeout: 264 seconds)
2015-03-10 10:08:45	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-10 10:09:12	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 10:09:27	-->	amar (~amar@14.140.43.50) has joined #haskell
2015-03-10 10:09:51	--	amar is now known as Guest93760
2015-03-10 10:09:52	<--	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has quit (Ping timeout: 245 seconds)
2015-03-10 10:10:28	<--	ericwa (~ericw@d199-126-128-107.abhsia.telus.net) has quit (Quit: Leaving...)
2015-03-10 10:10:52	--	sleeper_ is now known as sleeper
2015-03-10 10:11:01	-->	akegalj_ (~akegalj@78-1-158-34.adsl.net.t-com.hr) has joined #haskell
2015-03-10 10:12:39	-->	joelhe (~joelhe@5.146.209.142) has joined #haskell
2015-03-10 10:13:08	-->	rgrinberg (~rgrinberg@66.49.218.159) has joined #haskell
2015-03-10 10:13:26	<--	obcode_ (~obcode@b217.hm.vpn.lrz.de) has quit (Ping timeout: 265 seconds)
2015-03-10 10:13:27	 *	hackagebot witherable 0.1.2 - Generalization of filter and catMaybes  http://hackage.haskell.org/package/witherable-0.1.2 (FumiakiKinoshita)
2015-03-10 10:13:55	<--	folone (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-10 10:14:02	<--	akegalj (~akegalj@93-139-119-235.adsl.net.t-com.hr) has quit (Ping timeout: 245 seconds)
2015-03-10 10:14:44	-->	obcode_ (~obcode@pD9FCD4D2.dip0.t-ipconnect.de) has joined #haskell
2015-03-10 10:15:01	-->	edon (~user@albalug/edon) has joined #haskell
2015-03-10 10:15:13	-->	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has joined #haskell
2015-03-10 10:15:40	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #haskell
2015-03-10 10:16:07	<--	AfC (~andrew@ppp59-167-167-77.static.internode.on.net) has quit (Quit: Leaving.)
2015-03-10 10:16:12	-->	gabriel_laddel (~user@unaffiliated/gabriel-laddel/x-9909917) has joined #haskell
2015-03-10 10:17:07	-->	magthe (~magthe@static-213.88.173.98.addr.tdcsong.se) has joined #haskell
2015-03-10 10:17:12	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 10:17:53	<--	rgrinberg (~rgrinberg@66.49.218.159) has quit (Ping timeout: 240 seconds)
2015-03-10 10:18:58	-->	Guest4 (~textual@46.7.106.98) has joined #haskell
2015-03-10 10:19:17	-->	nickc_ (~textual@c-50-131-215-126.hsd1.ca.comcast.net) has joined #haskell
2015-03-10 10:20:05	<--	fumieval (~fumieval@202.214.86.172) has quit (Ping timeout: 246 seconds)
2015-03-10 10:20:09	<--	gabriel_laddel (~user@unaffiliated/gabriel-laddel/x-9909917) has quit (Remote host closed the connection)
2015-03-10 10:20:34	-->	michaelneale (~textual@ppp121-44-222-103.lns20.syd7.internode.on.net) has joined #haskell
2015-03-10 10:20:40	-->	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has joined #haskell
2015-03-10 10:20:51	<--	Guest93760 (~amar@14.140.43.50) has quit (Remote host closed the connection)
2015-03-10 10:21:10	-->	mjboa (~mike@p4FF43036.dip0.t-ipconnect.de) has joined #haskell
2015-03-10 10:21:15	-->	shock_one (~shock_one@93-77-143-186-ptr.volia-lviv.com) has joined #haskell
2015-03-10 10:21:16	<--	shock_one (~shock_one@93-77-143-186-ptr.volia-lviv.com) has quit (Client Quit)
2015-03-10 10:21:48	-->	zygentoma (~kvirc@kel30.kel.studentenwerk-goettingen.de) has joined #haskell
2015-03-10 10:21:57	<--	obcode_ (~obcode@pD9FCD4D2.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2015-03-10 10:22:54	-->	jeltsch (~wolfgang@85.253.141.214.cable.starman.ee) has joined #haskell
2015-03-10 10:23:07	<--	kyb3r_ (~kyb3r_@121-99-190-18.bng1.nct.orcon.net.nz) has quit (Read error: Connection reset by peer)
2015-03-10 10:23:46	<--	Kujanator (4d633e2d@gateway/web/freenode/ip.77.99.62.45) has quit (Ping timeout: 246 seconds)
2015-03-10 10:23:53	gnimmelf	quiz: I use a lot of modules that I havent added to the `.cabal`-file, how do I get them in there most automagically?
2015-03-10 10:24:50	gnimmelf	...from commandline, on Ubuntu
2015-03-10 10:25:09	--	Guest4 is now known as edsko
2015-03-10 10:25:30	quchen2	gnimmelf: I use a shell script to do that for me
2015-03-10 10:25:43	-->	SoupE (~jloos@f051149133.adsl.alicedsl.de) has joined #haskell
2015-03-10 10:25:52	yoshuawuyts	is there a solid overview of haskell/FP patterns anywhere? I know most of them are published as papers, but I can't be bothered to search for 'em.
2015-03-10 10:26:03	-->	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has joined #haskell
2015-03-10 10:26:53	quchen2	gnimmelf: find ./src | grep -E '\.hsc?$' | xargs -d"\n" cat | grep "^module" | sed 's/^module \([0-9a-zA-Z.]\+\).*/\1/' | sort
2015-03-10 10:26:55	<--	folone (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-10 10:27:14	<--	jonmorehouse (~jonmoreho@2605:e000:5ac8:6f00:6160:25ac:65e5:1274) has quit (Ping timeout: 256 seconds)
2015-03-10 10:27:14	<--	L8D (~L8D@99-156-81-153.lightspeed.austtx.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2015-03-10 10:27:28	Rembane	quchen2: Trivial! :D
2015-03-10 10:27:43	-->	fujimura (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has joined #haskell
2015-03-10 10:27:49	<--	thevishy (~thevishy@111.93.187.34) has quit (Remote host closed the connection)
2015-03-10 10:27:54	<--	sinkensabe (~sinkensab@213.115.244.180) has quit (Read error: Connection reset by peer)
2015-03-10 10:28:00	<--	daniel-s_ (~daniel-s@mu00053769.eng.monash.edu.au) has quit (Remote host closed the connection)
2015-03-10 10:28:20	-->	daniel-s_ (~daniel-s@mu00053769.eng.monash.edu.au) has joined #haskell
2015-03-10 10:28:28	Cale	I guess you could cabal init and race through the questions (giving a bogus name for the package) and then copy/paste the list of modules from the .cabal file it generates to the real one
2015-03-10 10:28:53	<--	SoupEvil (~jloos@e179205136.adsl.alicedsl.de) has quit (Ping timeout: 240 seconds)
2015-03-10 10:29:03	-->	angrygoats (~tbockman@69.194.135.252) has joined #haskell
2015-03-10 10:29:09	<--	twanvl (~twanvl@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2015-03-10 10:29:11	<--	schoppenhauer (~schoppenh@host58-2.natpool.mwn.de) has quit (Quit: Ad?)
2015-03-10 10:29:17	merijn	yoshuawuyts: Tekmo's blog has a few good ones
2015-03-10 10:29:19	-->	thevishy (~thevishy@111.93.187.34) has joined #haskell
2015-03-10 10:29:34	merijn	http://www.haskellforall.com/
2015-03-10 10:29:40	merijn	Although it doesn't appear to have an index?
2015-03-10 10:29:46	gnimmelf	quchen2: thats all my stuff listed, I think I need the "other" dependencies, like `cabal install` -> `Could not find module ?Data.Text.Encoding?`
2015-03-10 10:29:52	<--	thevishy (~thevishy@111.93.187.34) has quit (Max SendQ exceeded)
2015-03-10 10:29:59	yoshuawuyts	merijn: oooh, thanks!
2015-03-10 10:30:06	gnimmelf	..with the correct semver
2015-03-10 10:30:16	yoshuawuyts	merijn: I can plow through that, just needed a place to start :D
2015-03-10 10:30:17	-->	thevishy (~thevishy@111.93.187.34) has joined #haskell
2015-03-10 10:30:28	merijn	yoshuawuyts: Three that spring to mind are: http://www.haskellforall.com/2012/09/the-functor-design-pattern.html
2015-03-10 10:30:32	-->	petermw (~peter@ip5b430e5f.dynamic.kabel-deutschland.de) has joined #haskell
2015-03-10 10:30:32	merijn	http://www.haskellforall.com/2012/08/the-category-design-pattern.html
2015-03-10 10:30:39	merijn	And http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html
2015-03-10 10:30:47	<--	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has quit (Quit: dysinger)
2015-03-10 10:31:01	<--	yrdz (~user@unaffiliated/p-adams/x-7117614) has quit (Remote host closed the connection)
2015-03-10 10:31:12	<--	sdx23 (~sdx23@unaffiliated/sdx23) has quit (Remote host closed the connection)
2015-03-10 10:31:18	yoshuawuyts	this makes me happy, thanks! ^^
2015-03-10 10:31:19	-->	sdx23 (~sdx23@unaffiliated/sdx23) has joined #haskell
2015-03-10 10:31:35	merijn	Studying the comonad, contravariant and free packages (well, blogposts about them) would be good too
2015-03-10 10:31:48	merijn	Assuming that Monad/Applicative already make sense as a "pattern"
2015-03-10 10:31:51	<--	jiritw (~Jiri@220-130-162-20.HINET-IP.hinet.net) has quit (Quit: Leaving)
2015-03-10 10:31:53	-->	yrdz (~user@unaffiliated/p-adams/x-7117614) has joined #haskell
2015-03-10 10:31:57	<--	FreeFull (~freefull@defocus/sausage-lover) has quit (Ping timeout: 245 seconds)
2015-03-10 10:32:08	-->	sinkensabe (~sinkensab@213.115.244.180) has joined #haskell
2015-03-10 10:32:33	<--	fujimura (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has quit (Ping timeout: 264 seconds)
2015-03-10 10:32:59	-->	doodlehaus (~doodlehau@97-83-255-237.dhcp.stpt.wi.charter.com) has joined #haskell
2015-03-10 10:33:21	-->	tritone (~tritone@catv-80-99-188-184.catv.broadband.hu) has joined #haskell
2015-03-10 10:33:23	<--	angrygoats (~tbockman@69.194.135.252) has quit (Ping timeout: 240 seconds)
2015-03-10 10:33:31	-->	GoGoGarrett (~GoGoGarre@155.143.177.90) has joined #haskell
2015-03-10 10:34:02	<--	mjboa (~mike@p4FF43036.dip0.t-ipconnect.de) has quit (Ping timeout: 256 seconds)
2015-03-10 10:34:56	<--	NightRa (uid40361@gateway/web/irccloud.com/x-qtefqwpsmfilqscm) has quit (Quit: Connection closed for inactivity)
2015-03-10 10:35:42	-->	plucas (~plucas@67.131.235.220) has joined #haskell
2015-03-10 10:35:42	Cale	yoshuawuyts, merijn: I really hesitate to call things like this "patterns", when they're really just libraries. If we didn't have type classes, then perhaps monads would be a pattern (though one which would be used much less frequently, because most of the benefit that comes from recognising you have a monad comes from the library support)
2015-03-10 10:35:45	-->	halvorg (~halvor@dhcp-047078.wlan.ntnu.no) has joined #haskell
2015-03-10 10:35:54	<--	torpet (~torpet@84-115-42-228.dynamic.surfer.at) has quit (Remote host closed the connection)
2015-03-10 10:36:25	<--	halvorg (~halvor@dhcp-047078.wlan.ntnu.no) has quit (Client Quit)
2015-03-10 10:36:39	-->	Sebastien-L (~sebastien@AMontsouris-651-1-28-170.w82-123.abo.wanadoo.fr) has joined #haskell
2015-03-10 10:37:01	merijn	Cale: Sure
2015-03-10 10:37:37	<--	doodlehaus (~doodlehau@97-83-255-237.dhcp.stpt.wi.charter.com) has quit (Ping timeout: 250 seconds)
2015-03-10 10:37:39	merijn	Cale: But Tekmo's "pattern" posts are basically "how do you recognise you could slightly restructure your data to fit into class X" + "why would you want to do that"
2015-03-10 10:38:25	dario`	meta-emeta-ctrl-Mctrl-?
2015-03-10 10:38:27	merijn	I don't think monads in themselves are patterns. But it's useful to see that a slight generalisation/rejumbling of your data lets you make it a Functor/Applicative/Monad/Monoid/Comonad/whatever
2015-03-10 10:38:49	quchen2	Tekmo's patterns are about idiomatic code. In Java which certainly popularized patterns, they are about unidiomatic code.
2015-03-10 10:38:53	<--	GoGoGarrett (~GoGoGarre@155.143.177.90) has quit (Remote host closed the connection)
2015-03-10 10:39:39	Cale	Yeah, and that's often a good thing to try to do. It's good to think about what *actual* design patterns we have though, in order to speculate about future programming languages. There aren't so many which are crystal clear at the moment. The one thing I always like to link when this comes up is SPJ's talk about combinator libraries though.
2015-03-10 10:40:07	-->	perspectival (~perspecti@ip-89-176-188-50.net.upcbroadband.cz) has joined #haskell
2015-03-10 10:40:07	-->	amar (~amar@14.140.43.50) has joined #haskell
2015-03-10 10:40:17	Cale	http://ulf.wiger.net/weblog/2008/02/29/simon-peyton-jones-composing-contracts-an-adventure-in-financial-engineering/
2015-03-10 10:40:32	--	amar is now known as Guest27309
2015-03-10 10:40:50	<--	hamid_ (~nithp@unaffiliated/hamid) has quit (Ping timeout: 256 seconds)
2015-03-10 10:41:02	tdammers	well, if there is one pattern that is really common in Haskell, it has to be "(E)DSL"
2015-03-10 10:41:22	<--	qubitnerd (~neutrino@unaffiliated/electron/x-8286743) has quit (Ping timeout: 272 seconds)
2015-03-10 10:42:01	tdammers	but really, I think Haskell, more than most other languages, tends to bake patterns and abstractions into explicit things, rather than describing them as "out-of-band" conventions
2015-03-10 10:42:02	Cale	This approach to problem solving by constructing data types that encode the problem space in such a way that the solutions to problems can be built up from the solutions to their parts is I think the closest thing we have to a design pattern.
2015-03-10 10:42:05	<--	Guest27309 (~amar@14.140.43.50) has quit (Remote host closed the connection)
2015-03-10 10:42:15	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2015-03-10 10:42:40	<--	SrPx (b1132341@gateway/web/freenode/ip.177.19.35.65) has quit (Ping timeout: 246 seconds)
2015-03-10 10:42:45	<--	rzetterberg (~rzetterbe@81.25.81.47) has quit (Remote host closed the connection)
2015-03-10 10:42:58	Cale	Design patterns aren't really something you want your language to have. Ideally if you can spot something repetitive that you're doing, you can abstract that out into a library and never have to do it again.
2015-03-10 10:43:04	<--	Bhavya (~Bhavya.Ma@122.248.161.142) has quit (Quit: Quit the channel)
2015-03-10 10:43:10	Cale	(or at least save a lot of the work)
2015-03-10 10:43:15	<--	lexi-lambda (~lexi.lamb@99-48-154-58.lightspeed.cornca.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2015-03-10 10:43:37	tdammers	design patterns aren't that bad; but what people call "design patterns" are usually more like "code patterns"
2015-03-10 10:43:41	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2015-03-10 10:43:45	-->	tos-1_ (~tos-1@unaffiliated/tos-1) has joined #haskell
2015-03-10 10:43:54	<--	steamboat (~sehrlich@c-76-17-123-250.hsd1.ga.comcast.net) has quit (Quit: Leaving.)
2015-03-10 10:44:17	-->	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2015-03-10 10:44:26	-->	nilg` (~user@AAubervilliers-653-1-110-190.w86-212.abo.wanadoo.fr) has joined #haskell
2015-03-10 10:44:27	-->	sebhoss (~sebhoss@109.125.119.234.dynamic.cablesurf.de) has joined #haskell
2015-03-10 10:44:48	<--	tos-1 (~tos-1@unaffiliated/tos-1) has quit (Ping timeout: 256 seconds)
2015-03-10 10:44:51	<--	ihower (ihower@gateway/vpn/mullvad/x-untlfdunvlykvrxq) has quit (Remote host closed the connection)
2015-03-10 10:44:55	-->	tasmo1 (tasmo@gateway/vpn/mullvad/x-terkjeogbkaycaxg) has joined #haskell
2015-03-10 10:45:03	tdammers	and some of the popular design patterns are really design patterns, but implementing them in something like Java requires plenty of repetitive boilerplate code, so people tend to mistake the repetitive code for being the "pattern"
2015-03-10 10:45:21	quchen2	Cale: I don't want to use the term like that. A design pattern is a design you repeatedly find useful. That's a very nice thing to have in a language. What you don't want to have is being forced into awkward designs by your language.
2015-03-10 10:45:48	Cale	quchen2: But do you really call it a design pattern when it just means "use library X"?
2015-03-10 10:46:05	<--	michaelneale (~textual@ppp121-44-222-103.lns20.syd7.internode.on.net) has quit (Quit: Back later)
2015-03-10 10:46:18	merijn	I want to use the term pattern for patterns on how to design your libraries/APIs
2015-03-10 10:46:30	Cale	In my mind, things stop being design patterns the moment we understand them well enough to turn them into code.
2015-03-10 10:46:40	<--	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has quit (Remote host closed the connection)
2015-03-10 10:46:43	quchen2	Cale: Hmm. Let's pick pipes as an example. It's an amazing pattern built upon free monads (also a pattern) that can be packed in a library.
2015-03-10 10:46:50	Cale	(and we make our languages expressive enough for that to work)
2015-03-10 10:46:55	tdammers	again, "design pattern" != "code pattern"
2015-03-10 10:47:10	Cale	quchen2: Yeah, I wouldn't call pipes or free monads a design pattern
2015-03-10 10:47:15	tdammers	Factory, for example, is a useful design approach
2015-03-10 10:47:18	Cale	They're just libraries we can use.
2015-03-10 10:47:22	quchen2	I'd say using pipes and structuring your program to make use of them is a pattern that lets you design a program around it. It's a totally different thing than Java's "design patterns" though.
2015-03-10 10:47:30	tdammers	but if you have to type the same boilerplate code to make it happen every time, then something is wrong
2015-03-10 10:47:56	quchen2	Cale: Libraries mostly abstract over patterns as well. I really think we should use "design pattern" in the word sense.
2015-03-10 10:48:12	quchen2	But that probably won't ever happen, so your standpoint is pretty safe :-P
2015-03-10 10:48:29	 *	hackagebot keter 1.3.9 - Web application deployment manager, focusing on Haskell web frameworks  http://hackage.haskell.org/package/keter-1.3.9 (MichaelSnoyman)
2015-03-10 10:49:09	<--	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 246 seconds)
2015-03-10 10:49:20	Cale	Maybe the whole idea of using category theory to understand the structure of programs is a design pattern, though that's even more hazy than the combinator library example.
2015-03-10 10:49:33	tdammers	otoh, if you implement your "factory" as just a function that returns other functions based on the parameters it receives - then the design approach is still there, but the code pattern is reduced to "use a higher-order function"
2015-03-10 10:49:47	-->	gnimmelf_ (~gnimmelf@ti0182a400-1502.bb.online.no) has joined #haskell
2015-03-10 10:49:52	<--	gnimmelf (~gnimmelf@ti0182a400-1502.bb.online.no) has quit (Quit: Konversation terminated!)
2015-03-10 10:50:12	Cale	One day when mathematicians and programmers are finally writing in the same language, using category theory will no longer be a design pattern.
2015-03-10 10:50:47	<--	kaidelong (~kaidelong@c-73-11-13-223.hsd1.or.comcast.net) has quit (Quit: Konversation terminated!)
2015-03-10 10:51:00	Cale	Yeah, design patterns also can't be features of the language in my mind.
2015-03-10 10:51:03	<--	satori_ (~satori@222.252.81.178) has left #haskell
2015-03-10 10:51:03	<--	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has quit (Ping timeout: 250 seconds)
2015-03-10 10:51:17	tdammers	I guess that's what I'm trying to say
2015-03-10 10:51:18	Cale	It's a derisive word we use to refer to the stuff we're not good at.
2015-03-10 10:51:22	quchen2	Cale: The "anonymous function" design pattern :-D
2015-03-10 10:51:40	-->	wagle_ (~wagle@50.126.105.97) has joined #haskell
2015-03-10 10:51:55	tdammers	the way I see it, design patterns aren't bad as long as they are exactly that
2015-03-10 10:52:01	yoshuawuyts	still waiting for the "pattern designer design pattern"
2015-03-10 10:52:20	tdammers	you develop a design approach that works well on a certain class of problems, and remember it
2015-03-10 10:52:26	Cale	(but at the same time, stuff which we understand well enough that maybe we can envision a future in which those aren't patterns any more, but either part of the language or a library in it)
2015-03-10 10:52:35	-->	Lokathor_ (~Lokathor@75-167-149-201.bois.qwest.net) has joined #haskell
2015-03-10 10:52:49	-->	kstt (~paulfrome@mal35-2-82-228-176-228.fbx.proxad.net) has joined #haskell
2015-03-10 10:52:52	tdammers	maybe
2015-03-10 10:52:57	<--	wagle (~wagle@50.126.105.97) has quit (Ping timeout: 264 seconds)
2015-03-10 10:53:00	yoshuawuyts	Cale: that seems like a nice philosophy
2015-03-10 10:53:14	tdammers	but actually, many of these design patterns are already perfectly trivial and concise to write
2015-03-10 10:54:09	quchen2	Cale: We'll have to wait just a little longer until Haskell's doomed to succeed.
2015-03-10 10:54:14	<--	kcj (~kcj@unaffiliated/kcj) has quit (Read error: Connection reset by peer)
2015-03-10 10:54:44	-->	jespada (~jespada@190.246.179.220) has joined #haskell
2015-03-10 10:55:05	merijn	Cale: The languages of mathematicians is dangerously implicit and ambiguous in many cases :p
2015-03-10 10:55:14	mroman	greeny: ByteString Strict and Lazy
2015-03-10 10:55:34	mroman	but nvm fixed it.
2015-03-10 10:56:09	merijn	mroman: A more common way to abbreviate those than BS and BL (something to consider for other readers) would be BS and LBS respectively
2015-03-10 10:56:18	yoshuawuyts	Going super speculative, but I don't think Haskell will ever really go mainstream. Also don't think that's bad.
2015-03-10 10:56:26	-->	erkin (~erkin@unaffiliated/erkin) has joined #haskell
2015-03-10 10:56:33	<--	acetoline (~alireza@122.58.138.222) has quit (Ping timeout: 245 seconds)
2015-03-10 10:56:34	<--	Lokathor (~Lokathor@75-167-149-201.bois.qwest.net) has quit (Ping timeout: 272 seconds)
2015-03-10 10:56:38	Cale	Actually, thinking about it a little more, the design-pattern nature of writing combinators has been significantly lessened by languages like ML and Haskell which have algebraic data types
2015-03-10 10:57:00	Cale	Back when people were first using that pattern in scheme, it was much more of a convention
2015-03-10 10:57:13	solatis	is there any way to make 'cabal test' print out messages to stdout as they come in, not just after completing all the tests?
2015-03-10 10:57:26	-->	Gama11 (~quassel@pD9F9094B.dip0.t-ipconnect.de) has joined #haskell
2015-03-10 10:57:28	<--	govg (~govg@unaffiliated/govg) has quit (Quit: leaving)
2015-03-10 10:58:00	solatis	maybe i'll just run dist/build/test-suite/test-suite manually...
2015-03-10 10:58:25	<--	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has quit (Quit: Leaving)
2015-03-10 10:58:26	Cale	In Haskell, it's a lot more of an obvious thing to do -- define a recursive data type that describes problems in your problem domain, and then a bunch of functions which take it apart recursively to solve various aspects of those problems.
2015-03-10 10:58:36	tdammers	one could argue that do notation and comprehensions are patterns baked into syntax sugar...
2015-03-10 10:58:36	<--	boj (~bojo@i118-17-214-158.s41.a027.ap.plala.or.jp) has quit (Ping timeout: 246 seconds)
2015-03-10 10:59:01	merijn	yoshuawuyts: It's already slowly going mainstream, imo
2015-03-10 10:59:11	<--	johnchen902 (8c715ccd@gateway/web/freenode/ip.140.113.92.205) has quit (Quit: Page closed)
2015-03-10 10:59:11	merijn	yoshuawuyts: There's increasing number of big companies deploying haskell
2015-03-10 10:59:30	solatis	well, i think functional programming as a whole is becoming mainstream
2015-03-10 10:59:32	tdammers	not mainstream in the wordpress sense though... don't think anyone would want that
2015-03-10 10:59:34	-->	Kujanator (4d633e2d@gateway/web/freenode/ip.77.99.62.45) has joined #haskell
2015-03-10 10:59:37	merijn	And I expect the mandated adoption of Swift will only increase demand
2015-03-10 10:59:44	solatis	haskell becoming more mainstream is a side-effect of that
2015-03-10 10:59:44	<--	jespada (~jespada@190.246.179.220) has quit (Ping timeout: 272 seconds)
2015-03-10 10:59:51	Cale	tdammers: b...b... but clckwrks
2015-03-10 10:59:54	tdammers	it's a two-way thing
2015-03-10 11:00:00	Kujanator	Hi, would someone be able to check if my implementation of short circuit AND and OR operators is correct. Thanks. http://pastebin.com/msdnEsfZ
2015-03-10 11:00:02	yoshuawuyts	solatis: yeah, that sounds about right
2015-03-10 11:00:02	-->	pgiarrusso (~pgiarruss@141.70.14.171) has joined #haskell
2015-03-10 11:00:04	tdammers	Cale: oh, yeah.. right... :x
2015-03-10 11:00:26	tdammers	anyway, lots of concepts and approaches from haskell have made it back into mainstream programming
2015-03-10 11:00:34	solatis	i think haskell is very important in the academic sense
2015-03-10 11:00:42	solatis	yes exactly tdammers, that is what i was about to say
2015-03-10 11:00:46	merijn	Kujanator: I don't know what any of the types of those things are and the layout is pretty atrocious, tbh
2015-03-10 11:00:47	Cale	Kujanator: looks correct
2015-03-10 11:00:54	solatis	just look at concepts such as map/reduce in python
2015-03-10 11:00:58	tdammers	you can't call yourself a serious applications programming language anymore if you don't have anonymous functions these days, for example
2015-03-10 11:00:58	Cale	but yeah, fix your layout :)
2015-03-10 11:01:02	Cale	if foo
2015-03-10 11:01:05	Cale	  then bar
2015-03-10 11:01:07	Cale	  else quux
2015-03-10 11:01:14	tdammers	functional programming style has grown increasingly popular in JS
2015-03-10 11:01:31	merijn	I don't think that's my sort of FP, though
2015-03-10 11:01:34	solatis	tdammers, you mean callback hell? :)
2015-03-10 11:01:41	tdammers	solatis: haha... welp
2015-03-10 11:01:44	-->	Gama11_ (~quassel@pD9F9094B.dip0.t-ipconnect.de) has joined #haskell
2015-03-10 11:01:50	Kujanator	ahh ok, wasn't sure how formatting worked. Thanks.
2015-03-10 11:01:50	merijn	I think Swift with's it's type system and generics will do more to convince people haskell isn't scary
2015-03-10 11:01:50	solatis	but yeah agreed
2015-03-10 11:02:01	solatis	javascript -> coffeescript -> purescript
2015-03-10 11:02:08	solatis	also, scala and clojure
2015-03-10 11:02:11	solatis	and now f#
2015-03-10 11:02:12	tdammers	no, I mean how people are jumping off the "let's try to make JavaScript's OOP into Java" bandwagon
2015-03-10 11:02:25	merijn	Hell, I've already seen people come here asking "hey, my Objective-C shop is adopting swift and my haskell colleague wrote this, can someone help explain?"
2015-03-10 11:02:34	tdammers	and start going for simpler solutions that typically rely heavily on closures and higher-order functions
2015-03-10 11:02:40	merijn	Turns out it was basically parser combinators + Either monad
2015-03-10 11:02:40	solatis	merijn, haha
2015-03-10 11:02:44	solatis	merijn, that happened?
2015-03-10 11:02:50	<--	jTT_ (~jt@w180243.dynamic.ppp.asahi-net.or.jp) has quit (Quit: Leaving)
2015-03-10 11:03:01	solatis	parser combinators are hardly functional programming
2015-03-10 11:03:05	solatis	so is the either monad
2015-03-10 11:03:18	solatis	Go completely embraced the "either monad" into oblivion
2015-03-10 11:03:20	<--	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has quit (Remote host closed the connection)
2015-03-10 11:03:22	merijn	solatis: Yeah, it was like a week or so ago, blogpost on parser combinators + either
2015-03-10 11:03:25	merijn	No it didn't
2015-03-10 11:03:29	merijn	It did the opposite
2015-03-10 11:03:30	 *	hackagebot buildable 0.1.0.3 - Typeclass for builders of linear data structures  http://hackage.haskell.org/package/buildable-0.1.0.3 (IvanMiljenovic)
2015-03-10 11:03:33	<--	nilg` (~user@AAubervilliers-653-1-110-190.w86-212.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2015-03-10 11:03:34	-->	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has joined #haskell
2015-03-10 11:03:34	merijn	It requires explicit error checks
2015-03-10 11:03:37	<--	Gama11 (~quassel@pD9F9094B.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2015-03-10 11:03:38	solatis	yeah true
2015-03-10 11:03:40	Cale	I dunno, I consider parser combinator libraries a pretty good example of functional programming
2015-03-10 11:03:41	merijn	You can't short-circuit
2015-03-10 11:03:41	solatis	let me rephrase
2015-03-10 11:03:48	solatis	there is no fmap
2015-03-10 11:03:50	merijn	Which is the entire point of the either monad
2015-03-10 11:03:54	solatis	so, it is all the bad things of the Either monad
2015-03-10 11:04:00	solatis	without the good things
2015-03-10 11:04:04	<--	pgiarrusso (~pgiarruss@141.70.14.171) has quit (Client Quit)
2015-03-10 11:04:05	solatis	like Java's forced exception handling
2015-03-10 11:04:06	<--	Platyp (~Platyp@nusnet-242-40.dynip.nus.edu.sg) has quit (Ping timeout: 252 seconds)
2015-03-10 11:04:09	quchen2	Cale: After working with ANTLR for a couple of weeks now, I couldn't agree more :-P
2015-03-10 11:04:13	merijn	Cale: I meant that more of a "getting people to believe haskell isn't scary" example
2015-03-10 11:04:29	<--	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has quit (Remote host closed the connection)
2015-03-10 11:04:38	merijn	solatis: I think Java's checked exceptions are the only thing it got right
2015-03-10 11:04:49	-->	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has joined #haskell
2015-03-10 11:04:58	merijn	Trying to write exception-safe haskell I've concluded one thing: Unchecked exceptions are stupid as fuck
2015-03-10 11:04:59	<--	albel727 (~albel727@unaffiliated/albel727) has quit (Ping timeout: 252 seconds)
2015-03-10 11:05:08	tdammers	parser combinators are highly functional
2015-03-10 11:05:20	solatis	merijn, right, but now there is: ExceptT !!
2015-03-10 11:05:24	 *	solatis is being sarcastic
2015-03-10 11:05:33	merijn	solatis: That's not an alternative
2015-03-10 11:05:34	-->	juanpablo_ (~juanpablo@186.101.153.165) has joined #haskell
2015-03-10 11:05:37	solatis	i know
2015-03-10 11:05:39	tdammers	a parser is a function that takes a token stream and turns it into a parse tree traversal plus a remaining token stream
2015-03-10 11:05:42	merijn	I want throwIO exceptions, but checked
2015-03-10 11:06:03	merijn	I actually have an idea on how to implement, but don't have time. Trying to recruit a bachelor student to do it as a thesis project
2015-03-10 11:06:03	tdammers	a combinator is a function that takes n parsers and combines them into one
2015-03-10 11:06:06	tdammers	vOv
2015-03-10 11:06:06	-->	adam_hardkey_shi (~hardkey@147.127.160.10) has joined #haskell
2015-03-10 11:06:14	tdammers	if that's not functional, I don't know what it
2015-03-10 11:06:16	tdammers	*is
2015-03-10 11:06:18	merijn	So if anyone is in NL and wants to do a bachelor/masters project... ;)
2015-03-10 11:06:24	solatis	tdammers, try to look at f#'s fparsec
2015-03-10 11:06:32	solatis	it uses a mutable state
2015-03-10 11:06:36	solatis	:o
2015-03-10 11:06:43	tdammers	merijn: I'm in NL :D
2015-03-10 11:06:51	solatis	merijn, i am dutch
2015-03-10 11:07:05	tdammers	merijn: don't think I'm in a position for academic endeavors though :D
2015-03-10 11:07:15	merijn	solatis: Looking for a master/bachelor project? :p
2015-03-10 11:07:37	solatis	no, maybe 10 years ago
2015-03-10 11:07:38	solatis	:)
2015-03-10 11:07:41	merijn	Awww
2015-03-10 11:07:49	solatis	right now i have actual code to ship
2015-03-10 11:07:52	solatis	:'(
2015-03-10 11:08:18	-->	m00nlight (~m00nlight@2001:208:5:803:ed35:c104:c3c:2fee) has joined #haskell
2015-03-10 11:08:28	tdammers	solatis: consider a career switch to game programming... then maybe you'll have a ship to code instead of code to ship
2015-03-10 11:08:47	frerich	Ouch.
2015-03-10 11:08:54	<--	zygentoma (~kvirc@kel30.kel.studentenwerk-goettingen.de) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2015-03-10 11:09:09	tdammers	yeah, I know... I'll see myself out...
2015-03-10 11:09:22	<--	ellipsis_ (~ellipsis_@c-76-105-146-89.hsd1.or.comcast.net) has quit (Quit: Quit)
2015-03-10 11:09:24	-->	FMcC (~finlay@cpc9-broo7-2-0-cust237.14-2.cable.virginm.net) has joined #haskell
2015-03-10 11:09:40	-->	malkomalko (~malkomalk@ool-457a23b1.dyn.optonline.net) has joined #haskell
2015-03-10 11:09:52	<--	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has quit (Ping timeout: 272 seconds)
2015-03-10 11:10:08	-->	paradoja (~paradoja@77.231.232.91) has joined #haskell
2015-03-10 11:10:09	<--	Aquana (~azi@unaffiliated/aquana) has quit (Ping timeout: 246 seconds)
2015-03-10 11:10:18	<--	juanpablo_ (~juanpablo@186.101.153.165) has quit (Ping timeout: 256 seconds)
2015-03-10 11:10:29	gfixler	tdammers: it happens
2015-03-10 11:10:40	gfixler	I work in games, and I know a few people who've coded ships.
2015-03-10 11:11:10	tdammers	and then shipped the code
2015-03-10 11:11:14	tdammers	full circle.
2015-03-10 11:11:15	gfixler	yep
2015-03-10 11:11:56	gfixler	Nants ingonyama bagithi Baba
2015-03-10 11:12:02	-->	bru` (~bruno`@5-49-32-115.hfc.dyn.abo.bbox.fr) has joined #haskell
2015-03-10 11:12:23	-->	FreeFull (~freefull@defocus/sausage-lover) has joined #haskell
2015-03-10 11:12:28	-->	GoGoGarrett (~GoGoGarre@155.143.177.90) has joined #haskell
2015-03-10 11:12:53	-->	rzetterberg (~rzetterbe@81.25.81.47) has joined #haskell
2015-03-10 11:13:12	-->	Aquana (~azi@unaffiliated/aquana) has joined #haskell
2015-03-10 11:13:30	 *	hackagebot jailbreak-cabal 1.3 - Strip version restrictions from build dependencies in Cabal files.  http://hackage.haskell.org/package/jailbreak-cabal-1.3 (PeterSimons)
2015-03-10 11:13:52	-->	rgrinberg (~rgrinberg@66.49.218.159) has joined #haskell
2015-03-10 11:14:00	-->	pfurla (~textual@ool-4a5afeb2.dyn.optonline.net) has joined #haskell
2015-03-10 11:14:21	-->	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has joined #haskell
2015-03-10 11:14:49	<--	malkomalko (~malkomalk@ool-457a23b1.dyn.optonline.net) has quit (Ping timeout: 255 seconds)
2015-03-10 11:16:10	-->	Platyp (~Platyp@nusnet-242-40.dynip.nus.edu.sg) has joined #haskell
2015-03-10 11:17:58	<--	x90 (~r0x@78.165.43.235) has quit (Ping timeout: 255 seconds)
2015-03-10 11:18:09	<--	quchen2 (~quchen@ip-109-43-0-176.web.vodafone.de) has quit (Ping timeout: 245 seconds)
2015-03-10 11:18:17	-->	j4cknewt (~j4cknewt@c-68-53-58-107.hsd1.tn.comcast.net) has joined #haskell
2015-03-10 11:18:45	<--	rgrinberg (~rgrinberg@66.49.218.159) has quit (Ping timeout: 264 seconds)
2015-03-10 11:18:56	--	mrowe is now known as mrowe_away
2015-03-10 11:19:20	-->	davison (~davison@cpat005.wlan.net.ed.ac.uk) has joined #haskell
2015-03-10 11:19:45	-->	michael-k (~michael@HSI-KBW-046-005-021-122.hsi8.kabel-badenwuerttemberg.de) has joined #haskell
2015-03-10 11:19:57	-->	L8D (~L8D@99-156-81-153.lightspeed.austtx.sbcglobal.net) has joined #haskell
2015-03-10 11:22:49	<--	amosr (~amos@203-173-29-83.dyn.iinet.net.au) has quit (Quit: amosr)
2015-03-10 11:23:30	 *	hackagebot generic-accessors 0.1.0.1 - stringly-named getters for generic data  http://hackage.haskell.org/package/generic-accessors-0.1.0.1 (GregHorn)
2015-03-10 11:23:32	 *	hackagebot Plot-ho-matic 0.5.0.2 - Real-time line plotter for protobuf-like data  http://hackage.haskell.org/package/Plot-ho-matic-0.5.0.2 (GregHorn)
2015-03-10 11:23:34	<--	sinkensabe (~sinkensab@213.115.244.180) has quit (Read error: Connection reset by peer)
2015-03-10 11:24:03	<--	Sebastien-L (~sebastien@AMontsouris-651-1-28-170.w82-123.abo.wanadoo.fr) has quit (Ping timeout: 256 seconds)
2015-03-10 11:24:12	-->	halvorg (~halvor@dhcp-047078.wlan.ntnu.no) has joined #haskell
2015-03-10 11:24:48	-->	ghostpl_ (~ghostpl@85.232.253.2) has joined #haskell
2015-03-10 11:25:13	-->	nicolastarzia (~nicolasta@201.90.94.104) has joined #haskell
2015-03-10 11:25:47	-->	tritone_ (~tritone@catv-80-99-188-184.catv.broadband.hu) has joined #haskell
2015-03-10 11:26:53	-->	Sebastien-L (~sebastien@AMontsouris-651-1-28-170.w82-123.abo.wanadoo.fr) has joined #haskell
2015-03-10 11:27:03	-->	amar (~amar@14.140.43.50) has joined #haskell
2015-03-10 11:27:26	--	amar is now known as Guest56414
2015-03-10 11:28:02	<--	nicolastarzia (~nicolasta@201.90.94.104) has quit (Remote host closed the connection)
2015-03-10 11:28:09	-->	sinkensabe (~sinkensab@213.115.244.180) has joined #haskell
2015-03-10 11:28:18	<--	tritone (~tritone@catv-80-99-188-184.catv.broadband.hu) has quit (Ping timeout: 246 seconds)
2015-03-10 11:28:35	<--	djapo (~archie@unaffiliated/djapo) has quit (Ping timeout: 256 seconds)
2015-03-10 11:29:43	-->	skiold (~skiold@host81-135-170-37.in-addr.btopenworld.com) has joined #haskell
2015-03-10 11:29:51	<--	j4cknewt (~j4cknewt@c-68-53-58-107.hsd1.tn.comcast.net) has quit (Remote host closed the connection)
2015-03-10 11:29:52	-->	martinbmadsen (~martinbma@23-119-225-82.lightspeed.sndgca.sbcglobal.net) has joined #haskell
2015-03-10 11:29:59	-->	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has joined #haskell
2015-03-10 11:30:02	-->	NightRa (uid40361@gateway/web/irccloud.com/x-fmkqkkrxtlhmaqej) has joined #haskell
2015-03-10 11:30:11	-->	OnlyForF1 (~OnlyForF1@14-201-129-55.static.tpgi.com.au) has joined #haskell
2015-03-10 11:30:32	<--	zzmiy (~zzmiy@2a02:6b8:0:3504:e1:d6c:840d:c11e) has quit (Quit: Leaving.)
2015-03-10 11:31:22	-->	plucas_ (~plucas@72-18-233-188.static-ip.telepacific.net) has joined #haskell
2015-03-10 11:31:33	-->	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has joined #haskell
2015-03-10 11:31:46	-->	jamie_h (uid27678@gateway/web/irccloud.com/x-kaqzhpqmgmdvfgfi) has joined #haskell
2015-03-10 11:32:12	<--	babu` (~user@182.73.65.150) has quit (Ping timeout: 244 seconds)
2015-03-10 11:32:39	<--	xinming (~xinming@60.180.150.47) has quit (Ping timeout: 250 seconds)
2015-03-10 11:33:43	-->	xinming (~xinming@60.180.150.47) has joined #haskell
2015-03-10 11:33:59	<--	paradoja (~paradoja@77.231.232.91) has quit (Ping timeout: 245 seconds)
2015-03-10 11:34:15	<--	martinbmadsen (~martinbma@23-119-225-82.lightspeed.sndgca.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2015-03-10 11:34:16	<--	Guest56414 (~amar@14.140.43.50) has quit (Remote host closed the connection)
2015-03-10 11:34:57	<--	plucas (~plucas@67.131.235.220) has quit (Ping timeout: 264 seconds)
2015-03-10 11:35:08	mpickering	Does anyone remember the name of the library which added a type parameter to IO actions to specify which effects are offered?
2015-03-10 11:36:05	merijn	extensible-effects ?
2015-03-10 11:36:12	merijn	There's like a billion libraries like that
2015-03-10 11:36:17	merijn	Most aren't too fast, though
2015-03-10 11:37:25	<--	dcoutts (~duncan@unaffiliated/dcoutts) has quit (Ping timeout: 250 seconds)
2015-03-10 11:38:23	<--	L8D (~L8D@99-156-81-153.lightspeed.austtx.sbcglobal.net) has quit (Quit: Reconnecting)
2015-03-10 11:38:25	-->	ceii (~ceii@88.133.0.85.dynamic.wline.res.cust.swisscom.ch) has joined #haskell
2015-03-10 11:38:39	<--	GoGoGarrett (~GoGoGarre@155.143.177.90) has quit (Remote host closed the connection)
2015-03-10 11:38:40	-->	L8D (~L8D@99-156-81-153.lightspeed.austtx.sbcglobal.net) has joined #haskell
2015-03-10 11:38:55	<--	balor (~aidan@194.81.199.105) has quit (Ping timeout: 244 seconds)
2015-03-10 11:39:26	-->	hippity_1oppity (~stamf@124-168-135-16.dyn.iinet.net.au) has joined #haskell
2015-03-10 11:40:24	<--	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has quit (Remote host closed the connection)
2015-03-10 11:40:37	<--	Itkovian (~Itkovian@vpnf238.ugent.be) has quit (Quit: Zzzzz ...)
2015-03-10 11:40:50	mpickering	no I'm thinking of something specific to IO
2015-03-10 11:41:13	mpickering	readFile :: RIO '[ReadFile] String
2015-03-10 11:41:24	mpickering	so you know it can't access a webserver for example
2015-03-10 11:41:41	<--	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has quit (Quit: dysinger)
2015-03-10 11:42:10	<--	Kujanator (4d633e2d@gateway/web/freenode/ip.77.99.62.45) has quit (Ping timeout: 246 seconds)
2015-03-10 11:42:25	<--	hippity_hoppity (~stamf@124.170.219.121) has quit (Ping timeout: 264 seconds)
2015-03-10 11:42:26	-->	Itkovian (~Itkovian@vpnf238.ugent.be) has joined #haskell
2015-03-10 11:42:32	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 244 seconds)
2015-03-10 11:43:01	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2015-03-10 11:43:05	-->	fractalsea (~fractalse@host-78-149-127-69.as13285.net) has joined #haskell
2015-03-10 11:44:01	-->	_1126_ (~1126@elfsechsundzwanzig.io) has joined #haskell
2015-03-10 11:44:26	fractalsea	Is there a way of forking MonadIOs? I have a stack of monad transformers that I want to be avilable to both threads, e.g. a logger. Maybe what I?m thinking of is nonsensical!
2015-03-10 11:44:41	echo-area	Optimizing functions by induction is quite impressive
2015-03-10 11:46:06	-->	mitochon (~JCI@c-107-5-216-183.hsd1.mi.comcast.net) has joined #haskell
2015-03-10 11:46:09	<--	acidjnk (acid@37.123.126.210) has quit (Ping timeout: 246 seconds)
2015-03-10 11:46:22	mpickering	fractalsea: What behaviour do you expect?
2015-03-10 11:46:33	<--	daniel-s_ (~daniel-s@mu00053769.eng.monash.edu.au) has quit (Remote host closed the connection)
2015-03-10 11:46:56	-->	daniel-s_ (~daniel-s@mu00053769.eng.monash.edu.au) has joined #haskell
2015-03-10 11:46:56	-->	juanpaucar (~juanpauca@186.101.153.165) has joined #haskell
2015-03-10 11:47:23	<--	ktosiek (~quassel@main.ktosiek.com) has quit (Ping timeout: 240 seconds)
2015-03-10 11:47:33	<--	_1126 (~1126@elfsechsundzwanzig.io) has quit (Ping timeout: 264 seconds)
2015-03-10 11:47:35	<--	daniel-s_ (~daniel-s@mu00053769.eng.monash.edu.au) has quit (Remote host closed the connection)
2015-03-10 11:47:39	-->	tuia (~tuia@66.121.115.89.rev.vodafone.pt) has joined #haskell
2015-03-10 11:47:51	fractalsea	mpickering: I want to be able to log to the same logger in child threads. I am also working in ExcepT in the main thread, I would like it if the child thread has an error, it will propogate to a error type in the main thread, but I have a feeling that?s not possible
2015-03-10 11:47:59	-->	daniel-s_ (~daniel-s@mu00053769.eng.monash.edu.au) has joined #haskell
2015-03-10 11:48:07	--	_1126_ is now known as _1126
2015-03-10 11:49:00	<--	Lokathor_ (~Lokathor@75-167-149-201.bois.qwest.net) has quit (Ping timeout: 246 seconds)
2015-03-10 11:49:17	mpickering	no .. I dont think so
2015-03-10 11:50:01	mpickering	If you want to write to the same logger in child threads you can pass the MVar in explicitly
2015-03-10 11:50:15	mpickering	errors across threads you need to look at async exceptions I think but be careful
2015-03-10 11:50:17	-->	dcoutts (~duncan@cpc73848-dals21-2-0-cust610.20-2.cable.virginm.net) has joined #haskell
2015-03-10 11:50:17	<--	dcoutts (~duncan@cpc73848-dals21-2-0-cust610.20-2.cable.virginm.net) has quit (Changing host)
2015-03-10 11:50:17	-->	dcoutts (~duncan@unaffiliated/dcoutts) has joined #haskell
2015-03-10 11:50:23	<--	Boney (~paul@ppp118-209-73-80.lns20.mel4.internode.on.net) has quit (Ping timeout: 240 seconds)
2015-03-10 11:50:24	<--	mitochon (~JCI@c-107-5-216-183.hsd1.mi.comcast.net) has quit (Ping timeout: 246 seconds)
2015-03-10 11:50:27	mpickering	someone more qualified will be able to give you a more in depth anwer
2015-03-10 11:50:41	Cale	This is an excellent example of why using monad transformers over IO for things that you can already pretty much do in IO is not always the best plan.
2015-03-10 11:51:18	<--	nickc_ (~textual@c-50-131-215-126.hsd1.ca.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz?)
2015-03-10 11:51:37	-->	Boney (~paul@ppp118-209-73-80.lns20.mel4.internode.on.net) has joined #haskell
2015-03-10 11:51:50	-->	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has joined #haskell
2015-03-10 11:52:19	<--	juanpaucar (~juanpauca@186.101.153.165) has quit (Ping timeout: 245 seconds)
2015-03-10 11:52:21	-->	doodlehaus (~doodlehau@97-83-255-237.dhcp.stpt.wi.charter.com) has joined #haskell
2015-03-10 11:52:25	-->	plucas (~plucas@67.131.235.220) has joined #haskell
2015-03-10 11:52:30	-->	oish (~charlie@81.130.206.144) has joined #haskell
2015-03-10 11:52:39	<--	plucas_ (~plucas@72-18-233-188.static-ip.telepacific.net) has quit (Ping timeout: 252 seconds)
2015-03-10 11:52:55	merijn	As someone more qualified: Async exceptions are an eternal pit of misery and bugs and you're better off becoming a gardener...
2015-03-10 11:53:00	merijn	:p
2015-03-10 11:53:07	fractalsea	mpickering: Thank you
2015-03-10 11:53:36	-->	jetho (~jens@191.242.128.209) has joined #haskell
2015-03-10 11:53:54	<--	perspectival (~perspecti@ip-89-176-188-50.net.upcbroadband.cz) has quit (Quit: Leaving.)
2015-03-10 11:54:01	fractalsea	Cale: Yeah they are nice a lot of the time, but I?ve already had a lot of frustration over libraries that assume a concrete IO type.
2015-03-10 11:54:12	fractalsea	merjin: Good to know ;)
2015-03-10 11:54:12	<--	darkbolt (~darkbolt@23.252.55.57) has quit (Remote host closed the connection)
2015-03-10 11:54:39	-->	darkbolt (~darkbolt@23.252.55.57) has joined #haskell
2015-03-10 11:54:44	Cale	fractalsea: But like, in this case, it's not even really well defined what it would mean to fork an arbitrary m-action for some MonadIO m
2015-03-10 11:55:01	fractalsea	merjin: So what do you think is the best way of signalling to the main thread that something went wrong in a child?
2015-03-10 11:55:07	-->	quchen2 (~quchen@ip-109-43-2-127.web.vodafone.de) has joined #haskell
2015-03-10 11:55:26	lpaste	echo-area pasted ?Optimize by induction? at http://lpaste.net/124376
2015-03-10 11:56:04	echo-area	But I have one question.  The above is the construction in the book, the below is mine.  They are equivalent, right?
2015-03-10 11:56:15	fractalsea	Cale: Yeah I understand enough to know that I?m trying to do something that probably fundamentally doesn?t really make sense, but my understanding is still too limited to get where I?m going wrong
2015-03-10 11:56:18	merijn	fractalsea: Most sanity preserving way? Post updates/errors to a Chan/MVar that the main thread reads
2015-03-10 11:56:33	lpaste	echo-area revised ?Optimize by induction?: ?No title? at http://lpaste.net/124376
2015-03-10 11:56:41	-->	numee (~numee@unaffiliated/numee) has joined #haskell
2015-03-10 11:57:17	Cale	echo-area: Yeah, you just combined some steps
2015-03-10 11:57:21	<--	Ralith (~ralith@c-24-143-97-110.customer.broadstripe.net) has quit (Ping timeout: 250 seconds)
2015-03-10 11:57:37	-->	Ralith (~ralith@c-24-143-97-110.customer.broadstripe.net) has joined #haskell
2015-03-10 11:57:41	fractalsea	merijn: Hmm OK, makes sense
2015-03-10 11:57:44	echo-area	And I use induction from right to left instead of left to right
2015-03-10 11:57:59	echo-area	Thanks
2015-03-10 11:58:05	Cale	fractalsea: Yeah, usually the answer is "just don't let things go wrong in a way that the main thread has to care about"
2015-03-10 11:58:14	fractalsea	merjin: I?m already reading from STM, so I could just let the child thread die, and then handle an error where the main thread can?t read from the STM
2015-03-10 11:58:27	Cale	fractalsea: It really depends on why you're forking the thread in the first place.
2015-03-10 11:59:01	Cale	fractalsea: If you're forking the thread to asynchronously do something to produce a value that the main thread will need later, use the async library
2015-03-10 11:59:04	<--	darkbolt (~darkbolt@23.252.55.57) has quit (Ping timeout: 244 seconds)
2015-03-10 11:59:09	fractalsea	Cale: OK, well it?s basically a few http servers I have running to receive requests that the main thread reads from
2015-03-10 11:59:26	Cale	(which will propagate the exception to the main thread when it tries to wait for the value)
2015-03-10 11:59:36	fractalsea	Cale: Ah OK
2015-03-10 11:59:44	Cale	Yeah, that sounds like the sort of thing the async library is rather good at
2015-03-10 12:00:33	fractalsea	Thanks
2015-03-10 12:01:00	-->	larion (~larion@194.109.1.196) has joined #haskell
2015-03-10 12:01:51	-->	MoALTz_ (~no@78.11.179.104) has joined #haskell
2015-03-10 12:02:45	-->	balor (~aidan@194.81.199.106) has joined #haskell
2015-03-10 12:03:29	-->	xenog (~xenog@95.83.254.208) has joined #haskell
2015-03-10 12:03:52	-->	perspectival (~perspecti@54.21.broadband10.iol.cz) has joined #haskell
2015-03-10 12:03:54	-->	qubitnerd (~neutrino@unaffiliated/electron/x-8286743) has joined #haskell
2015-03-10 12:04:05	--	xenog is now known as Guest64996
2015-03-10 12:04:21	<--	rnons (~rnons@14.153.27.43) has quit (Quit: WeeChat 1.0)
2015-03-10 12:04:44	<--	pfurla (~textual@ool-4a5afeb2.dyn.optonline.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz?)
2015-03-10 12:04:51	<--	MoALTz (~no@78.11.179.104) has quit (Ping timeout: 256 seconds)
2015-03-10 12:06:48	<--	_1126 (~1126@elfsechsundzwanzig.io) has quit (Quit: WeeChat 1.1.1)
2015-03-10 12:07:19	-->	mizu_no_oto (~textual@50.153.149.19) has joined #haskell
2015-03-10 12:07:33	-->	_1126 (~1126@elfsechsundzwanzig.io) has joined #haskell
2015-03-10 12:10:43	-->	simukis_ (~nagisa@gk.mif.vu.lt) has joined #haskell
2015-03-10 12:11:41	-->	agjacome (~agjacome@91.172.20.95.dynamic.jazztel.es) has joined #haskell
2015-03-10 12:12:22	-->	nymacro (~kvirc@115-64-214-77.static.tpgi.com.au) has joined #haskell
2015-03-10 12:12:44	-->	zzmiy (~zzmiy@2a02:6b8:0:3504:a40e:c1b1:1e31:c857) has joined #haskell
2015-03-10 12:13:27	<--	plutoniix (~plutoniix@119.63.87.222) has quit (Quit: ???? ????)
2015-03-10 12:14:28	<--	michael-k (~michael@HSI-KBW-046-005-021-122.hsi8.kabel-badenwuerttemberg.de) has quit (Ping timeout: 272 seconds)
2015-03-10 12:15:39	-->	sRN1126 (~sRN1126@e178069164.adsl.alicedsl.de) has joined #haskell
2015-03-10 12:16:03	-->	_TAS (~quassel@a95-92-36-144.cpe.netcabo.pt) has joined #haskell
2015-03-10 12:16:13	<--	doodlehaus (~doodlehau@97-83-255-237.dhcp.stpt.wi.charter.com) has quit (Remote host closed the connection)
2015-03-10 12:16:34	-->	fujimura (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has joined #haskell
2015-03-10 12:17:11	<--	simukis_ (~nagisa@gk.mif.vu.lt) has quit (Quit: simukis_)
2015-03-10 12:17:18	-->	dgpratt (~dpratt71@pool-72-65-100-152.ptldme.east.myfairpoint.net) has joined #haskell
2015-03-10 12:17:30	-->	jespada (~jespada@190.246.179.220) has joined #haskell
2015-03-10 12:17:36	-->	acid123 (~acid@46.115.11.172) has joined #haskell
2015-03-10 12:17:48	-->	angrygoats (~tbockman@69.194.135.252) has joined #haskell
2015-03-10 12:20:04	 *	hackagebot htsn-import 0.2.4 - Import XML files from The Sports Network into an RDBMS.  http://hackage.haskell.org/package/htsn-import-0.2.4 (MichaelOrlitzky)
2015-03-10 12:20:04	-->	marchelzo_ (~marchelzo@HLFXNS016CW-142134090179.dhcp-dynamic.FibreOp.ns.bellaliant.net) has joined #haskell
2015-03-10 12:20:04	<--	insitu (~textual@221.244.69.91.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz?)
2015-03-10 12:20:08	<--	frerich (~frerich@kde/raabe) has quit (Ping timeout: 250 seconds)
2015-03-10 12:20:13	-->	kvitebjorn (~quassel@S0106c8fb264554dc.cg.shawcable.net) has joined #haskell
2015-03-10 12:20:48	<--	fujimura (~fujimura@ngn1-ppp167.tokyo.sannet.ne.jp) has quit (Ping timeout: 246 seconds)
2015-03-10 12:20:48	<--	sRN1126 (~sRN1126@e178069164.adsl.alicedsl.de) has quit (Ping timeout: 246 seconds)
2015-03-10 12:21:03	-->	frerich (~frerich@e182097133.adsl.alicedsl.de) has joined #haskell
2015-03-10 12:21:03	<--	frerich (~frerich@e182097133.adsl.alicedsl.de) has quit (Changing host)
2015-03-10 12:21:03	-->	frerich (~frerich@kde/raabe) has joined #haskell
2015-03-10 12:21:19	-->	johtso (uid563@gateway/web/irccloud.com/x-tkodhwhshooiafjm) has joined #haskell
2015-03-10 12:21:34	-->	EvanR (~evan@unaffiliated/evanr) has joined #haskell
2015-03-10 12:21:44	-->	DerisiveLogic (~smuxi@cpe-74-72-21-199.nyc.res.rr.com) has joined #haskell
2015-03-10 12:22:15	<--	angrygoats (~tbockman@69.194.135.252) has quit (Ping timeout: 246 seconds)
2015-03-10 12:22:43	<--	kvitebjorn_ (~quassel@S0106c8fb264554dc.cg.shawcable.net) has quit (Ping timeout: 252 seconds)
2015-03-10 12:23:13	<--	marchelzo_ (~marchelzo@HLFXNS016CW-142134090179.dhcp-dynamic.FibreOp.ns.bellaliant.net) has quit (Ping timeout: 255 seconds)
2015-03-10 12:24:01	-->	ketil (~ketil@117.85-200-5.bkkb.no) has joined #haskell
2015-03-10 12:25:15	-->	amyers (~icarus127@128.177.89.29) has joined #haskell
2015-03-10 12:25:24	-->	darkbolt (~darkbolt@23.252.55.57) has joined #haskell
2015-03-10 12:25:38	<--	amyers (~icarus127@128.177.89.29) has quit (Remote host closed the connection)
2015-03-10 12:25:58	<--	xacktm (xacktm@unaffiliated/xacktm) has quit
2015-03-10 12:26:00	-->	amyers (~icarus127@128.177.89.29) has joined #haskell
2015-03-10 12:26:51	-->	nomeata (~jojo@nomeata.de) has joined #haskell
2015-03-10 12:28:38	-->	yminsky (~yminsky@pool-173-68-209-237.nycmny.fios.verizon.net) has joined #haskell
2015-03-10 12:29:05	-->	zos (~zos@87.112.125.97) has joined #haskell
2015-03-10 12:29:36	<--	darkbolt (~darkbolt@23.252.55.57) has quit (Ping timeout: 246 seconds)
2015-03-10 12:31:02	<--	Takle (~takle@62.254.166.26) has quit (Remote host closed the connection)
2015-03-10 12:31:06	<--	xinming (~xinming@60.180.150.47) has quit (Ping timeout: 244 seconds)
2015-03-10 12:31:14	-->	apolune (~apolune@host-213-179-148-82.customer.m-online.net) has joined #haskell
2015-03-10 12:32:31	-->	hellertime (~hellertim@72.246.0.14) has joined #haskell
2015-03-10 12:32:41	<--	chatsiri_ (~chatsiri_@58-97-42-122.static.asianet.co.th) has quit (Ping timeout: 255 seconds)
2015-03-10 12:32:41	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2015-03-10 12:32:45	<--	zyla (~zyla@185.56.175.154) has quit (Ping timeout: 246 seconds)
2015-03-10 12:32:59	-->	xinming (~xinming@60.180.145.76) has joined #haskell
2015-03-10 12:33:01	-->	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2015-03-10 12:33:22	-->	zyla (~zyla@185.56.175.154) has joined #haskell
2015-03-10 12:33:24	<--	dgpratt (~dpratt71@pool-72-65-100-152.ptldme.east.myfairpoint.net) has quit (Ping timeout: 246 seconds)
2015-03-10 12:33:29	<--	codemiller (~codemille@unaffiliated/codemiller) has quit (Quit: Leaving)
2015-03-10 12:34:30	-->	Arognar (4fd06e6c@gateway/web/freenode/ip.79.208.110.108) has joined #haskell
2015-03-10 12:34:52	-->	tritone (~tritone@catv-80-99-188-184.catv.broadband.hu) has joined #haskell
2015-03-10 12:34:58	-->	mridul_seth (~mridul_se@178.62.224.87) has joined #haskell
2015-03-10 12:35:12	-->	plsk (~plasku@plasku.com) has joined #haskell
2015-03-10 12:36:20	-->	TheLemonMan (~lemonboy@unaffiliated/thelemonman) has joined #haskell
2015-03-10 12:36:25	-->	laudiacay_mobile (uid46610@gateway/web/irccloud.com/x-kqgszqukogtjqpvo) has joined #haskell
2015-03-10 12:36:36	<--	Arognar (4fd06e6c@gateway/web/freenode/ip.79.208.110.108) has quit (Client Quit)
2015-03-10 12:36:37	-->	qxjit (~qxjit@162.17.112.173) has joined #haskell
2015-03-10 12:37:35	<--	tritone_ (~tritone@catv-80-99-188-184.catv.broadband.hu) has quit (Ping timeout: 246 seconds)
2015-03-10 12:37:37	-->	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has joined #haskell
2015-03-10 12:37:57	<--	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 252 seconds)
2015-03-10 12:38:15	-->	Takle (~takle@62.254.166.26) has joined #haskell
2015-03-10 12:38:17	-->	jacquerie (~jnotarst@pcgs2x3160h65.cern.ch) has joined #haskell
2015-03-10 12:38:22	<--	davison (~davison@cpat005.wlan.net.ed.ac.uk) has quit (Ping timeout: 240 seconds)
2015-03-10 12:39:59	-->	doppioslash (~textual@cpc12-live24-2-0-cust192.know.cable.virginm.net) has joined #haskell
2015-03-10 12:41:35	<--	yminsky (~yminsky@pool-173-68-209-237.nycmny.fios.verizon.net) has quit (Quit: yminsky)
2015-03-10 12:41:39	-->	mthvedt (~mike@cpe-68-174-99-100.nyc.res.rr.com) has joined #haskell
2015-03-10 12:42:25	-->	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has joined #haskell
2015-03-10 12:42:34	<--	Guest64996 (~xenog@95.83.254.208) has quit (Quit: Leaving)
2015-03-10 12:42:43	<--	hippity_1oppity (~stamf@124-168-135-16.dyn.iinet.net.au) has quit (Ping timeout: 252 seconds)
2015-03-10 12:42:58	-->	hippity_hoppity (~stamf@124-168-135-16.dyn.iinet.net.au) has joined #haskell
2015-03-10 12:43:48	-->	favetelinguis (~favetelin@90-227-138-205-no186.tbcn.telia.com) has joined #haskell
2015-03-10 12:44:33	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit (Ping timeout: 252 seconds)
2015-03-10 12:44:37	-->	bollullera (~sevillana@95.63.152.106) has joined #haskell
2015-03-10 12:44:40	-->	michael-k (~michael@HSI-KBW-046-005-021-122.hsi8.kabel-badenwuerttemberg.de) has joined #haskell
2015-03-10 12:45:10	-->	jorr (~user@66-195-52-50.static.twtelecom.net) has joined #haskell
2015-03-10 12:45:36	-->	oscar_toro (~oscar@194.182.245.60) has joined #haskell
2015-03-10 12:45:40	-->	xenog_ (~xenog@95.83.254.208) has joined #haskell
2015-03-10 12:45:40	--	xenog_ is now known as xenog
2015-03-10 12:46:18	-->	paradoja (~paradoja@77.231.232.96) has joined #haskell
2015-03-10 12:46:19	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 250 seconds)
2015-03-10 12:47:16	-->	davison (~davison@cpat005.wlan.net.ed.ac.uk) has joined #haskell
2015-03-10 12:47:37	<--	tinyblak (~tinyblak@106.39.41.189) has quit (Remote host closed the connection)
2015-03-10 12:48:06	<--	jetho (~jens@191.242.128.209) has quit (Read error: Connection reset by peer)
2015-03-10 12:48:18	-->	x90 (~r0x@78.165.238.29) has joined #haskell
2015-03-10 12:48:24	<--	pfoetchen (~pfoetchen@198.57.46.61) has quit (Quit: blub)
2015-03-10 12:48:50	-->	jetho (~jens@191.242.128.209) has joined #haskell
2015-03-10 12:48:53	-->	pfoetchen (~pfoetchen@beiboot1.petschge.de) has joined #haskell
2015-03-10 12:49:14	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2015-03-10 12:49:22	<--	mridul_seth (~mridul_se@178.62.224.87) has quit (Remote host closed the connection)
2015-03-10 12:50:39	<--	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has quit (Ping timeout: 250 seconds)
2015-03-10 12:50:49	-->	JagaJaga_ (~JagaJaga@178.62.202.50) has joined #haskell
2015-03-10 12:51:11	<--	echo-area (~user@182.92.253.23) has quit (Remote host closed the connection)
2015-03-10 12:51:16	-->	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has joined #haskell
2015-03-10 12:52:05	<--	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has quit (Quit: dysinger)
2015-03-10 12:52:07	<--	aarvar (~aaron@50-47-100-244.evrt.wa.frontiernet.net) has left #haskell
2015-03-10 12:52:42	-->	frodwith (~pdriver@CPE-72-128-209-23.wi.res.rr.com) has joined #haskell
2015-03-10 12:53:54	<--	xenog (~xenog@95.83.254.208) has quit (Ping timeout: 265 seconds)
2015-03-10 12:54:19	-->	juanpablo_ (~juanpablo@186.101.153.165) has joined #haskell
2015-03-10 12:54:53	-->	ktosiek (~quassel@main.ktosiek.com) has joined #haskell
2015-03-10 12:55:18	--	darkowlzz|afk is now known as darkowlzz
2015-03-10 12:55:32	<--	halvorg (~halvor@dhcp-047078.wlan.ntnu.no) has quit (Remote host closed the connection)
2015-03-10 12:58:17	<--	sebhoss (~sebhoss@109.125.119.234.dynamic.cablesurf.de) has quit (Remote host closed the connection)
2015-03-10 12:58:35	 *	hackagebot unbound-generics 0.1 - Reimplementation of Unbound using GHC Generics  http://hackage.haskell.org/package/unbound-generics-0.1 (AlekseyKliger)
2015-03-10 12:58:49	-->	sebhoss (~sebhoss@109.125.119.234.dynamic.cablesurf.de) has joined #haskell
2015-03-10 12:58:53	<--	mac10688 (~mac10688@c-69-180-251-120.hsd1.tn.comcast.net) has quit (Ping timeout: 250 seconds)
2015-03-10 12:59:03	-->	fujimura (~fujimura@pool-74-108-111-151.nycmny.fios.verizon.net) has joined #haskell
2015-03-10 12:59:13	<--	juanpablo_ (~juanpablo@186.101.153.165) has quit (Ping timeout: 264 seconds)
2015-03-10 12:59:36	<--	fryguybob (~fryguybob@f27.cs.rochester.edu) has quit (Remote host closed the connection)
2015-03-10 12:59:40	<--	sebhoss (~sebhoss@109.125.119.234.dynamic.cablesurf.de) has quit (Client Quit)
2015-03-10 13:00:26	-->	safinaskar (~user@178.204.111.156) has joined #haskell
2015-03-10 13:01:13	<--	jetho (~jens@191.242.128.209) has quit (Ping timeout: 252 seconds)
2015-03-10 13:01:14	safinaskar	is there some containers for data in haskell, which are internally implemented as something like pointers and thus can be very fast be compared (because comparision is as fast as pointer comparision). i. e. i want to write "let a = Container some_big_data in a == a" -- here "a == a" is very fast, because pointers only are compared
2015-03-10 13:01:55	<--	davison (~davison@cpat005.wlan.net.ed.ac.uk) has quit (Quit: Lost terminal)
2015-03-10 13:02:06	<--	bitrust (~bitrust@37.72.202.12) has quit (Ping timeout: 244 seconds)
2015-03-10 13:02:35	-->	rgrinberg (~rgrinberg@66.49.218.159) has joined #haskell
2015-03-10 13:03:03	-->	govg (~govg@unaffiliated/govg) has joined #haskell
2015-03-10 13:03:10	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 13:03:26	<--	folone (~folone@80.82.202.196) has quit (Remote host closed the connection)
2015-03-10 13:03:35	<--	fujimura (~fujimura@pool-74-108-111-151.nycmny.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2015-03-10 13:03:35	 *	hackagebot threads-supervisor 1.0.3.0 - Simple, IO-based library for Erlang-style thread supervision  http://hackage.haskell.org/package/threads-supervisor-1.0.3.0 (AlfredoDiNapoli)
2015-03-10 13:03:56	dcoutts	safinaskar: you can assign things unique ids yourself of course
2015-03-10 13:04:04	-->	jo__ (uid41683@gateway/web/irccloud.com/x-zxqmpcmllqxaeddh) has joined #haskell
2015-03-10 13:04:20	-->	tinyblak (~tinyblak@106.39.41.172) has joined #haskell
2015-03-10 13:05:12	-->	amar (~amar@14.140.43.50) has joined #haskell
2015-03-10 13:05:30	<--	amar (~amar@14.140.43.50) has quit (Remote host closed the connection)
2015-03-10 13:05:36	<--	FMcC (~finlay@cpc9-broo7-2-0-cust237.14-2.cable.virginm.net) has quit (Ping timeout: 246 seconds)
2015-03-10 13:05:41	-->	fumieval (~fumieval@61-21-106-85.rev.home.ne.jp) has joined #haskell
2015-03-10 13:05:42	-->	amar (~amar@14.140.43.50) has joined #haskell
2015-03-10 13:06:05	--	amar is now known as Guest15286
2015-03-10 13:06:21	<--	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has quit (Ping timeout: 252 seconds)
2015-03-10 13:06:25	-->	dgpratt (~dpratt71@207.182.200.34) has joined #haskell
2015-03-10 13:06:45	<--	nymacro (~kvirc@115-64-214-77.static.tpgi.com.au) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2015-03-10 13:06:49	-->	albel727 (~albel727@unaffiliated/albel727) has joined #haskell
2015-03-10 13:07:25	<--	govg (~govg@unaffiliated/govg) has quit (Client Quit)
2015-03-10 13:07:26	<--	rgrinberg (~rgrinberg@66.49.218.159) has quit (Ping timeout: 265 seconds)
2015-03-10 13:07:40	<--	jo__ (uid41683@gateway/web/irccloud.com/x-zxqmpcmllqxaeddh) has quit (Read error: No route to host)
2015-03-10 13:07:48	<--	vmeson (~rmacleod@24-212-184-107.cable.teksavvy.com) has quit (Ping timeout: 250 seconds)
2015-03-10 13:07:59	-->	jo__ (uid41683@gateway/web/irccloud.com/x-sflawrdavholfvpn) has joined #haskell
2015-03-10 13:11:09	-->	intjtrue (~intjtrue@dhcp33-85-84.bbn.com) has joined #haskell
2015-03-10 13:11:34	<--	Guest15286 (~amar@14.140.43.50) has quit (Ping timeout: 256 seconds)
2015-03-10 13:11:57	-->	bitrust (~bitrust@12.202.72.37.dynamic.sat.abo.nordnet.fr) has joined #haskell
2015-03-10 13:12:02	-->	sleepomeno (~user@178.115.129.135.wireless.dyn.drei.com) has joined #haskell
2015-03-10 13:12:41	--	naudiz is now known as naudiz|offline
2015-03-10 13:13:48	-->	jzl (~jzl@2604:180:2:3c5::94b6) has joined #haskell
2015-03-10 13:14:11	-->	henrixh (~Thunderbi@c-209-71.eduroam.liu.se) has joined #haskell
2015-03-10 13:16:16	safinaskar	dcoutts: okey, but then i should generate random numbers, and this is state. but i want to write pure functional program without passing random generator to functions
2015-03-10 13:16:32	safinaskar	dcoutts: or i can use sequentional numbers, but then, again, i have state
2015-03-10 13:17:26	-->	Skarnig91 (~sRN3834@e178069164.adsl.alicedsl.de) has joined #haskell
2015-03-10 13:17:46	jtanguy	you can generate unique identifiers without randomness
2015-03-10 13:18:14	jtanguy	UUID version 5 is hash-based
2015-03-10 13:18:24	-->	jetho (~jens@191.242.128.209) has joined #haskell
2015-03-10 13:18:30	L8D	UUID v3 is hash-based too
2015-03-10 13:18:41	jtanguy	yes too
2015-03-10 13:18:53	<--	tvh2 (~tvh@27-32-54-147.static.tpgi.com.au) has quit (Ping timeout: 240 seconds)
2015-03-10 13:18:54	L8D	UUID v4 is the only random version actually
2015-03-10 13:19:12	L8D	but UUID v{1,2} are time-based and something
2015-03-10 13:19:20	jtanguy	iirc v3 is based on md5 and v5 on sha1
2015-03-10 13:19:59	-->	product-- (~product--@gateway/vpn/privateinternetaccess/product--) has joined #haskell
2015-03-10 13:20:58	<--	qubitnerd (~neutrino@unaffiliated/electron/x-8286743) has quit (Ping timeout: 272 seconds)
2015-03-10 13:21:38	-->	govg (~govg@unaffiliated/govg) has joined #haskell
2015-03-10 13:21:45	-->	grc (~user@host81-142-89-185.in-addr.btopenworld.com) has joined #haskell
2015-03-10 13:21:57	<--	hiratara (~hiratara@240f:7:4708:1:317a:12:2282:2c0f) has quit (Ping timeout: 265 seconds)
2015-03-10 13:22:08	-->	iamjarvo (~textual@c-69-249-187-177.hsd1.nj.comcast.net) has joined #haskell
2015-03-10 13:22:45	-->	mengu (~mengu@unaffiliated/mengu) has joined #haskell
2015-03-10 13:22:46	-->	malkomalko (~malkomalk@207.251.103.46) has joined #haskell
2015-03-10 13:23:53	<--	Beetny (~Beetny@14-202-48-200.tpgi.com.au) has quit (Ping timeout: 240 seconds)
2015-03-10 13:24:23	-->	hiratara (~hiratara@240f:7:4708:1:8d88:b7e3:6a0b:7c83) has joined #haskell
2015-03-10 13:24:32	<--	jeltsch (~wolfgang@85.253.141.214.cable.starman.ee) has quit (Quit: jeltsch)
2015-03-10 13:24:50	-->	fujimura (~fujimura@pool-74-108-111-151.nycmny.fios.verizon.net) has joined #haskell
2015-03-10 13:25:07	c_wraith	safinaskar: any form of unique naming is a fundamentally stateful operation. Haskell is just forcing you to accept that.
2015-03-10 13:25:44	yoshuawuyts	c_wraith: that sounds philosophical
2015-03-10 13:25:54	mniip	is there a way to mimick the => type operator?
2015-03-10 13:26:00	-->	darkbolt (~darkbolt@23.252.55.57) has joined #haskell
2015-03-10 13:26:15	mniip	'type a :- (b :: Constraint) = b => a' doesn't appear to have the expected semantics
2015-03-10 13:26:16	product--	When I see <T> and <S,T> generics in code, I wonder what went wrong in the language and think back to the Haskell.
2015-03-10 13:26:17	product--	Is it just me?
2015-03-10 13:26:40	<--	Skarnig91 (~sRN3834@e178069164.adsl.alicedsl.de) has quit (Ping timeout: 272 seconds)
2015-03-10 13:26:45	c_wraith	yoshuawuyts: There's a lot of approaching the edge of philosophy when you consider the limits of what is possible.
2015-03-10 13:26:49	merijn	mniip: There's no way to tell whether 'b' is constraining any part of 'a' in that type
2015-03-10 13:27:11	-->	chaosmasttter (~chaosmast@p5B2FE0A3.dip0.t-ipconnect.de) has joined #haskell
2015-03-10 13:27:16	<--	mthvedt (~mike@cpe-68-174-99-100.nyc.res.rr.com) has quit (Quit: mthvedt)
2015-03-10 13:27:18	mniip	merijn, well 'type' is supposed to be more of a macro?
2015-03-10 13:27:44	mniip	oh well, type variables being calculated *after* 'type' inlining makes even less sense
2015-03-10 13:28:02	merijn	mniip: type influences scoping
2015-03-10 13:28:32	-->	danthemyth (~danthemyt@50.246.66.202) has joined #haskell
2015-03-10 13:28:52	quchen2	product--: Those expressions just mean that types are parametric, which is something Haskell also has, albeit with better syntax.
2015-03-10 13:29:00	merijn	"type Foo a = Bar a => Baz a; foo :: Foo a -> Int -> Bool" becomes "foo :: (forall a . Bar a => Baz a) -> Int -> Bool"
2015-03-10 13:29:25	merijn	quchen2: I think product-- is complaining about how verbose generics are in other languages
2015-03-10 13:29:54	<--	sinkensabe (~sinkensab@213.115.244.180) has quit (Read error: Connection reset by peer)
2015-03-10 13:30:01	-->	guardianx (~javaserve@dsl-58-7-42-20.wa.westnet.com.au) has joined #haskell
2015-03-10 13:30:05	product--	yeah they appear everywhere
2015-03-10 13:30:16	<--	darkbolt (~darkbolt@23.252.55.57) has quit (Ping timeout: 255 seconds)
2015-03-10 13:30:35	hodapp	Haskell generics do seem to be quite effortless.
2015-03-10 13:30:35	-->	Ryanar (Ryan@129.21.92.106) has joined #haskell
2015-03-10 13:30:38	<--	fumieval (~fumieval@61-21-106-85.rev.home.ne.jp) has quit (Ping timeout: 265 seconds)
2015-03-10 13:30:43	<--	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has quit (Quit: zcourts)
2015-03-10 13:30:44	-->	Zeitgeist_ (~mkn@unaffiliated/damiel) has joined #haskell
2015-03-10 13:30:48	-->	Argue (~Argue___@112.209.29.248) has joined #haskell
2015-03-10 13:30:59	product--	but haskell has other issues like, if one guy makes stuff in an IO monad i can't plug it into my code unless I turn my whole code into IO monadic
2015-03-10 13:31:04	product--	and etc for other monads
2015-03-10 13:31:15	-->	mthvedt (~mike@cpe-68-174-99-100.nyc.res.rr.com) has joined #haskell
2015-03-10 13:31:15	-->	sinkensabe (~sinkensab@213.115.244.180) has joined #haskell
2015-03-10 13:31:20	-->	zzmiy1 (~zzmiy@86.57.155.45) has joined #haskell
2015-03-10 13:31:40	quchen2	Calling <S> Foo<S> flatMap(final Function<? super T, Foo<S>> mapper) verbose? Haskell snob!
2015-03-10 13:31:56	hodapp	product--: what do you mean? if you wrote pure code?
2015-03-10 13:32:13	mniip	product--, unsafePerformIO!
2015-03-10 13:32:25	-->	vmeson (~rmacleod@128.224.252.2) has joined #haskell
2015-03-10 13:32:47	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2015-03-10 13:33:07	<--	zzmiy (~zzmiy@2a02:6b8:0:3504:a40e:c1b1:1e31:c857) has quit (Ping timeout: 252 seconds)
2015-03-10 13:33:51	-->	dropp (~sleep@173-166-154-166-washingtondc.hfc.comcastbusiness.net) has joined #haskell
2015-03-10 13:34:41	-->	saml_ (~saml@cpe-24-102-97-97.nyc.res.rr.com) has joined #haskell
2015-03-10 13:34:56	-->	sdothum (~sdothum@207.112.101.84) has joined #haskell
2015-03-10 13:34:58	<--	vmeson (~rmacleod@128.224.252.2) has quit (Client Quit)
2015-03-10 13:35:05	-->	vmeson (~rmacleod@128.224.252.2) has joined #haskell
2015-03-10 13:35:52	-->	juanpaucar (~juanpauca@186.101.153.165) has joined #haskell
2015-03-10 13:35:55	-->	fro_ozen (~fro_ozen@dslb-188-104-091-087.188.104.pools.vodafone-ip.de) has joined #haskell
2015-03-10 13:36:36	-->	torpet (~torpet@84-115-42-228.dynamic.surfer.at) has joined #haskell
2015-03-10 13:37:19	<--	product-- (~product--@gateway/vpn/privateinternetaccess/product--) has quit (Quit: product--)
2015-03-10 13:37:20	<--	Takle (~takle@62.254.166.26) has quit (Remote host closed the connection)
2015-03-10 13:37:30	-->	tvh2 (~tvh@27-32-54-147.static.tpgi.com.au) has joined #haskell
2015-03-10 13:37:40	-->	fumieval (~fumieval@61-21-106-85.rev.home.ne.jp) has joined #haskell
2015-03-10 13:37:53	<--	acid123 (~acid@46.115.11.172) has quit (Ping timeout: 265 seconds)
2015-03-10 13:38:51	-->	quazifarhan (~quazifarh@103.239.252.3) has joined #haskell
2015-03-10 13:39:54	-->	slomo (~slomo@coaxion.net) has joined #haskell
2015-03-10 13:39:54	<--	slomo (~slomo@coaxion.net) has quit (Changing host)
2015-03-10 13:39:54	-->	slomo (~slomo@unaffiliated/slomo) has joined #haskell
2015-03-10 13:40:00	-->	fizbin (~Adium@pool-96-235-152-174.cmdnnj.east.verizon.net) has joined #haskell
2015-03-10 13:40:17	<--	juanpaucar (~juanpauca@186.101.153.165) has quit (Ping timeout: 252 seconds)
2015-03-10 13:40:27	<--	bru` (~bruno`@5-49-32-115.hfc.dyn.abo.bbox.fr) has quit (Ping timeout: 252 seconds)
2015-03-10 13:40:40	-->	chug (~montagy@43.250.200.49) has joined #haskell
2015-03-10 13:41:05	<--	torpet (~torpet@84-115-42-228.dynamic.surfer.at) has quit (Ping timeout: 245 seconds)
2015-03-10 13:41:20	<--	fractalsea (~fractalse@host-78-149-127-69.as13285.net) has quit (Quit: fractalsea)
2015-03-10 13:41:49	<--	vmeson (~rmacleod@128.224.252.2) has quit (Quit: Konversation terminated!)
2015-03-10 13:41:53	-->	sRN1744 (~sRN1744@e178069164.adsl.alicedsl.de) has joined #haskell
2015-03-10 13:41:54	-->	vmesons (~rmacleod@128.224.252.2) has joined #haskell
2015-03-10 13:41:58	-->	j4cknewt (~j4cknewt@c-68-53-58-107.hsd1.tn.comcast.net) has joined #haskell
2015-03-10 13:42:19	--	vmesons is now known as vmeson
2015-03-10 13:42:34	-->	albertid__ (~albertid_@p5DC4D5A5.dip0.t-ipconnect.de) has joined #haskell
2015-03-10 13:42:41	-->	bennofs (~benno@ip923432f4.dynamic.kabel-deutschland.de) has joined #haskell
2015-03-10 13:42:42	-->	yakutori (~yakutori@217.198.206.30) has joined #haskell
2015-03-10 13:43:21	<--	fujimura (~fujimura@pool-74-108-111-151.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2015-03-10 13:45:26	-->	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has joined #haskell
2015-03-10 13:45:53	-->	fujimura (~fujimura@pool-74-108-111-151.nycmny.fios.verizon.net) has joined #haskell
2015-03-10 13:46:18	-->	wei2912 (~wei2912@unaffiliated/wei2912) has joined #haskell
2015-03-10 13:46:32	<--	sRN1744 (~sRN1744@e178069164.adsl.alicedsl.de) has quit (Ping timeout: 244 seconds)
2015-03-10 13:47:45	<--	guardianx (~javaserve@dsl-58-7-42-20.wa.westnet.com.au) has quit (Remote host closed the connection)
2015-03-10 13:47:50	-->	ArcReact9 (~sRN4505@e178069164.adsl.alicedsl.de) has joined #haskell
2015-03-10 13:50:05	-->	ddellacosta (~ddellacos@softbank126114212003.bbtec.net) has joined #haskell
2015-03-10 13:50:05	-->	dfeuer (~dfeuer@pool-96-255-150-235.washdc.fios.verizon.net) has joined #haskell
2015-03-10 13:50:06	<--	dfeuer (~dfeuer@pool-96-255-150-235.washdc.fios.verizon.net) has quit (Changing host)
2015-03-10 13:50:06	-->	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined #haskell
2015-03-10 13:50:23	-->	fryguybob (~fryguybob@f27.cs.rochester.edu) has joined #haskell
2015-03-10 13:50:28	<--	fujimura (~fujimura@pool-74-108-111-151.nycmny.fios.verizon.net) has quit (Ping timeout: 265 seconds)
2015-03-10 13:50:29	-->	yamadapc (~yamadapc@201-69-228-192.dial-up.telesp.net.br) has joined #haskell
2015-03-10 13:50:32	safinaskar	dcoutts: jtanguy: c_wraith: thanks. i will consider hashs
2015-03-10 13:51:07	<--	joelhe (~joelhe@5.146.209.142) has quit (Ping timeout: 245 seconds)
2015-03-10 13:51:26	<--	paradoja (~paradoja@77.231.232.96) has quit (Ping timeout: 252 seconds)
2015-03-10 13:51:38	yoshuawuyts	does anyone have a good writeup about monads? Pretty sure that question's being asked a lot, but curious if there's on you like in particular
2015-03-10 13:52:22	 *	yoshuawuyts wants to understand the universe
2015-03-10 13:52:35	<--	akegalj_ (~akegalj@78-1-158-34.adsl.net.t-com.hr) has quit (Quit: Lost terminal)
2015-03-10 13:52:49	-->	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has joined #haskell
2015-03-10 13:53:07	-->	acid123 (~acid@46.115.11.172) has joined #haskell
2015-03-10 13:53:13	L8D	yoshuawuyts: did you check for that in bitemyapp's thingy?
2015-03-10 13:53:30	-->	jamiely_ (8f702004@gateway/web/freenode/ip.143.112.32.4) has joined #haskell
2015-03-10 13:54:07	yoshuawuyts	L8D: you mean this one? http://bitemyapp.com/posts/2014-03-24-monads-bind-join-actions.html
2015-03-10 13:54:15	yoshuawuyts	L8D: hadn't seen it before, thanks!
2015-03-10 13:54:20	-->	PinealGlandOptic (~PinealGla@82.144.205.57) has joined #haskell
2015-03-10 13:54:26	L8D	https://github.com/bitemyapp/learnhaskell
2015-03-10 13:54:27	c_wraith	yoshuawuyts: It's hard (maybe impossible) for a *good* writeup about monads to even exist
2015-03-10 13:54:29	Haskellfant	the only way to understand monads is to use them. trying to learn about them by reading & watching videos doesn't help. (ofc this is only my personal experience)
2015-03-10 13:54:52	L8D	yoshuawuyts: that is not a good writeup about monads
2015-03-10 13:55:00	L8D	in fact it doesn't even go over monads
2015-03-10 13:55:20	L8D	yoshuawuyts: By "bitemyapp's thingy" I meant https://github.com/bitemyapp/learnhaskell
2015-03-10 13:55:30	-->	joelhe (~joelhe@5.146.209.142) has joined #haskell
2015-03-10 13:55:36	L8D	which is a great way to learn Haskell but I don't know where you're at
2015-03-10 13:55:41	c_wraith	yoshuawuyts: the problem isn't that the concept is hard - it's actually easy.  The problem is that it's so abstract that most people have no way to relate to the idea until they have enough experience
2015-03-10 13:56:00	<--	sivteck (~sivteck@unaffiliated/sivteck) has quit (Quit: You are)
2015-03-10 13:56:02	L8D	GUYS GUYS GUYS HOLD UP DON'T START GIVING SPEECHES ON WHY MONADS ARE THIS AND THAT
2015-03-10 13:56:09	-->	cfricke (~cfricke@unaffiliated/cfricke) has joined #haskell
2015-03-10 13:56:10	L8D	this has happened way too many timed
2015-03-10 13:56:18	frerich	yoshuawuyts : I think https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/ is a pretty nice read about the issues with writing  things about 'monads'.
2015-03-10 13:56:21	yoshuawuyts	c_wraith: going on the tour of looking for "monads in JavaScript", since that's what I use all day it might be the best to make it *click*
2015-03-10 13:56:22	L8D	don't get carried away when someone comes into the channel asking about monads
2015-03-10 13:56:44	-->	albthor (~albthor@AMontsouris-654-1-45-205.w92-151.abo.wanadoo.fr) has joined #haskell
2015-03-10 13:56:53	<--	quchen2 (~quchen@ip-109-43-2-127.web.vodafone.de) has quit (Remote host closed the connection)
2015-03-10 13:57:06	<--	balor (~aidan@194.81.199.106) has quit (Ping timeout: 246 seconds)
2015-03-10 13:57:18	yoshuawuyts	L8D: hah, maybe there should be a canned response for whenever asks about monads :P 
2015-03-10 13:57:20	tdammers	I liked the burrito metaphor
2015-03-10 13:57:23	L8D	yoshuawuyts: DrBoolean's Monad-A-Day videos are interesting because they go over common monad transformers from Haskell but implemented in JavaScript
2015-03-10 13:57:24	-->	silver (~silver@93.84.44.105) has joined #haskell
2015-03-10 13:57:25	tdammers	until I got it
2015-03-10 13:57:58	tdammers	anyhow... bind, return, pure code, typeclasses, done.
2015-03-10 13:58:01	L8D	yoshuawuyts: but they only go over monad transformers and don't go over monads as a whole
2015-03-10 13:58:03	<--	tvh2 (~tvh@27-32-54-147.static.tpgi.com.au) has quit (Ping timeout: 252 seconds)
2015-03-10 13:58:06	yoshuawuyts	L8D: you got a link for that?
2015-03-10 13:58:09	-->	sinkensa_ (~sinkensab@213.115.244.180) has joined #haskell
2015-03-10 13:58:16	-->	Takle (~takle@62.254.166.26) has joined #haskell
2015-03-10 13:58:16	<--	sinkensabe (~sinkensab@213.115.244.180) has quit (Read error: Connection reset by peer)
2015-03-10 13:58:36	L8D	yoshuawuyts: https://vimeo.com/105300347
2015-03-10 13:58:51	yoshuawuyts	L8D: ooh, thanks! :D :D
2015-03-10 13:58:53	<--	Swizec (~swizec@188-230-171-71.dynamic.t-2.net) has quit (Quit: Computer has gone to sleep.)
2015-03-10 13:58:58	<--	perspectival (~perspecti@54.21.broadband10.iol.cz) has quit (Ping timeout: 272 seconds)
2015-03-10 13:59:13	L8D	yoshuawuyts: actually hold on
2015-03-10 13:59:17	-->	Swizec (~swizec@188-230-171-71.dynamic.t-2.net) has joined #haskell
2015-03-10 13:59:22	L8D	yoshuawuyts: he has other videos going over functors and monads
2015-03-10 13:59:36	L8D	from a JavaScript perspective
2015-03-10 13:59:41	L8D	if that's what you're looking for
2015-03-10 13:59:53	L8D	https://www.youtube.com/watch?v=ww2Z1URx-G0 maybe?
2015-03-10 14:00:10	<--	cfricke (~cfricke@unaffiliated/cfricke) has quit (Client Quit)
2015-03-10 14:00:17	-->	mitochon (~JCI@75-144-75-149-Michigan.hfc.comcastbusiness.net) has joined #haskell
2015-03-10 14:00:18	<--	Takle (~takle@62.254.166.26) has quit (Remote host closed the connection)
2015-03-10 14:00:20	yoshuawuyts	lol @ the first comment
2015-03-10 14:00:22	yoshuawuyts	> This talk is rubbish. I got many things incorrect. Please skip this one.???
2015-03-10 14:00:23	lambdabot	 <hint>:1:76:
2015-03-10 14:00:23	lambdabot	     parse error (possibly incorrect indentation or mismatched brackets)
2015-03-10 14:00:34	L8D	lol
2015-03-10 14:00:40	yoshuawuyts	L8D: but it's probably useful nevertheless. Thanks for sharing ^^
2015-03-10 14:00:44	-->	osa1 (~omer@2601:f:400:a8b1:2ab2:bdff:fedf:fa66) has joined #haskell
2015-03-10 14:00:48	L8D	https://www.youtube.com/watch?v=AvgwKjTPMmM this one
2015-03-10 14:00:49	<--	Nik05 (~Nik05@unaffiliated/nik05) has quit (Remote host closed the connection)
2015-03-10 14:01:01	-->	dino_joel (~dino_joel@cpe-72-226-64-94.nycap.res.rr.com) has joined #haskell
2015-03-10 14:01:12	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2015-03-10 14:01:58	L8D	yoshuawuyts: where have I seen your nick before?
2015-03-10 14:02:05	-->	Stratege (~Stratege@unaffiliated/stratege) has joined #haskell
2015-03-10 14:02:14	-->	ZioCrocifisso (~ZioCrocif@151.74.17.161) has joined #haskell
2015-03-10 14:02:24	<--	dino_joel (~dino_joel@cpe-72-226-64-94.nycap.res.rr.com) has quit (Client Quit)
2015-03-10 14:02:29	<--	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has quit (Quit: dysinger)
2015-03-10 14:02:31	-->	junmin (~junmin@189-210-226-30.static.axtel.net) has joined #haskell
2015-03-10 14:02:34	yoshuawuyts	L8D: maybe something in a JavaScript channel? If you ever pass by Amsterdam you might've seen me around?
2015-03-10 14:02:40	<--	fizbin (~Adium@pool-96-235-152-174.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2015-03-10 14:02:48	-->	dino_joel (~dino_joel@cpe-72-226-64-94.nycap.res.rr.com) has joined #haskell
2015-03-10 14:02:49	L8D	yoshuawuyts: oh I've seen you from the js channel
2015-03-10 14:02:58	-->	redeemed (~msh@82.208.188.40) has joined #haskell
2015-03-10 14:03:03	L8D	weird
2015-03-10 14:03:08	<--	Stratege__ (~Stratege@unaffiliated/stratege) has quit (Ping timeout: 256 seconds)
2015-03-10 14:03:13	<--	mthvedt (~mike@cpe-68-174-99-100.nyc.res.rr.com) has quit (Quit: mthvedt)
2015-03-10 14:03:38	 *	hackagebot yesod-core 1.4.8.2 - Creation of type-safe, RESTful web applications.  http://hackage.haskell.org/package/yesod-core-1.4.8.2 (MichaelSnoyman)
2015-03-10 14:03:40	-->	pocket (~pocket@pw126253224173.6.panda-world.ne.jp) has joined #haskell
2015-03-10 14:03:41	-->	Nik05 (~Nik05@unaffiliated/nik05) has joined #haskell
2015-03-10 14:03:47	-->	clrnd (~alvarez@190.210.205.193) has joined #haskell
2015-03-10 14:03:49	-->	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2015-03-10 14:04:01	<--	bollullera (~sevillana@95.63.152.106) has quit (Ping timeout: 264 seconds)
2015-03-10 14:04:05	yoshuawuyts	L8D: hah ^^
2015-03-10 14:04:06	-->	mkster (~mkster@i577B741D.versanet.de) has joined #haskell
2015-03-10 14:04:09	yoshuawuyts	not sure I can handle all the fame
2015-03-10 14:04:41	L8D	yoshuawuyts: wait I've seen you're website before
2015-03-10 14:04:45	-->	narendraj9 (~narendraj@49.14.158.183) has joined #haskell
2015-03-10 14:05:01	<--	ryu91835 (~ryu91835@141.95.240.49.ap.yournet.ne.jp) has quit (Read error: Connection reset by peer)
2015-03-10 14:05:02	<--	redeemed (~msh@82.208.188.40) has quit (Client Quit)
2015-03-10 14:05:19	-->	ryu91835 (~ryu91835@141.95.240.49.ap.yournet.ne.jp) has joined #haskell
2015-03-10 14:05:31	L8D	hm...
2015-03-10 14:05:46	<--	kiwnix (~egarcia@unaffiliated/kiwnix) has quit (Quit: -)
2015-03-10 14:06:04	clrnd	your*
2015-03-10 14:06:08	-->	balor (~aidan@194.81.199.106) has joined #haskell
2015-03-10 14:06:28	-->	sRN825 (~sRN825@e178069164.adsl.alicedsl.de) has joined #haskell
2015-03-10 14:06:28	<--	pocket (~pocket@pw126253224173.6.panda-world.ne.jp) has quit (Client Quit)
2015-03-10 14:06:34	-->	redeemed (~msh@82.208.188.40) has joined #haskell
2015-03-10 14:06:36	-->	angrygoats (~tbockman@69.194.135.252) has joined #haskell
2015-03-10 14:07:10	<--	mizu_no_oto (~textual@50.153.149.19) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2015-03-10 14:07:19	<--	dino_joel (~dino_joel@cpe-72-226-64-94.nycap.res.rr.com) has quit (Client Quit)
2015-03-10 14:07:44	yoshuawuyts	L8D: hah, wow. the internet is pretty amazing
2015-03-10 14:08:18	-->	tinchos (~martin@gw3.rosario-conicet.gov.ar) has joined #haskell
2015-03-10 14:08:25	-->	arbelos (~arbelos@2.69.106.83.mobile.tre.se) has joined #haskell
2015-03-10 14:08:35	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 14:08:38	 *	hackagebot keter 1.3.9.1 - Web application deployment manager, focusing on Haskell web frameworks  http://hackage.haskell.org/package/keter-1.3.9.1 (MichaelSnoyman)
2015-03-10 14:09:09	<--	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 264 seconds)
2015-03-10 14:09:38	EvanR	if i create a forkIO thread that creates a broadcast TChan, then occasionally writes to it, but noone has a reference to this chan to dup it, will the thread be considered pointless and be collected?
2015-03-10 14:09:52	<--	ArcReact9 (~sRN4505@e178069164.adsl.alicedsl.de) has quit (Ping timeout: 255 seconds)
2015-03-10 14:09:54	-->	jinblack (~jinblack@131.175.28.197) has joined #haskell
2015-03-10 14:09:55	-->	ianjneu (~ianj@c-50-157-151-196.hsd1.ma.comcast.net) has joined #haskell
2015-03-10 14:10:08	EvanR	i guess this is really a question about pointless threads surviving
2015-03-10 14:10:23	-->	zenith_ (~zenith@user3-85-107.wireless.utoronto.ca) has joined #haskell
2015-03-10 14:10:24	EvanR	they have no effect on anything can they be eliminated automatically
2015-03-10 14:10:33	-->	juanpablo_ (~juanpablo@186.101.153.165) has joined #haskell
2015-03-10 14:10:53	<--	angrygoats (~tbockman@69.194.135.252) has quit (Ping timeout: 240 seconds)
2015-03-10 14:11:36	-->	kranius (~kranius@78.250.113.224) has joined #haskell
2015-03-10 14:11:41	<--	daniel-s_ (~daniel-s@mu00053769.eng.monash.edu.au) has quit (Remote host closed the connection)
2015-03-10 14:11:51	-->	amar (~amar@49.248.206.134) has joined #haskell
2015-03-10 14:12:02	-->	daniel-s_ (~daniel-s@mu00053769.eng.monash.edu.au) has joined #haskell
2015-03-10 14:12:04	-->	jemu (~Thunderbi@port-212-202-107-85.static.qsc.de) has joined #haskell
2015-03-10 14:12:14	-->	hsk4 (~product--@gateway/vpn/privateinternetaccess/product--) has joined #haskell
2015-03-10 14:12:14	--	amar is now known as Guest95681
2015-03-10 14:12:16	L8D	EvanR: yeah I'd be willing to bet it'll get collected
2015-03-10 14:12:30	EvanR	that would be awesome but how do you know
2015-03-10 14:12:53	juanpablo_	Is there an equivalent of the bifunctor instance for (,) from bifunctors in Prelude?
2015-03-10 14:13:09	L8D	GHC is so good that it finds threads that are waiting on a {T,M}Var when no other thread has a reference to that Var
2015-03-10 14:13:20	-->	_TK_ (~TK@82.131.75.78.cable.starman.ee) has joined #haskell
2015-03-10 14:13:24	L8D	and it is so liberal that it terminates that thread
2015-03-10 14:13:29	<--	balor (~aidan@194.81.199.106) has quit (Ping timeout: 256 seconds)
2015-03-10 14:13:39	L8D	or throws an error(?) in the parent thread
2015-03-10 14:13:43	supki	juanpablo_: no
2015-03-10 14:13:58	yoshuawuyts	ohey, I think I understand monads now
2015-03-10 14:14:02	L8D	I've seen the VM do nastily-awesome things with GC
2015-03-10 14:14:06	-->	crobbins (~crobbins@67.133.246.18) has joined #haskell
2015-03-10 14:14:07	bennofs	EvanR: I don't think GHC can terminate that thread. It doesn't know if that thread will ever do something else
2015-03-10 14:14:09	supki	juanpablo_: although Data.Bifunctor will move to base in GHC 7.10
2015-03-10 14:14:27	-->	Kujanator (4d633e2d@gateway/web/freenode/ip.77.99.62.45) has joined #haskell
2015-03-10 14:14:31	--	darkowlzz is now known as darkowlzz|afk
2015-03-10 14:14:32	juanpablo_	supki: omg that sounds awesome.
2015-03-10 14:14:33	L8D	I wouldn't doubt it would silently collect a TChan that no one was listening to
2015-03-10 14:14:44	L8D	doubt that it*
2015-03-10 14:14:47	juanpablo_	oh well. the bifunctors package is quite small anyway
2015-03-10 14:14:54	EvanR	bennofs: thats what i figured
2015-03-10 14:14:58	-->	phaul (~user@cpc11-watf9-2-0-cust171.15-2.cable.virginm.net) has joined #haskell
2015-03-10 14:15:09	-->	hellofunk (~user@94.157.32.130) has joined #haskell
2015-03-10 14:16:12	-->	Takle (~takle@62.254.166.26) has joined #haskell
2015-03-10 14:16:33	<--	crobbins (~crobbins@67.133.246.18) has quit (Remote host closed the connection)
2015-03-10 14:17:25	mniip	what would the kind of (->) be
2015-03-10 14:17:29	-->	crobbins (~crobbins@67.133.246.18) has joined #haskell
2015-03-10 14:17:42	mniip	ah right
2015-03-10 14:17:50	L8D	EvanR: it raises an error
2015-03-10 14:17:54	mniip	so this is where asterisks come from
2015-03-10 14:17:58	<--	narendraj9 (~narendraj@49.14.158.183) has quit (Ping timeout: 272 seconds)
2015-03-10 14:18:02	EvanR	L8D: what does
2015-03-10 14:18:17	L8D	EvanR: when a thread blocks indefinitely on an MVar
2015-03-10 14:18:18	-->	rgrinberg (~rgrinberg@66.49.218.159) has joined #haskell
2015-03-10 14:18:20	EvanR	bennofs: it seems somebody else has thought about this https://wiki.haskell.org/Old-reactive "garbage collecting futures"
2015-03-10 14:18:20	-->	fizbin (~Adium@pool-96-235-152-174.cmdnnj.east.verizon.net) has joined #haskell
2015-03-10 14:18:42	bennofs	L8D: reading from an MVar/blocking on a TVar could raise an error when nobody writes to it
2015-03-10 14:18:50	EvanR	L8D: i know that much, but i was referring to a live thread that writes to a inaccessible broadcast TCHan
2015-03-10 14:19:16	-->	dEPy (~dEPy@46-150-61-158.cable.teleing.net) has joined #haskell
2015-03-10 14:19:19	<--	muzzle (~Adium@mnch-4d046503.pool.mediaWays.net) has quit (Quit: Leaving.)
2015-03-10 14:19:20	Kujanator	Can someone explain a situation when 'evalB (b1 :&: b2) st' can return a different state to 'evalB (b1 :&&: b2) st' where the difference is one is short circuit and the other eager.
2015-03-10 14:19:32	-->	fujimura (~fujimura@38.105.171.2) has joined #haskell
2015-03-10 14:19:49	EvanR	or one that just loops
2015-03-10 14:20:00	c_wraith	Kujanator: are b1 and b2 expressions of type Bool?
2015-03-10 14:20:20	<--	iamjarvo (~textual@c-69-249-187-177.hsd1.nj.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz?)
2015-03-10 14:20:24	Kujanator	c_wraith, yeah, sorry I should have said.
2015-03-10 14:20:32	-->	Argue_ (~Argue___@112.209.79.227) has joined #haskell
2015-03-10 14:20:39	c_wraith	Kujanator: the eager one has more potential bottom values
2015-03-10 14:20:50	EvanR	or one that only reads TVars and does nothing with the results
2015-03-10 14:20:57	<--	chug (~montagy@43.250.200.49) has quit (Quit: ??)
2015-03-10 14:20:59	EvanR	would be cool if those didnt have to exist ;)
2015-03-10 14:21:14	-->	jaseemabid (~jaseemabi@106.51.235.143) has joined #haskell
2015-03-10 14:21:15	<--	j4cknewt (~j4cknewt@c-68-53-58-107.hsd1.tn.comcast.net) has quit (Remote host closed the connection)
2015-03-10 14:21:17	Kujanator	c_wraith, I don't know what 'has more bottom values' means
2015-03-10 14:21:22	c_wraith	@let True :&: True = True ; _ :&: _ = False
2015-03-10 14:21:22	lambdabot	 .L.hs:170:6: Not in scope: data constructor ?:&:?
2015-03-10 14:21:22	lambdabot	 
2015-03-10 14:21:22	lambdabot	 .L.hs:171:3: Not in scope: data constructor ?:&:?
2015-03-10 14:21:28	-->	muzzle (~Adium@mnch-4d046503.pool.mediaways.net) has joined #haskell
2015-03-10 14:21:31	c_wraith	oh, right
2015-03-10 14:21:35	<--	ajcoppa (~aj.coppa@2001:4801:7824:103:c60b:7e43:ff11:743c) has left #haskell ("Leaving...")
2015-03-10 14:21:39	c_wraith	@let True &: True = True ; _ &: _ = False
2015-03-10 14:21:41	lambdabot	 Defined.
2015-03-10 14:22:00	c_wraith	> if Flase && undefined then 1 else 2
2015-03-10 14:22:01	lambdabot	 Not in scope: data constructor ?Flase?
2015-03-10 14:22:01	lambdabot	 Perhaps you meant ?False? (imported from Data.Bool)
2015-03-10 14:22:05	c_wraith	> if False && undefined then 1 else 2
2015-03-10 14:22:07	lambdabot	 2
2015-03-10 14:22:11	c_wraith	> if False &: undefined then 1 else 2
2015-03-10 14:22:12	lambdabot	 2
2015-03-10 14:22:25	c_wraith	Whoops, not strict enough. :)
2015-03-10 14:22:29	c_wraith	@undefine
2015-03-10 14:22:29	lambdabot	Undefined.
2015-03-10 14:22:45	<--	crobbins (~crobbins@67.133.246.18) has quit (Remote host closed the connection)
2015-03-10 14:22:49	jaseemabid	Hello everyone! I'm having some issues with hunit. I have my main defined as `main = runTestTT $ TestList [testSimple, testFail]`. Running main in ghci shows 2 tests, and one failing as expected. Running the same with cabal shows only one test and status passed. What is going wring here?
2015-03-10 14:23:08	<--	yakutori (~yakutori@217.198.206.30) has quit
2015-03-10 14:23:16	c_wraith	@let True &: True = True ; True &: False = False ; False &: True = False ; False &: False = False
2015-03-10 14:23:18	lambdabot	 Defined.
2015-03-10 14:23:23	c_wraith	> if False && undefined then 1 else 2
2015-03-10 14:23:24	lambdabot	 2
2015-03-10 14:23:30	L8D	@let (&:) = \b b' -> b && b' :: !Bool -> !Bool -> !Bool
2015-03-10 14:23:30	lambdabot	 Parse failed: Parse error: !
2015-03-10 14:23:33	c_wraith	> if False &: undefined then 1 else 2
2015-03-10 14:23:34	lambdabot	 *Exception: Prelude.undefined
2015-03-10 14:23:35	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-10 14:23:39	 *	hackagebot pcg-random 0.1.1.0 - Haskell bindings to the PCG random number generator.  http://hackage.haskell.org/package/pcg-random-0.1.1.0 (cchalmers)
2015-03-10 14:23:40	<--	rgrinberg (~rgrinberg@66.49.218.159) has quit (Ping timeout: 272 seconds)
2015-03-10 14:23:43	<--	saml_ (~saml@cpe-24-102-97-97.nyc.res.rr.com) has quit (Ping timeout: 252 seconds)
2015-03-10 14:23:43	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 14:23:44	-->	bollullera (~sevillana@95.63.152.106) has joined #haskell
2015-03-10 14:23:48	c_wraith	Kujanator: that's the difference
2015-03-10 14:23:53	L8D	@let (&:) = \b b' -> seq b' (b && b') :: !Bool -> !Bool -> !Bool
2015-03-10 14:23:53	lambdabot	 Parse failed: Parse error: !
2015-03-10 14:24:01	L8D	@let (&:) = \b b' -> seq b' (b && b') :: Bool -> Bool -> Bool
2015-03-10 14:24:02	lambdabot	 .L.hs:154:6:
2015-03-10 14:24:02	lambdabot	     Multiple declarations of ?&:?
2015-03-10 14:24:02	lambdabot	     Declared at: .L.hs:150:1
2015-03-10 14:24:05	c_wraith	L8D: don't do that
2015-03-10 14:24:11	c_wraith	L8D: it errors. :)
2015-03-10 14:24:17	-->	ansible1 (~kvirc@73.217.98.159) has joined #haskell
2015-03-10 14:24:17	<--	sRN825 (~sRN825@e178069164.adsl.alicedsl.de) has quit (Ping timeout: 252 seconds)
2015-03-10 14:24:17	<--	Argue (~Argue___@112.209.29.248) has quit (Ping timeout: 252 seconds)
2015-03-10 14:24:22	L8D	c_wraith: I thought that's what you wanted to do
2015-03-10 14:24:25	c_wraith	L8D: (@let is a shared namespace)
2015-03-10 14:24:27	<--	muzzle (~Adium@mnch-4d046503.pool.mediaways.net) has quit (Client Quit)
2015-03-10 14:24:38	L8D	oh
2015-03-10 14:24:44	L8D	that's what you're saying
2015-03-10 14:25:10	L8D	> if seq undefined True then 1 else 2
2015-03-10 14:25:11	lambdabot	 *Exception: Prelude.undefined
2015-03-10 14:25:25	L8D	there you go c_
2015-03-10 14:25:36	-->	perspectival (~perspecti@54.21.broadband10.iol.cz) has joined #haskell
2015-03-10 14:25:37	c_wraith	L8D: I feel like you missed the point entirely. :)
2015-03-10 14:25:38	Kujanator	c_wraith, thank you.
2015-03-10 14:25:44	L8D	lol
2015-03-10 14:26:06	<--	fizbin (~Adium@pool-96-235-152-174.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2015-03-10 14:26:13	c_wraith	Kujanator: bottom values are exceptions or infinite loops - things that don't return normally
2015-03-10 14:26:17	-->	fizbin (~Adium@pool-96-235-152-174.cmdnnj.east.verizon.net) has joined #haskell
2015-03-10 14:26:35	L8D	@let 1 
2015-03-10 14:26:35	lambdabot	 Parse failed: TemplateHaskell is not enabled
2015-03-10 14:26:35	c_wraith	Kujanator: stricter evaluation leads to more inputs that result in bottom values
2015-03-10 14:26:38	L8D	oops
2015-03-10 14:26:42	L8D	@let 1 + 2 = 4
2015-03-10 14:26:44	lambdabot	 Defined.
2015-03-10 14:26:46	L8D	mwahahahahahahahaha
2015-03-10 14:26:52	c_wraith	> 2 + 3
2015-03-10 14:26:53	lambdabot	 Ambiguous occurrence ?+?
2015-03-10 14:26:53	lambdabot	 It could refer to either ?L.+?, defined at L.hs:157:3
2015-03-10 14:26:53	lambdabot	                       or ?GHC.Num.+?,
2015-03-10 14:26:53	L8D	i'll stop not
2015-03-10 14:26:57	c_wraith	@undefine
2015-03-10 14:26:57	lambdabot	Undefined.
2015-03-10 14:27:01	L8D	damnit
2015-03-10 14:27:09	L8D	*cries*
2015-03-10 14:27:10	EvanR	ggeeez
2015-03-10 14:27:25	-->	sopvop (~lonokhov@85.143.141.170) has joined #haskell
2015-03-10 14:27:27	L8D	sorry I'm spamming the chat so much
2015-03-10 14:29:01	 *	frerich pictures a room of 1519 people golfclapping ;-)
2015-03-10 14:29:48	-->	Denommus` (~AndChat42@unaffiliated/denommus) has joined #haskell
2015-03-10 14:31:04	-->	crobbins (~crobbins@c-73-201-214-48.hsd1.va.comcast.net) has joined #haskell
2015-03-10 14:31:24	Kujanator	c_wraith, so this one, if False &: undefined then 1 else 2, is the eager operator one which checks the undefined even though it knows the answer is already false?
2015-03-10 14:32:39	-->	folone_ (~folone@80.82.202.196) has joined #haskell
2015-03-10 14:32:39	-->	narendraj9 (~narendraj@106.76.143.114) has joined #haskell
2015-03-10 14:33:08	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-10 14:33:42	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 14:33:53	-->	naneau (~naneau@unaffiliated/naneau) has joined #haskell
2015-03-10 14:34:13	jtanguy	i'd say it doesn't know the answer is false
2015-03-10 14:34:13	-->	chatsiri_ (~chatsiri_@49.230.71.14) has joined #haskell
2015-03-10 14:35:34	<--	zzmiy1 (~zzmiy@86.57.155.45) has quit (Read error: Connection timed out)
2015-03-10 14:35:59	-->	insitu (~textual@221.244.69.91.rev.sfr.net) has joined #haskell
2015-03-10 14:36:04	-->	zzmiy (~zzmiy@2a02:6b8:0:3504:a40e:c1b1:1e31:c857) has joined #haskell
2015-03-10 14:36:10	-->	saikrishna (saikrishna@nat/iiit/x-wrhunowgdummfyzb) has joined #haskell
2015-03-10 14:36:24	-->	asdasdasd (8110481b@gateway/web/freenode/ip.129.16.72.27) has joined #haskell
2015-03-10 14:36:51	<--	edon (~user@albalug/edon) has quit (Ping timeout: 265 seconds)
2015-03-10 14:36:57	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-10 14:37:21	<--	folone_ (~folone@80.82.202.196) has quit (Ping timeout: 264 seconds)
2015-03-10 14:38:01	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 14:38:12	EvanR	... i just used unsafePerformIO and it worked .... but for how long
2015-03-10 14:38:26	silver	7 days
2015-03-10 14:38:46	asdasdasd	Hello fellow hasklers! Me and my CogSci beginner team has a weird problem: a function has return type [[Int]]. We generate this list of lists with the line: "let array =  take (fst size) (repeat (replicate (snd size) (0 :: Int)))", the compiler gives the error Couldn't match type ?[Int]? with ?Int?     Expected type: [Int]       Actual type: [[Int]]     In the first argument of ?return?
2015-03-10 14:38:49	EvanR	so think of it like a bonus effect which youll need regenerated periodically
2015-03-10 14:39:04	EvanR	like quad damage
2015-03-10 14:39:07	clrnd	asdasdasd, why not paste the line in lpaste.net?
2015-03-10 14:39:30	clrnd	asdasdasd, what is `size`?
2015-03-10 14:39:56	asdasdasd	a tuple with length of the two dimensions
2015-03-10 14:40:06	<--	L8D (~L8D@99-156-81-153.lightspeed.austtx.sbcglobal.net) has quit (Ping timeout: 246 seconds)
2015-03-10 14:40:08	asdasdasd	lpaste.net, maybe i'll look it up
2015-03-10 14:40:16	-->	coltfred (~coltfred@71.15.210.194) has joined #haskell
2015-03-10 14:40:29	<--	solatis (~solatis@49.156.41.254) has quit (Ping timeout: 255 seconds)
2015-03-10 14:40:47	clrnd	asdasdasd, it works here, are you sure that's the source of the error?
2015-03-10 14:41:00	-->	CogNub (81104aca@gateway/web/freenode/ip.129.16.74.202) has joined #haskell
2015-03-10 14:41:18	aawe	asdasdasd: paste the offending line (the one with "return")
2015-03-10 14:41:37	asdasdasd	return array
2015-03-10 14:42:06	asdasdasd	i modified the name for unnecessary info
2015-03-10 14:42:10	clrnd	asdasdasd, and where are you "returning to"?
2015-03-10 14:42:55	asdasdasd	Right img -> do  			let array = Functions_imghax.konturAnalys img 			print(array)
2015-03-10 14:43:26	fizruk	is <$!> defined somewhere as strict fmap?
2015-03-10 14:43:29	asdasdasd	konturAnalys img is the function with the error code
2015-03-10 14:43:39	<--	ianjneu (~ianj@c-50-157-151-196.hsd1.ma.comcast.net) has quit (Ping timeout: 246 seconds)
2015-03-10 14:43:45	<--	bennofs (~benno@ip923432f4.dynamic.kabel-deutschland.de) has quit (Ping timeout: 250 seconds)
2015-03-10 14:43:53	asdasdasd	wow, code without linebreaks is bad
2015-03-10 14:43:55	asdasdasd	sorry!
2015-03-10 14:43:56	<--	erkin (~erkin@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2015-03-10 14:45:05	-->	bru` (~bruno`@5-49-32-115.hfc.dyn.abo.bbox.fr) has joined #haskell
2015-03-10 14:45:20	Kujanator	jtanguy: just seen your reply, if the first term is false in an AND isn't it always false? What other term can make it true?
2015-03-10 14:45:24	asdasdasd	http://lpaste.net/124393
2015-03-10 14:45:31	-->	mmh (~mmh@wvp3131.vpn.uni-wuerzburg.de) has joined #haskell
2015-03-10 14:45:40	aawe	asdasdasd: replace "return array" with "array"
2015-03-10 14:45:42	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-10 14:46:25	clrnd	asdasdasd, return is of type `a -> f a`
2015-03-10 14:46:41	aawe	return is a monad function, it wraps the value into a monad which in this case is the list monad []
2015-03-10 14:46:42	clrnd	asdasdasd, it seems to me tou just want your function to return the konturArray
2015-03-10 14:46:46	asdasdasd	aawe: wow, thanks! amazing the kind of errors haskell brings
2015-03-10 14:47:05	-->	mitochon_ (~JCI@75-144-75-149-Michigan.hfc.comcastbusiness.net) has joined #haskell
2015-03-10 14:47:18	asdasdasd	aha, thanks
2015-03-10 14:47:30	phaul	asdasdasd: also remove the `do' 
2015-03-10 14:47:44	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 14:47:44	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 272 seconds)
2015-03-10 14:47:53	-->	jvilla (~jvilla@186.101.153.165) has joined #haskell
2015-03-10 14:47:56	exio4	asdasdasd: you don't need to use do there
2015-03-10 14:47:58	phaul	you want let blah = ... ; in konturArray
2015-03-10 14:48:27	phaul	; is the newline
2015-03-10 14:48:32	-->	juanpaucar (~juanpauca@186.101.153.165) has joined #haskell
2015-03-10 14:48:34	<--	juanpaucar (~juanpauca@186.101.153.165) has quit (Read error: Connection reset by peer)
2015-03-10 14:48:41	-->	Big_G (~Big_G@c-98-225-5-170.hsd1.wa.comcast.net) has joined #haskell
2015-03-10 14:48:53	<--	waxjar (~waxjar@209.141.58.47) has quit (Ping timeout: 240 seconds)
2015-03-10 14:48:55	-->	juanpaucar (~juanpauca@186.101.153.165) has joined #haskell
2015-03-10 14:48:59	clrnd	asdasdasd, I;ve annotated a nicer way: http://lpaste.net/124393
2015-03-10 14:49:02	asdasdasd	so do is not needed if you want to execute several lines of code sequentially?
2015-03-10 14:49:10	<--	laudiacay_mobile (uid46610@gateway/web/irccloud.com/x-kqgszqukogtjqpvo) has quit (Quit: Connection closed for inactivity)
2015-03-10 14:49:17	jtanguy	Kujanator: i didn't say it would make it true
2015-03-10 14:49:23	<--	mitochon (~JCI@75-144-75-149-Michigan.hfc.comcastbusiness.net) has quit (Ping timeout: 250 seconds)
2015-03-10 14:49:37	-->	hywong (~hywong@cpe-104-35-161-186.socal.res.rr.com) has joined #haskell
2015-03-10 14:49:57	exio4	asdasdasd: you normally don't care about the order of things in pure functions
2015-03-10 14:50:02	jtanguy	it's like it evaluates both operands in order to lookup the truth table
2015-03-10 14:50:24	-->	jomg (~johannes@95.90.212.140) has joined #haskell
2015-03-10 14:50:29	exio4	you can pattern match on the where, too
2015-03-10 14:50:31	asdasdasd	clrnd: thanks man, these new ways of writing things keep surprising me! :)
2015-03-10 14:51:21	<--	arj (~arj@makaala.informatik.uni-freiburg.de) has quit (Quit: Leaving.)
2015-03-10 14:51:22	exio4	where (height,width) = (dynamicMap ... , dynamicMap ...)
2015-03-10 14:51:23	asdasdasd	great lot of help from you guys, thanks a lot! :)
2015-03-10 14:51:24	-->	iamjarvo (~textual@173-15-142-154-BusName-Philadelphia.hfc.comcastbusiness.net) has joined #haskell
2015-03-10 14:51:35	-->	mridul_seth (~mridul_se@178.62.224.87) has joined #haskell
2015-03-10 14:51:39	mridul_seth	I am thinking of starting functional programming (haskell or ocaml). What are some good online resources to start with ? :)
2015-03-10 14:51:39	-->	arj (~arj@makaala.informatik.uni-freiburg.de) has joined #haskell
2015-03-10 14:51:53	<--	Kujanator (4d633e2d@gateway/web/freenode/ip.77.99.62.45) has quit (Ping timeout: 246 seconds)
2015-03-10 14:52:11	clrnd	asdasdasd, `do` is only syntax sugar, check this out: http://en.wikibooks.org/wiki/Haskell/do_notation
2015-03-10 14:52:11	<--	iamjarvo (~textual@173-15-142-154-BusName-Philadelphia.hfc.comcastbusiness.net) has quit (Max SendQ exceeded)
2015-03-10 14:52:22	-->	anRch (~markmilli@c-66-31-56-160.hsd1.ma.comcast.net) has joined #haskell
2015-03-10 14:52:23	rom1504	mridul_seth: maybe http://learnyouahaskell.com/chapters
2015-03-10 14:52:34	-->	otulp (~otulp@cm-84.209.254.253.getinternet.no) has joined #haskell
2015-03-10 14:52:55	-->	iamjarvo (~textual@173-15-142-154-BusName-Philadelphia.hfc.comcastbusiness.net) has joined #haskell
2015-03-10 14:52:59	clrnd	mridul_seth, https://github.com/bitemyapp/learnhaskell
2015-03-10 14:53:27	<--	perspectival (~perspecti@54.21.broadband10.iol.cz) has quit (Ping timeout: 246 seconds)
2015-03-10 14:53:43	-->	cfricke (~cfricke@unaffiliated/cfricke) has joined #haskell
2015-03-10 14:54:07	mridul_seth	thanks :)
2015-03-10 14:54:10	mridul_seth	How difficult is to move from one functional language to another?
2015-03-10 14:54:13	<--	hywong (~hywong@cpe-104-35-161-186.socal.res.rr.com) has quit (Ping timeout: 244 seconds)
2015-03-10 14:54:44	clrnd	mridul_seth, depends from to which
2015-03-10 14:55:05	mniip	is there a way to control fixity of type-level operators? infixrl doesn't seem to work
2015-03-10 14:55:13	mridul_seth	for example between haskell and ocaml 
2015-03-10 14:56:35	<--	iamjarvo (~textual@173-15-142-154-BusName-Philadelphia.hfc.comcastbusiness.net) has quit (Client Quit)
2015-03-10 14:56:37	-->	fractalsea (~fractalse@37.157.39.238) has joined #haskell
2015-03-10 14:56:42	clrnd	mridul_seth, it's a really hard question :P, for example I had a hard time with ocaml
2015-03-10 14:57:15	-->	j4cknewt (~j4cknewt@c-68-53-58-107.hsd1.tn.comcast.net) has joined #haskell
2015-03-10 14:57:51	<--	slomo (~slomo@unaffiliated/slomo) has quit (Quit: Ex-Chat)
2015-03-10 14:59:05	<--	Denommus` (~AndChat42@unaffiliated/denommus) has quit (Read error: Connection reset by peer)
2015-03-10 14:59:12	-->	jeltsch (~wolfgang@kybi.ioc.ee) has joined #haskell
2015-03-10 14:59:17	-->	dino_joel (~dino_joel@207.251.103.46) has joined #haskell
2015-03-10 14:59:24	<--	safinaskar (~user@178.204.111.156) has quit (Ping timeout: 246 seconds)
2015-03-10 14:59:24	mroman	I'd say moving from Haskell to a less pure functional programming language is easier than from a less pure to a more pure one.
2015-03-10 14:59:53	-->	folone_ (~folone@80.82.202.196) has joined #haskell
2015-03-10 14:59:53	EvanR	youll be better prepared to wrangle impurities
2015-03-10 14:59:57	-->	Denommus` (~AndChat42@unaffiliated/denommus) has joined #haskell
2015-03-10 15:00:06	mroman	(fwiw people seem to claim Java as a functional programming language since recent new features)
2015-03-10 15:00:06	-->	chris3 (~chris@198.0.178.110) has joined #haskell
2015-03-10 15:00:07	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-10 15:00:16	tdammers	mroman: moving from Haskell back into the impure world is painful thpough
2015-03-10 15:00:25	mroman	tdammers: I know right.
2015-03-10 15:00:33	mroman	I'm always using ++ instead of + when not coding Haskell.
2015-03-10 15:00:33	-->	simukis_ (~nagisa@gk.mif.vu.lt) has joined #haskell
2015-03-10 15:00:36	mroman	That really sucks.
2015-03-10 15:00:50	-->	rgrinberg (~rgrinberg@66.49.218.159) has joined #haskell
2015-03-10 15:00:53	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 240 seconds)
2015-03-10 15:01:03	jaseemabid	I'm writing a small library and I'm unable to import it into my test files. Not sure where to start. Any help appreciated. Its all in the same cabal sandbox, so I was hoping it to just work. 
2015-03-10 15:01:09	-->	bennofs (~benno@ip923432f4.dynamic.kabel-deutschland.de) has joined #haskell
2015-03-10 15:01:11	exio4	mroman: that's not related to purity 
2015-03-10 15:01:12	-->	paxcoder (~paxcoder@unaffiliated/paxcoder) has joined #haskell
2015-03-10 15:01:16	merijn	Is there a nice haskell plotting library?
2015-03-10 15:01:18	mroman	tdammers: I have most trouble with using Exceptions as Control Flow.
2015-03-10 15:01:36	merijn	I'm using matplotlib now, but looking over code I wrote a few months back it's completely ununderstandable
2015-03-10 15:01:40	<--	petercommand (~peter@rlhsu.com) has quit (Remote host closed the connection)
2015-03-10 15:01:54	<--	JagaJaga_ (~JagaJaga@178.62.202.50) has quit (Ping timeout: 245 seconds)
2015-03-10 15:02:00	mroman	like void foo() { bar(); buz(); /* buz may abort with exception */ barabaz(); }
2015-03-10 15:02:05	paxcoder	Geez, how do I do time arithmetic? I just want to know if the difference betwee two time points is more than a day.
2015-03-10 15:02:10	mroman	of course, in real code no comment says that buz will do that.
2015-03-10 15:02:22	tdammers	mroman: you can't do exceptions right...
2015-03-10 15:02:27	paxcoder	(one of those points being current time)
2015-03-10 15:02:39	tdammers	unchecked exception -> too implicit; checked exceptions -> too much boilerplate
2015-03-10 15:02:41	tdammers	:D
2015-03-10 15:02:47	mroman	but Java has varargs
2015-03-10 15:02:52	mroman	you can do cool stuff with varargs.
2015-03-10 15:03:01	tdammers	Java has null references
2015-03-10 15:03:04	<--	laar (~lars@ip60-210-173-82.adsl2.static.versatel.nl) has quit (Quit: Leaving.)
2015-03-10 15:03:07	tdammers	*everything* is a Maybe
2015-03-10 15:03:09	-->	iamjarvo (~textual@50.153.130.3) has joined #haskell
2015-03-10 15:03:19	mroman	as in if(required(req1(), req2(), req3())) { ... } else { nope }
2015-03-10 15:03:32	<--	iamjarvo (~textual@50.153.130.3) has quit (Max SendQ exceeded)
2015-03-10 15:03:32	mroman	where required is (boolean... bools)
2015-03-10 15:03:37	jaseemabid	I can go to the specific test file in emacs, compile and then everything seems to be ok. runhaskell test/Test.hs or cabal test is unable to require the library. How can I ask cabal/runHaskell to look for libraries in the src/ folder also?
2015-03-10 15:03:43	-->	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has joined #haskell
2015-03-10 15:03:44	mroman	I prefer that to exception and nested ifs and stuff
2015-03-10 15:03:45	clrnd	everything is wrapped in fromJust too
2015-03-10 15:03:58	-->	RaceCondition (~RaceCondi@82.131.2.26.cable.starman.ee) has joined #haskell
2015-03-10 15:04:05	mroman	I'd even prefer it to &&
2015-03-10 15:04:21	tdammers	type Java = MaybeT ErrorT RWST IO ()
2015-03-10 15:04:49	<--	saikrishna (saikrishna@nat/iiit/x-wrhunowgdummfyzb) has quit (Ping timeout: 245 seconds)
2015-03-10 15:05:10	exio4	merijn: I only plotted things in "quick and dirty scripts", using easyplot there, and found it good enough, but probably not what you want
2015-03-10 15:05:10	-->	ashiato45 (~ashiato45@ae239062.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2015-03-10 15:05:16	tdammers	anyway, Java always baffles me with how inconsistent it is about compile-time guarantees
2015-03-10 15:05:21	<--	rgrinberg (~rgrinberg@66.49.218.159) has quit (Ping timeout: 252 seconds)
2015-03-10 15:05:26	<--	danthemyth (~danthemyt@50.246.66.202) has quit (Remote host closed the connection)
2015-03-10 15:05:26	<--	CodyReichert (~CodyReich@c-50-162-14-193.hsd1.tx.comcast.net) has quit (Quit: Lost terminal)
2015-03-10 15:05:28	merijn	tdammers: I have an idea on how to infer checked exceptions so you can mostly ignore them in type signatures but still write functions that guarantee "won't throw exceptions", how's that sound?
2015-03-10 15:05:33	-->	iamjarvo (~textual@50.153.130.3) has joined #haskell
2015-03-10 15:05:40	tdammers	merijn: in Java?
2015-03-10 15:05:43	-->	zzmiy1 (~zzmiy@86.57.155.45) has joined #haskell
2015-03-10 15:05:44	merijn	tdammers: No, haskell
2015-03-10 15:05:49	<--	iamjarvo (~textual@50.153.130.3) has quit (Max SendQ exceeded)
2015-03-10 15:06:07	merijn	tdammers: I'm not sure it can be retro-fitted in GHC without becomg to Haskell Report violating, though
2015-03-10 15:06:11	-->	danthemyth (~danthemyt@50.246.66.202) has joined #haskell
2015-03-10 15:06:13	<--	hibou107_ (807f1379@gateway/web/freenode/ip.128.127.19.121) has quit (Ping timeout: 246 seconds)
2015-03-10 15:06:23	-->	iamjarvo (~textual@50.153.130.3) has joined #haskell
2015-03-10 15:06:23	<--	frodwith (~pdriver@CPE-72-128-209-23.wi.res.rr.com) has quit (Ping timeout: 246 seconds)
2015-03-10 15:06:31	tdammers	would be cool, I guess
2015-03-10 15:06:37	-->	zunpre (~zunpre@78.156.102.12) has joined #haskell
2015-03-10 15:06:58	<--	zzmiy (~zzmiy@2a02:6b8:0:3504:a40e:c1b1:1e31:c857) has quit (Ping timeout: 252 seconds)
2015-03-10 15:07:23	<--	danthemyth (~danthemyt@50.246.66.202) has quit (Remote host closed the connection)
2015-03-10 15:07:51	<--	dino_joel (~dino_joel@207.251.103.46) has quit (Quit: Textual IRC Client: www.textualapp.com)
2015-03-10 15:08:40	 *	hackagebot xcffib 0.2.1 - A cffi-based python binding for X  http://hackage.haskell.org/package/xcffib-0.2.1 (TychoAndersen)
2015-03-10 15:08:54	<--	paxcoder (~paxcoder@unaffiliated/paxcoder) has quit (Quit: Leaving)
2015-03-10 15:09:22	<--	simukis_ (~nagisa@gk.mif.vu.lt) has quit (Quit: simukis_)
2015-03-10 15:09:45	<--	nshepperd (~asdfg@ppp118-209-99-238.lns20.mel4.internode.on.net) has quit (Ping timeout: 264 seconds)
2015-03-10 15:09:49	<--	iamjarvo (~textual@50.153.130.3) has quit (Client Quit)
2015-03-10 15:09:53	-->	petercommand (~peter@rlhsu.com) has joined #haskell
2015-03-10 15:10:05	<--	petercommand (~peter@rlhsu.com) has quit (Changing host)
2015-03-10 15:10:05	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell
2015-03-10 15:10:12	-->	vlatkoB_ (~IRC_clien@unaffiliated/vlatkob) has joined #haskell
2015-03-10 15:10:16	-->	zegeri (~zegeri@137.Red-95-122-42.staticIP.rima-tde.net) has joined #haskell
2015-03-10 15:10:39	idem-pyon-tent	Using kind polymorphism, is there any way to a generalized functor class that subsumes both Functor and Bifunctor?
2015-03-10 15:10:45	<--	narendraj9 (~narendraj@106.76.143.114) has quit (Ping timeout: 244 seconds)
2015-03-10 15:11:00	-->	iamjarvo (~textual@50.153.130.3) has joined #haskell
2015-03-10 15:11:50	-->	simukis_ (~nagisa@gk.mif.vu.lt) has joined #haskell
2015-03-10 15:12:02	-->	it0a (~it0a@rrcs-24-56-88-130.ma.biz.rr.com) has joined #haskell
2015-03-10 15:12:23	-->	agocorona1 (251dadec@gateway/web/freenode/ip.37.29.173.236) has joined #haskell
2015-03-10 15:12:31	-->	rmorgan (~rmorgan@c-76-105-186-175.hsd1.or.comcast.net) has joined #haskell
2015-03-10 15:12:43	-->	ghci (81104e5b@gateway/web/freenode/ip.129.16.78.91) has joined #haskell
2015-03-10 15:13:11	-->	danthemyth (~danthemyt@50.246.66.202) has joined #haskell
2015-03-10 15:13:20	--	agocorona1 is now known as agocorona
2015-03-10 15:13:21	<--	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has quit (Quit: dysinger)
2015-03-10 15:13:38	-->	safinaskar (~user@178.205.88.63) has joined #haskell
2015-03-10 15:13:47	-->	iamjarvo_ (~textual@50.144.0.135) has joined #haskell
2015-03-10 15:13:49	<--	c74d (~c74d3a4eb@2002:4404:712c:0:76de:2bff:fed4:2766) has quit (Remote host closed the connection)
2015-03-10 15:13:53	-->	haskellhelppls (811048b8@gateway/web/freenode/ip.129.16.72.184) has joined #haskell
2015-03-10 15:13:54	-->	zenith__ (~zenith@199-7-157-72.eng.wind.ca) has joined #haskell
2015-03-10 15:13:54	<--	zenith_ (~zenith@user3-85-107.wireless.utoronto.ca) has quit (Read error: Connection reset by peer)
2015-03-10 15:13:55	safinaskar	yoshuawuyts: look for monads in "learn you a haskell". very good
2015-03-10 15:14:00	-->	`^_^v (~nycs@gw.hq.meetup.com) has joined #haskell
2015-03-10 15:14:04	<--	vlatkoB (~IRC_clien@unaffiliated/vlatkob) has quit (Ping timeout: 265 seconds)
2015-03-10 15:15:03	<--	mridul_seth (~mridul_se@178.62.224.87) has quit
2015-03-10 15:15:26	<--	safinaskar (~user@178.205.88.63) has left #haskell
2015-03-10 15:15:34	haskellhelppls	Hi, where should I write the Int list when defining ask? http://lpaste.net/124396
2015-03-10 15:15:34	<--	iamjarvo (~textual@50.153.130.3) has quit (Ping timeout: 255 seconds)
2015-03-10 15:15:36	yoshuawuyts	safinaskar: hah, thanks. I understand them now though. All I needed was an example in syntax I know to make it *click*. If someone said: "ES6 promises are basically a monad" I'd have understood
2015-03-10 15:16:05	EvanR	whats an ES6 promise?
2015-03-10 15:16:16	-->	c74d (~c74d3a4eb@2002:4404:712c:0:76de:2bff:fed4:2766) has joined #haskell
2015-03-10 15:16:20	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2015-03-10 15:16:36	tdammers	standardized promises API based on all the popular pre-ES6 implementation that were making rounds?
2015-03-10 15:16:37	<--	Paradisee_ (~quassel@2.239.28.120) has quit (Remote host closed the connection)
2015-03-10 15:16:52	<--	C4Cypher (~c4cypher@ip68-226-3-49.ga.at.cox.net) has quit (Ping timeout: 272 seconds)
2015-03-10 15:17:09	rzetterberg	haskellhelppls: Try using elem as infix instead: "x `elem` ["a", "b", "c", "d"]"
2015-03-10 15:17:15	yoshuawuyts	EvanR: EcmaScript 6, aka ES2015, aka JavaScript 6
2015-03-10 15:17:20	EvanR	a
2015-03-10 15:17:30	-->	iamjarvo (~textual@c-73-30-68-186.hsd1.pa.comcast.net) has joined #haskell
2015-03-10 15:17:45	<--	iamjarvo (~textual@c-73-30-68-186.hsd1.pa.comcast.net) has quit (Max SendQ exceeded)
2015-03-10 15:17:47	EvanR	how are they a monad
2015-03-10 15:17:50	-->	Lokathor_ (~Lokathor@75-167-149-201.bois.qwest.net) has joined #haskell
2015-03-10 15:18:04	haskellhelppls	rzetterberg: That is not our problem exactly... We want to implement this list [0,0,0,0] in the ask-function
2015-03-10 15:18:19	-->	narendraj9 (~narendraj@27.97.242.177) has joined #haskell
2015-03-10 15:18:31	rzetterberg	haskellhelppls: Sorry, thought the problem was with the warning.
2015-03-10 15:18:32	-->	iamjarvo (~textual@c-73-30-68-186.hsd1.pa.comcast.net) has joined #haskell
2015-03-10 15:18:37	merijn	EvanR: "data Promise a" plus async callback "a -> Promise b"?
2015-03-10 15:18:43	<--	iamjarvo_ (~textual@50.144.0.135) has quit (Ping timeout: 252 seconds)
2015-03-10 15:18:53	yoshuawuyts	EvanR: well, they wrap functions that are then chained to do chain data through. My explenation skills aren't very good though :p
2015-03-10 15:18:56	EvanR	oh is that how it works ok
2015-03-10 15:19:03	EvanR	similar to "jquery is a monad"
2015-03-10 15:19:03	haskellhelppls	:rzetterberg: no worries... but do you understand our current problem? I'm kind of stuck.. :(
2015-03-10 15:19:11	-->	grc` (~user@host81-142-89-185.in-addr.btopenworld.com) has joined #haskell
2015-03-10 15:19:13	merijn	EvanR: Basically, Promises are Async from async library
2015-03-10 15:19:17	<--	grc (~user@host81-142-89-185.in-addr.btopenworld.com) has quit (Read error: Connection reset by peer)
2015-03-10 15:19:26	merijn	which, incidentally is a monad too
2015-03-10 15:19:33	yoshuawuyts	merijn: hah, thanks :P
2015-03-10 15:19:34	-->	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2015-03-10 15:19:51	yoshuawuyts	s/explenation/explanation/
2015-03-10 15:20:09	merijn	yoshuawuyts: On that note, you should look at async for the haskell way of handling async operations
2015-03-10 15:20:17	-->	rmarianski (~rmariansk@209.20.72.181) has joined #haskell
2015-03-10 15:20:17	-->	cfoch (~cfoch@181.67.172.21) has joined #haskell
2015-03-10 15:20:18	-->	lritter (~lritter@f053081079.adsl.alicedsl.de) has joined #haskell
2015-03-10 15:20:21	clrnd	if Java is a monad transformer stack, JS is that + unsafePerformIO
2015-03-10 15:20:23	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2015-03-10 15:20:30	rzetterberg	haskellhelppls: Not really. If you explain what you are trying to achieve and what problems you encounter I could probably help you though :)
2015-03-10 15:20:34	yoshuawuyts	merijn: the async module on npm you mean? which parts are haskelly from that?
2015-03-10 15:20:52	EvanR	clrnd: dont make my head explode first thing in th morning
2015-03-10 15:20:53	-->	mada (~mariano@190.191.129.66) has joined #haskell
2015-03-10 15:21:04	clrnd	:P
2015-03-10 15:21:18	<--	fumieval (~fumieval@61-21-106-85.rev.home.ne.jp) has quit (Ping timeout: 272 seconds)
2015-03-10 15:21:18	<--	zzmiy1 (~zzmiy@86.57.155.45) has quit (Read error: Connection reset by peer)
2015-03-10 15:21:20	greeny	haskellhelppls: even your base case dont seem to work for me. ask takes two parameters...
2015-03-10 15:21:31	-->	zzmiy (~zzmiy@2a02:6b8:0:3504:5c6a:9c19:1f6a:1da2) has joined #haskell
2015-03-10 15:21:48	<--	kranius (~kranius@78.250.113.224) has quit (Ping timeout: 246 seconds)
2015-03-10 15:21:50	greeny	use: ask [] _ = putStrLn "..."
2015-03-10 15:21:59	yoshuawuyts	clrnd: not sure what all that meant but sounds like it ain't going well for JS :P
2015-03-10 15:22:23	merijn	yoshuawuyts: No, the haskell library async
2015-03-10 15:22:26	merijn	@hackage async
2015-03-10 15:22:26	lambdabot	http://hackage.haskell.org/package/async
2015-03-10 15:22:40	<--	agocorona (251dadec@gateway/web/freenode/ip.37.29.173.236) has quit (Ping timeout: 246 seconds)
2015-03-10 15:22:43	tdammers	well, at least in JS you can have closures without introducing a meaningless anonymous class
2015-03-10 15:22:45	yoshuawuyts	lambdabot: ohi, you're pretty neat
2015-03-10 15:22:46	clrnd	I'm gonna say it only once: JS is the best mainstream language we have available
2015-03-10 15:23:06	 *	clrnd hides under a rock
2015-03-10 15:23:08	tdammers	clrnd: what a cruel truth
2015-03-10 15:23:10	haskellhelppls	Okay. I'm trying to create a "sorting-hat" as in harry potter. So using this program, one will answer different 10 questions, and can answer using 4 different alternatives. http://lpaste.net/124397  We want it so that answering alternative "a" will increase the first element of a list as this [0,0,0,0] to [1,0,0,0] 
2015-03-10 15:23:12	 *	EvanR increments clrnd's counter
2015-03-10 15:23:23	EvanR	(for number of times he said that)
2015-03-10 15:23:26	EvanR	currently 1
2015-03-10 15:23:38	greeny	haskellhelppls: entcoundering same problem on the second case. why do you omit the integer array?
2015-03-10 15:23:41	 *	hackagebot diagrams-rubiks-cube 0.1.0.0 - Library for drawing the Rubik's Cube.  http://hackage.haskell.org/package/diagrams-rubiks-cube-0.1.0.0 (TimBaumann)
2015-03-10 15:23:41	yoshuawuyts	hahaha, wow.
2015-03-10 15:24:02	haskellhelppls	greeny: have u tried using the latest code i sent? http://lpaste.net/124397
2015-03-10 15:24:17	yoshuawuyts	merijn: thanks, will plow through it to improve my h4cksc477 5k1775
2015-03-10 15:24:18	<--	folone_ (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-10 15:24:18	EvanR	javascript and haskell are practically all you ever need ;)
2015-03-10 15:24:25	<--	ystael (~ystael@209-6-53-93.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 252 seconds)
2015-03-10 15:24:26	-->	folone (~folone@80.82.202.196) has joined #haskell
2015-03-10 15:24:28	EvanR	browser vs desktop / browser
2015-03-10 15:24:35	yoshuawuyts	and incidentally my understanding of life
2015-03-10 15:24:38	EvanR	poor phones :(
2015-03-10 15:24:51	-->	pheaver (~pweaver@c-98-246-241-218.hsd1.or.comcast.net) has joined #haskell
2015-03-10 15:24:54	jameseb	haskellhelppls: a 4-tuple of Ints may be what you want instead of a list of Ints
2015-03-10 15:25:23	merijn	yoshuawuyts: As far as I know about JS promises/what not (very little), async is basically everything they do and more, except implemented as library instead of building it into the language
2015-03-10 15:25:26	tdammers	I sense integer blindness
2015-03-10 15:25:26	-->	h (81104e06@gateway/web/freenode/ip.129.16.78.6) has joined #haskell
2015-03-10 15:25:40	-->	lifter (~lifter@199.16.190.210) has joined #haskell
2015-03-10 15:25:41	<--	osa1 (~omer@2601:f:400:a8b1:2ab2:bdff:fedf:fa66) has quit (Ping timeout: 252 seconds)
2015-03-10 15:25:49	--	h is now known as Guest25565
2015-03-10 15:25:51	tdammers	data House = Ravenclaw | Gryffindor | Hufflepuff | Slytherin
2015-03-10 15:25:56	-->	triliyn (~lioneyes@50.141.86.3) has joined #haskell
2015-03-10 15:26:09	-->	vozcelik (~vozcelik@c-76-21-61-230.hsd1.ca.comcast.net) has joined #haskell
2015-03-10 15:26:30	 *	EvanR uses eyedrops to cure status effect
2015-03-10 15:26:30	yoshuawuyts	merijn: as it should be imo. JS is going to be of C++ like proportions soon
2015-03-10 15:26:52	tdammers	collect answers into a list, sort, group, count lengths
2015-03-10 15:26:55	tdammers	vOv
2015-03-10 15:27:21	haskellhelppls	tdammers: how?
2015-03-10 15:27:34	-->	darkbolt (~darkbolt@23.252.55.57) has joined #haskell
2015-03-10 15:27:44	-->	frodwith (~pdriver@CPE-72-128-209-23.wi.res.rr.com) has joined #haskell
2015-03-10 15:27:58	-->	creichert (~creichert@c-50-162-14-193.hsd1.tx.comcast.net) has joined #haskell
2015-03-10 15:28:29	-->	Luke (~Luke@unaffiliated/luke) has joined #haskell
2015-03-10 15:28:39	<--	j4cknewt (~j4cknewt@c-68-53-58-107.hsd1.tn.comcast.net) has quit (Remote host closed the connection)
2015-03-10 15:28:48	haskellhelppls	jameseb: How shall I implement that tho?
2015-03-10 15:28:56	<--	zzmiy (~zzmiy@2a02:6b8:0:3504:5c6a:9c19:1f6a:1da2) has quit (Quit: Leaving.)
2015-03-10 15:29:15	<--	junmin (~junmin@189-210-226-30.static.axtel.net) has quit
2015-03-10 15:29:19	-->	tomphreek (~tomphreek@li351-236.members.linode.com) has joined #haskell
2015-03-10 15:29:24	saep	haskellhelppls: step by step ;)
2015-03-10 15:30:18	jameseb	haskellhelppls: (Int, Int, Int, Int)
2015-03-10 15:30:33	jameseb	what tdammers said would work too
2015-03-10 15:30:47	-->	vpetro (~petrov@modemcable114.5-70-69.static.videotron.ca) has joined #haskell
2015-03-10 15:30:59	jameseb	not sure which would be more efficient
2015-03-10 15:31:13	-->	zzmiy (~zzmiy@2a02:6b8:0:3504:2acf:e9ff:fe19:7c63) has joined #haskell
2015-03-10 15:31:28	clrnd	efficiency is not the issue ....
2015-03-10 15:31:32	jameseb	true
2015-03-10 15:31:43	-->	ianjneu (~ianj@syrah.ccs.neu.edu) has joined #haskell
2015-03-10 15:31:45	haskellhelppls	jameseb: Thanks!! it works now I think
2015-03-10 15:32:25	-->	kranius (~kranius@78.250.109.207) has joined #haskell
2015-03-10 15:32:33	<--	DerisiveLogic (~smuxi@cpe-74-72-21-199.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2015-03-10 15:32:42	<--	darkbolt (~darkbolt@23.252.55.57) has quit (Ping timeout: 272 seconds)
2015-03-10 15:32:43	jameseb	haskellhelppls: defining a House type as tdammers suggested would be a good idea
2015-03-10 15:33:00	haskellhelppls	it worked doing (Int, Int, Int, Int) though...
2015-03-10 15:33:11	haskellhelppls	feels less complicated aswell
2015-03-10 15:33:14	<--	amiri (~amiri@cpe-104-174-60-215.socal.res.rr.com) has quit (Read error: Connection reset by peer)
2015-03-10 15:33:23	EvanR	using Ints might be less complicated
2015-03-10 15:33:26	-->	agocorona (251dadec@gateway/web/freenode/ip.37.29.173.236) has joined #haskell
2015-03-10 15:33:27	EvanR	and harder to get right
2015-03-10 15:33:27	jameseb	because then you can make ask a pure function rather than having it all in IO
2015-03-10 15:33:31	-->	amiri (~amiri@cpe-104-174-60-215.socal.res.rr.com) has joined #haskell
2015-03-10 15:33:37	Guest25565	hello we have tried to define this function, but whenever we get an input that is not an Int the program crashes. how do we make it not crash and instead get an error message that doesnt close it down?
2015-03-10 15:33:49	Guest25565	http://lpaste.net/124398
2015-03-10 15:33:59	jameseb	well, maybe not ask
2015-03-10 15:34:44	-->	rodlogic (~rodlogic@c-50-138-158-240.hsd1.ct.comcast.net) has joined #haskell
2015-03-10 15:35:02	clrnd	Guest25565, use reads and pattern match on an empty string https://hackage.haskell.org/package/base-4.7.0.2/docs/Text-Read.html
2015-03-10 15:35:03	<--	rodlogic (~rodlogic@c-50-138-158-240.hsd1.ct.comcast.net) has quit (Remote host closed the connection)
2015-03-10 15:35:04	aawe	Guest14990: readMay
2015-03-10 15:35:08	aawe	:t readMay
2015-03-10 15:35:08	lambdabot	Not in scope: ?readMay?
2015-03-10 15:35:09	clrnd	that too
2015-03-10 15:35:12	aawe	:t readMaybe
2015-03-10 15:35:13	lambdabot	Not in scope: ?readMaybe?
2015-03-10 15:35:17	aawe	hmpf
2015-03-10 15:35:22	clrnd	:t Safe.readMay
2015-03-10 15:35:23	lambdabot	Read a => String -> Maybe a
2015-03-10 15:35:27	tdammers	ok, here's how I'd approach it
2015-03-10 15:35:31	-->	rodlogic (~rodlogic@c-50-138-158-240.hsd1.ct.comcast.net) has joined #haskell
2015-03-10 15:35:33	-->	mankaev (~mankaev@2a02:2168:18c0:3400:fcc8:49d1:32f3:6e8e) has joined #haskell
2015-03-10 15:35:44	Guest25565	how do we use readMaybe?
2015-03-10 15:35:46	tdammers	first, you need a function that asks a question and returns the answer into IO
2015-03-10 15:35:51	jameseb	haskellhelppls: you could have ask :: String -> [String] -> IO House
2015-03-10 15:36:10	tdammers	askQuestion :: String -> [(House, String)] -> IO House
2015-03-10 15:36:11	yoshuawuyts	merijn: ohey, you work at the UvA
2015-03-10 15:36:28	tdammers	(where the first argument is the question, and the second is a list of possible answers)
2015-03-10 15:36:30	yoshuawuyts	merijn: or well, assuming github.com/merijn is you :P
2015-03-10 15:36:31	-->	codesoup (~codesoup@CPE68b6fcf580d3-CM68b6fcf580d0.cpe.net.cable.rogers.com) has joined #haskell
2015-03-10 15:36:47	<--	_ashbreeze_ (~mark@99-195-197-154.dyn.centurytel.net) has quit (Remote host closed the connection)
2015-03-10 15:36:49	-->	n0n3such (~n0n3such@cpe-66-68-33-69.austin.res.rr.com) has joined #haskell
2015-03-10 15:36:54	tdammers	askQuestion :: (String, [(House, String)]) -> IO House -- would also work
2015-03-10 15:36:56	-->	indygemma (~conrad@5.196.176.23) has joined #haskell
2015-03-10 15:37:02	-->	muzzle (~Adium@mnch-4d046503.pool.mediaways.net) has joined #haskell
2015-03-10 15:37:15	tdammers	or, even better, bake it into a data type:
2015-03-10 15:37:17	exio4	I used an ad-hoc tree for my "QA" toy program 
2015-03-10 15:37:19	merijn	yoshuawuyts: Yeah
2015-03-10 15:37:26	clrnd	> let mx = Safe.readMay '5' :: Int in maybe 0 id mx
2015-03-10 15:37:32	lambdabot	 Not in scope: ?Safe.readMay?
2015-03-10 15:37:40	tdammers	data Question = Question { questionText :: String, answerOptions :: [(House, String)] }
2015-03-10 15:37:40	yoshuawuyts	merijn: cool! I'm logging of now though, thanks for all the help ^^
2015-03-10 15:37:58	tdammers	then you can declare a list of questions somewhere
2015-03-10 15:38:04	<--	agocorona (251dadec@gateway/web/freenode/ip.37.29.173.236) has quit (Ping timeout: 246 seconds)
2015-03-10 15:38:05	-->	_ashbreeze_ (~mark@99-195-197-154.dyn.centurytel.net) has joined #haskell
2015-03-10 15:38:06	tdammers	questions :: [Question]
2015-03-10 15:38:11	-->	j4cknewt (~j4cknewt@c-68-53-58-107.hsd1.tn.comcast.net) has joined #haskell
2015-03-10 15:38:13	tdammers	easy peasy
2015-03-10 15:38:15	<--	_deepfire (~chatzilla@31.44.93.25) has quit (Ping timeout: 246 seconds)
2015-03-10 16:16:02	--	irc: disconnected from server
2015-03-10 16:16:50	-->	yoshuawuyts (~yoshuawuy@csp8.waag.org) has joined #haskell
2015-03-10 16:16:50	--	Topic for #haskell is "http://www.haskell.org/ | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2015-03-10 16:16:50	--	Topic set by geekosaur on Sun, 21 Dec 2014 22:35:50
2015-03-10 16:16:50	--	Channel #haskell: 1544 nicks (1 op, 0 voices, 1543 normals)
2015-03-10 16:16:50	--	URL for #haskell: http://www.haskell.org/
2015-03-10 16:17:10	-->	hrolf (~hrolf@unaffiliated/hrolf) has joined #haskell
2015-03-10 16:17:12	--	Channel created on Sun, 26 Nov 2006 07:42:48
2015-03-10 16:17:27	TobiasH_	clnd: Really? This ( http://codepad.org/xTTDHZzl ) is complicated? It's just copied from here ( http://hackage.haskell.org/package/scotty ).
2015-03-10 16:17:42	merijn	creichert: tbh, I learned a ton from conversation I didn't understand while lurking here as a beginner
2015-03-10 16:17:53	<--	triliyn (~lioneyes@50.141.86.3) has quit (Ping timeout: 245 seconds)
2015-03-10 16:18:14	clrnd	TobiasH_, no, the 100MB one
2015-03-10 16:18:14	<--	theorbtwo (~theorb@cpc3-swin16-2-0-cust28.3-1.cable.virginm.net) has quit (Remote host closed the connection)
2015-03-10 16:18:24	TobiasH_	clnd: Under Windows 7 I reproduced the problem with GHC 7.8.3.
2015-03-10 16:18:26	<--	dav (~david@unaffiliated/dav) has quit (Ping timeout: 244 seconds)
2015-03-10 16:18:33	<--	n0n3such (~n0n3such@cpe-66-68-33-69.austin.res.rr.com) has quit (Remote host closed the connection)
2015-03-10 16:18:33	exio4	TobiasH_: are you compiling with -O2? 
2015-03-10 16:18:51	TobiasH_	clrnd: Yes, the 100MB one is quite big. I will let the small example run over night to see what happens.
2015-03-10 16:18:53	merijn	TobiasH_: 100MB as listed by windows?
2015-03-10 16:18:59	TobiasH_	exio4: Yes.
2015-03-10 16:19:14	clrnd	merijn, 100MB is another example
2015-03-10 16:19:16	TobiasH_	marijn: Yes, shown in the task manager.
2015-03-10 16:19:19	clrnd	exio4, ^
2015-03-10 17:11:12	--	irc: disconnected from server
2015-03-10 17:11:45	-->	yoshuawuyts (~yoshuawuy@csp8.waag.org) has joined #haskell
2015-03-10 17:11:45	--	Topic for #haskell is "http://www.haskell.org/ | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2015-03-10 17:11:45	--	Topic set by geekosaur on Sun, 21 Dec 2014 22:35:50
2015-03-10 17:11:45	--	Channel #haskell: 1547 nicks (1 op, 0 voices, 1546 normals)
2015-03-10 17:11:45	--	URL for #haskell: http://www.haskell.org/
2015-03-10 17:11:59	-->	JoshieAS (~Joshie@63-234-145-250.dia.static.qwest.net) has joined #haskell
2015-03-10 17:12:07	--	Channel created on Sun, 26 Nov 2006 07:42:48
2015-03-10 17:12:09	-->	joobus (~Kira@97.75.125.226) has joined #haskell
2015-03-10 17:13:42	-->	chenshen (~chenshen@c-24-6-53-209.hsd1.ca.comcast.net) has joined #haskell
2015-03-10 17:13:55	<--	gentaz (~chatzilla@106.221.222.187) has quit (Remote host closed the connection)
2015-03-10 17:14:02	JoshieAS	what does the octothorpe denote in typing?
2015-03-10 17:14:15	JoshieAS	like I# or +# or Int#?
2015-03-10 17:14:19	Jesin	c_wraith: a theory in which the set of axioms is defined as the set of all true statements is complete. What Godel proved is that no complete theory powerful enough to express Peano arithmetic can have a computably enumerable set of axioms.
2015-03-10 17:14:21	<--	tyfghuijpko (81104bc4@gateway/web/freenode/ip.129.16.75.196) has quit (Ping timeout: 246 seconds)
2015-03-10 17:14:21	c_wraith	JoshieAS: it's a convention for unboxed internal types
2015-03-10 17:14:31	<--	dolio (~dolio@c-71-233-149-94.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2015-03-10 17:14:36	<--	innertracks (~Thunderbi@c-98-203-134-27.hsd1.wa.comcast.net) has quit (Quit: innertracks)
2015-03-10 17:14:54	<--	folone (~folone@80.82.202.196) has quit (Read error: Connection reset by peer)
2015-03-10 17:14:54	-->	folone_ (~folone@80.82.202.196) has joined #haskell
2015-03-10 17:14:58	<--	tv (~tv@unaffiliated/tv) has quit (Ping timeout: 252 seconds)
2015-03-10 17:15:07	JoshieAS	so no pointers/allocations?
2015-03-10 17:15:16	-->	dolio (~dolio@c-71-233-149-94.hsd1.ma.comcast.net) has joined #haskell
2015-03-10 17:22:41	--	irc: disconnected from server
2015-03-10 17:23:14	-->	yoshuawuyts (~yoshuawuy@csp8.waag.org) has joined #haskell
2015-03-10 17:23:14	--	Topic for #haskell is "http://www.haskell.org/ | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2015-03-10 17:23:14	--	Topic set by geekosaur on Sun, 21 Dec 2014 22:35:50
2015-03-10 17:23:14	--	Channel #haskell: 1551 nicks (1 op, 0 voices, 1550 normals)
2015-03-10 17:23:14	--	URL for #haskell: http://www.haskell.org/
2015-03-10 17:23:19	Yuras	unless there is good reason for it to exist
2015-03-10 17:23:36	--	Channel created on Sun, 26 Nov 2006 07:42:48
2015-03-10 17:23:43	exio4	I guess it is a nice way to make something like this valid
2015-03-10 17:23:45	clrnd	> succ `   fmap        ` Just 5
2015-03-10 17:23:46	lambdabot	 Just 6
2015-03-10 17:23:58	<--	ddellacosta (~ddellacos@softbank126114212003.bbtec.net) has quit (Remote host closed the connection)
2015-03-10 17:23:58	exio4	where f = a `abc` b
2015-03-10 17:24:16	exio4	      g = a `ab ` e 
2015-03-10 17:24:35	<--	WraithM (~matt@c-24-1-192-146.hsd1.il.comcast.net) has quit (Quit: leaving)
2015-03-10 17:24:35	<--	crobbins (~crobbins@c-73-201-214-48.hsd1.va.comcast.net) has quit (Remote host closed the connection)
2015-03-10 17:24:35	EvanR	i thought about that but
2015-03-10 17:24:35	-->	ddellacosta (~ddellacos@softbank126114212003.bbtec.net) has joined #haskell
2015-03-10 17:24:35	-->	lifter (~lifter@199.16.190.210) has joined #haskell
2015-03-10 17:24:37	<--	theorbtwo (~theorb@cpc3-swin16-2-0-cust28.3-1.cable.virginm.net) has quit (Remote host closed the connection)
2015-03-10 17:24:38	<--	TheLemonMan (~lemonboy@unaffiliated/thelemonman) has quit (Quit: leaving)
2015-03-10 17:24:39	EvanR	g = a `ab`  e
2015-03-10 17:24:41	<--	angrygoats (~tbockman@69.194.135.252) has quit (Ping timeout: 252 seconds)
2015-03-10 17:24:47	<--	zunpre (~zunpre@78.156.102.12) has quit (Read error: Connection reset by peer)
2015-03-10 17:24:56	-->	trism (~jconti@unaffiliated/trism) has joined #haskell
2015-03-10 17:25:01	EvanR	also its probably pretty easy to just throw in "and then skip whitespace" into the parser
2015-03-10 17:25:03	<--	sprang (~sprang@2601:9:8680:56:eab1:fcff:febb:cca4) has quit (Ping timeout: 265 seconds)
2015-03-10 17:25:11	EvanR	so they did
2015-03-10 17:39:08	--	irc: disconnected from server
2015-03-10 17:39:44	-->	yoshuawuyts (~yoshuawuy@csp8.waag.org) has joined #haskell
2015-03-10 17:39:44	--	Topic for #haskell is "http://www.haskell.org/ | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2015-03-10 17:39:44	--	Topic set by geekosaur on Sun, 21 Dec 2014 22:35:50
2015-03-10 17:39:44	--	Channel #haskell: 1546 nicks (1 op, 0 voices, 1545 normals)
2015-03-10 17:39:44	--	URL for #haskell: http://www.haskell.org/
2015-03-10 17:39:53	-->	hendrikm (~smuxi@82.131.114.132.cable.starman.ee) has joined #haskell
2015-03-10 17:40:04	--	Channel created on Sun, 26 Nov 2006 07:42:48
2015-03-10 17:40:16	merijn	Yuras: CPP can't do whatever it wants, there's a rigid specification of exactly what it does in the standard of what it does
2015-03-10 17:40:44	<--	ddellacosta (~ddellacos@softbank126114212003.bbtec.net) has quit (Ping timeout: 256 seconds)
2015-03-10 17:41:12	<--	mankaev (~mankaev@2a02:2168:18c0:3400:fcc8:49d1:32f3:6e8e) has quit (Remote host closed the connection)
2015-03-10 17:41:26	-->	mankaev (~mankaev@2a02:2168:18c0:3400:fcc8:49d1:32f3:6e8e) has joined #haskell
2015-03-10 17:41:31	<--	_TK_ (~TK@82.131.75.78.cable.starman.ee) has quit (Max SendQ exceeded)
2015-03-10 17:41:35	Yuras	merijn: https://github.com/haskell/cabal/issues/2210
2015-03-10 17:42:09	-->	Pratik151 (~Pratik151@49.207.88.109) has joined #haskell
2015-03-10 17:42:12	-->	_TK_ (~TK@82.131.75.78.cable.starman.ee) has joined #haskell
2015-03-10 17:42:25	<--	mankaev (~mankaev@2a02:2168:18c0:3400:fcc8:49d1:32f3:6e8e) has quit (Remote host closed the connection)
2015-03-10 17:42:40	-->	mankaev (~mankaev@2a02:2168:18c0:3400:fcc8:49d1:32f3:6e8e) has joined #haskell
2015-03-10 17:42:49	<--	pfurla (~textual@static-100-33-141-114.nycmny.fios.verizon.net) has quit (Read error: Connection reset by peer)
2015-03-10 17:42:58	<--	iamjarvo (~textual@pool-98-115-181-52.phlapa.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz?)
2015-03-10 17:43:01	-->	pfurla (~textual@static-100-33-141-114.nycmny.fios.verizon.net) has joined #haskell
2015-03-10 17:43:30	<--	gcganley (~user@c-75-67-180-199.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2015-03-10 17:43:38	Yuras	merijn: https://gcc.gnu.org/onlinedocs/cpp/Overview.html
2015-03-10 17:43:48	 *	hackagebot cuda 0.6.6.0 - FFI binding to the CUDA interface for programming NVIDIA GPUs  http://hackage.haskell.org/package/cuda-0.6.6.0 (TrevorMcDonell)
2015-03-10 17:43:52	<--	mjboa (~mike@p4FF43036.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2015-03-10 17:43:53	Yuras	merijn: Also, you cannot rely on it preserving characteristics of the input which are not significant to C-family languages. If a Makefile is preprocessed, all the hard tabs will be removed, and the Makefile will not work. 
2015-03-10 17:44:12	<--	sbrg (~identity@unaffiliated/identity) has quit (Ping timeout: 244 seconds)
2015-03-10 17:44:39	Yuras	merijn: I have no idea about the standard, but cpp messes tabs more often then spaces
2015-03-10 17:44:56	-->	sbrg (~identity@unaffiliated/identity) has joined #haskell
2015-03-10 17:45:01	<--	hsk4 (~product--@gateway/vpn/privateinternetaccess/product--) has quit (Quit: hsk4)
2015-03-10 17:46:08	<--	lukaramu (~lukaramu@port-5762.pppoe.wtnet.de) has quit (Quit: whoops)
2015-03-10 17:46:08	<--	djbeau (~djbeau@inet-hqmc05-o.oracle.com) has quit (Remote host closed the connection)
2015-03-10 17:46:32	-->	djbeau (~djbeau@inet-hqmc05-o.oracle.com) has joined #haskell
2015-03-10 17:47:10	fmapE	Is there a nullary constraint type that inhabits the Constraint kind?
2015-03-10 17:47:29	-->	cfoch (~cfoch@181.64.67.138) has joined #haskell
2015-03-10 17:47:39	fmapE	(I'm writing a type family whose output kind is Constraint, and need no constraint at all in one of the cases)
2015-03-10 17:47:50	-->	phyrex1an (~phyrex1an@2a02:fe0:c121:7360:9838:1ff9:b6a4:77a2) has joined #haskell
2015-03-10 17:47:54	exio4	fmapE: () ? 
2015-03-10 17:47:58	exio4	the empty constraint
2015-03-10 17:48:37	merijn	fmapE: Yeah, () is the one you want, see for example: https://gist.github.com/merijn/6130082
2015-03-10 17:48:47	<--	insitu (~textual@221.244.69.91.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz?)
2015-03-10 17:48:52	-->	aartamonau (~shaleny@206.169.106.2) has joined #haskell
2015-03-10 17:48:53	fmapE	exio4, merijn: "Expected a constraint, but ?()? has kind ?*?"
2015-03-10 17:48:58	ReinH	fmapE: are you using https://hackage.haskell.org/package/constraints ?
2015-03-10 17:49:01	<--	hrolf (~hrolf@unaffiliated/hrolf) has quit (Ping timeout: 255 seconds)
2015-03-10 17:49:15	merijn	Yuras: You might be right, in the sense that CPP does not have to preserve whitespace as is
2015-03-10 17:49:16	<--	mirsal (~mirsal@znc0.irc.he-1.ip6.mirsal.fr) has quit (Quit: ZNC - http://znc.sourceforge.net)
2015-03-10 17:49:40	quchen	merijn: Oh, type families aren't linear? Interesting
2015-03-10 17:49:42	fmapE	ReinH: nope.
2015-03-10 17:49:42	merijn	fmapE: Explicit signature/annotation? If you look at that gist, it should compile with 7.8 and later (maybe 7.6? I forget)
2015-03-10 17:49:52	<--	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has quit (Ping timeout: 245 seconds)
2015-03-10 17:49:58	merijn	quchen: What do you mean?
2015-03-10 17:49:58	fmapE	I don't have an explicit signature on the output, let me do that...
2015-03-10 17:50:09	merijn	fmapE: It defaults to *, afaik
2015-03-10 17:50:12	quchen	merijn: Maybe I meant the instances. Or "the pattern matching" in your gist.
2015-03-10 17:50:33	merijn	quchen: oh, the double use of 'a' on line 6?
2015-03-10 17:50:37	quchen	Yes
2015-03-10 17:50:44	exio4	closed type families
2015-03-10 17:50:44	-->	hrolf (~hrolf@unaffiliated/hrolf) has joined #haskell
2015-03-10 17:50:44	merijn	quchen: Closed type families aren't, indeed :)
2015-03-10 17:50:54	exio4	7.8 feature
2015-03-10 17:51:13	quchen	I see.
2015-03-10 17:51:14	merijn	<3 closed type families
2015-03-10 17:51:26	quchen	And I can't get an empty Constraint to work either.
2015-03-10 17:51:31	--	xiinotulp is now known as plutoniix
2015-03-10 17:51:38	quchen	I tried all (permutations of) extensions I thought might work.
2015-03-10 17:51:42	-->	chenshen (~chenshen@199.201.64.134) has joined #haskell
2015-03-10 17:51:44	-->	path[l] (~vsi@166.170.40.110) has joined #haskell
2015-03-10 17:51:46	fmapE	merijn: That seems to have fixed it. Thank you!
2015-03-10 17:51:48	merijn	Which GHC and do you have the same set of extensions mine does?
2015-03-10 17:51:59	merijn	:k () :: Constraint
2015-03-10 17:51:59	lambdabot	parse error on input ?::?
2015-03-10 17:52:04	merijn	hmmm
2015-03-10 17:52:11	quchen	merijn: Your gist works, but the ()::Constraint doesn't
2015-03-10 17:52:14	-->	ropav (~ropav@184.23.178.130) has joined #haskell
2015-03-10 17:52:34	quchen	() `asTypeOf` Eq Int -- ;-)
2015-03-10 17:52:37	fmapE	7.8.4, and I have yours +  I think
2015-03-10 17:52:54	-->	dysinger (~dysinger@cpe-24-94-75-243.hawaii.res.rr.com) has joined #haskell
2015-03-10 17:52:56	quchen	asKindOf, rather
2015-03-10 17:53:14	merijn	There's an asKinddOf?
2015-03-10 17:53:17	fmapE	quchen, merijn: I put the Constraint type annotation on the type family, not the () type
2015-03-10 17:53:24	quchen	merijn: No, I don't think so.
2015-03-10 17:53:33	-->	erkin (~erkin@unaffiliated/erkin) has joined #haskell
2015-03-10 17:53:34	merijn	fmapE: Right, the return kind for type families is * unless annotated
2015-03-10 17:53:40	<--	Pratik151 (~Pratik151@49.207.88.109) has quit (Quit: Leaving)
2015-03-10 17:53:45	 *	fmapE wants his dependent types back
2015-03-10 17:53:59	<--	mankaev (~mankaev@2a02:2168:18c0:3400:fcc8:49d1:32f3:6e8e) has quit (Remote host closed the connection)
2015-03-10 17:54:05	-->	mystor (~mystor@d67-193-97-66.home3.cgocable.net) has joined #haskell
2015-03-10 17:54:10	fmapE	merijn: Huh. Because it was complaining that () was *, not that my other case (that was a Constraint) wasn't *
2015-03-10 17:54:15	-->	rgkirch (~quassel@rrcs-67-79-154-194.se.biz.rr.com) has joined #haskell
2015-03-10 17:54:24	-->	mankaev (~mankaev@broadband-95-84-233-13.nationalcablenetworks.ru) has joined #haskell
2015-03-10 17:54:35	fmapE	So I assumed it had inferred the Constraint kind for the type family from the first case, and then was complaining about () having kind * and not matching that inference
2015-03-10 17:54:45	<--	fizruk (~anonymous@h86-62-117-103.ln.rinet.ru) has quit (Quit: fizruk)
